dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.16\saves\datapack"
desc "Tools for Practicing Speedruns"


import common
import lootable_shulker_box
import random
import math

@Crystal = @Entity[type=end_crystal]
define @CrystalMarker = @Entity[type=area_effect_cloud, tag=CrystalMarker]
	create {
		Tags:["CrystalMarker"],
		Duration:-1,
		Age:-2147483648,
		WaitTime:-2147483648
	}
end
define @BarsMarker = @Entity[type=area_effect_cloud, tag=BarsMarker]
	create {
		Tags:["BarsMarker"],
		Duration:-1,
		Age:-2147483648,
		WaitTime:-2147483648
	}
end
define @EnderDragon = @Entity[type=ender_dragon,limit=1]
	phase: DragonPhase int 1
	create {
		DragonPhase: 0
	}
end

define @Arrow = @Entity[type=arrow]
	in_ground: inGround byte 1
end

predicate plains {
	condition: 'location_check',
	predicate: {
		biome : 'plains'
	}
}

predicate savanna {
	condition: 'location_check',
	predicate: {
		biome : 'savanna'
	}
}

predicate desert {
	condition: 'location_check',
	predicate: {
		biome : 'desert'
	}
}

predicate in_overworld {
	condition: 'location_check',
	predicate: {
		dimension: 'overworld'
	}
}

predicate in_the_nether {
	condition: 'location_check',
	predicate: {
		dimension: 'the_nether'
	}
}

predicate in_the_end {
	condition: 'location_check',
	predicate: {
		dimension: 'the_end'
	}
}


define block_tag ground
	grass_block
	dirt
	stone
	sand
	gravel
	sandstone
	podzol
	coarse_dirt
	ice
	water
	end_stone
	soul_sand
	soul_soil
	basalt
	netherrack
	nether_quartz_ore
	nether_gold_ore
	nether_bricks
	blackstone
	crimson_nylium
	warped_nylium
end

define block_tag stronghold
	stone_bricks
	mossy_stone_bricks
	cracked_stone_bricks
	chiseled_stone_bricks
	stone_brick_stairs
	mossy_stone_brick_slab
	stone_brick_slab
	infested_stone_bricks
	infested_mossy_stone_bricks
	infested_cracked_stone_bricks
	infested_chiseled_stone_bricks
	mossy_stone_brick_stairs
	iron_door
	stone_button
	oak_door
	chest
	wall_torch
	iron_bars
	bookshelf
	oak_fence
	ladder
end

define block_tag passthrough
	air
	cave_air
	grass
	fern
	dead_bush
	seagrass
	tall_seagrass
	piston_head
	tall_grass
	oak_sapling
	spruce_sapling
	birch_sapling
	jungle_sapling
	acacia_sapling
	dark_oak_sapling
	powered_rail
	detector_rail
	dandelion
	poppy
	blue_orchid
	allium
	azure_bluet
	red_tulip
	orange_tulip
	white_tulip
	pink_tulip
	oxeye_daisy
	brown_mushroom
	red_mushroom
	torch
	wall_torch
	redstone_wire
	wheat
	ladder
	rail
	lever
	redstone_torch
	redstone_wall_torch
	stone_button
	sugar_cane
	attached_pumpkin_stem
	attached_melon_stem
	pumpkin_stem
	melon_stem
	nether_wart
	tripwire_hook
	tripwire
	carrots
	potatoes
	oak_button
	spruce_button
	birch_button
	jungle_button
	acacia_button
	dark_oak_button
	activator_rail
	sunflower
	lilac
	rose_bush
	peony
	tall_grass
	large_fern
	chorus_plant
	chorus_flower
	beetroots
	structure_void
	kelp
	kelp_plant
	dead_tube_coral
	dead_brain_coral
	dead_bubble_coral
	dead_fire_coral
	dead_horn_coral
	tube_coral
	brain_coral
	bubble_coral
	fire_coral
	horn_coral
	dead_tube_coral_wall_fan
	dead_brain_coral_wall_fan
	dead_bubble_coral_wall_fan
	dead_fire_coral_wall_fan
	dead_horn_coral_wall_fan
	tube_coral_wall_fan
	brain_coral_wall_fan
	bubble_coral_wall_fan
	fire_coral_wall_fan
	horn_coral_wall_fan
	dead_tube_coral_fan
	dead_brain_coral_fan
	dead_bubble_coral_fan
	dead_fire_coral_fan
	dead_horn_coral_fan
	tube_coral_fan
	brain_coral_fan
	bubble_coral_fan
	fire_coral_fan
	horn_coral_fan
	void_air
end

reset
	/scoreboard objectives add Practice trigger
	@Player.display_options()
end

$DisplayOptions = 1
$CreateLavaPool = 2
$NearestFortress = 3
$RandomFortress = 4
$PostVillageHotbar = 5
$RandomPlainsVillage = 6
$RandomSavannaVillage = 7
$RandomRuinedPortal = 8
$NearStronghold = 9
$PostNetherHotbar = 10
$InStronghold = 11
$RandomDesertVillage = 12
$ResetEnd = 13
$EndPortal = 14
$TrackCrystalShots = 15
$ResetEndPerch = 16

$Plains = 0
$Savanna = 1
$Desert = 2

define @Player = @Player
	function display_options()
		tell @s ' '
		tell @s ' === Speedrun Practice ==='
		tell @s '{g[\[To Random Plains Village\]](/trigger Practice set $RandomPlainsVillage){-'
		tell @s '{y[\[To Random Savanna Village\]](/trigger Practice set $RandomSavannaVillage){-'
		tell @s '{Y[\[To Random Desert Village\]](/trigger Practice set $RandomDesertVillage){-'
		tell @s '{G[\[Post-Village Hotbar\]](/trigger Practice set $PostVillageHotbar){-'
		tell @s '{m[\[To Random Ruined Portal\]](/trigger Practice set $RandomRuinedPortal){-'
		tell @s '{R[\[Create Lava Pool\]](/trigger Practice set $CreateLavaPool){-'
		tell @s '{r[\[To Nearest Fortress\]](/trigger Practice set $NearestFortress){- {r[\[To Random Fortress\]](/trigger Practice set $RandomFortress){-'
		tell @s '{C[\[Post-Nether Hotbar\]](/trigger Practice set $PostNetherHotbar){-'
		tell @s '{w[\[To <300m from Stronghold\]](/trigger Practice set $NearStronghold){- {w[\[In Stronghold\]](/trigger Practice set $InStronghold){-'
		tell @s '{m[\[Create End Portal\]](/trigger Practice set $EndPortal){-'
		tell @s '{M[\[Reset the End\]](/trigger Practice set $ResetEnd){- {M[\[Reset & Perch\]](/trigger Practice set $ResetEndPerch){-'
		if @s.track_shots
			tell @s '{G[\[Track Crystal Shots (On)\]](/trigger Practice set $TrackCrystalShots){-'
		else
			tell @s '{R[\[Track Crystal Shots (Off)\]](/trigger Practice set $TrackCrystalShots){-'
		end
	end
	
	function perform_practice()
		switch @s.Practice
			case $DisplayOptions
				@s.display_options()
			end
			case $CreateLavaPool
				at @s do create_lava_pool()
			end
			case $NearestFortress
				tell @s 'Finding the closest fortress...'
				in the_nether
					/tp @s ~ ~ ~
					at @s do go_to_fortress()
				end
			end
			case $RandomFortress
				tell @s 'Finding the random fortress...'
				at @s in the_nether
					/tp @s ~ ~ ~
					unless @Position2 do create @Position2
					randx = randint(-124000000, 124000000)
					randz = randint(-124000000, 124000000)
					@Position2.<pos> = <randx, 0, randz>
					at @Position2 do go_to_fortress()
				end
			end
			case $PostVillageHotbar
				@s.post_village_hotbar()
			end
			case $PostNetherHotbar
				@s.post_nether_hotbar()
			end
			case $RandomPlainsVillage
				tell @s 'Finding random plains village...'
				go_to_random_village()
				@s.find_village = True
				@s.village_type = $Plains
			end
			case $RandomSavannaVillage
				tell @s 'Finding random savanna village...'
				go_to_random_village()
				@s.find_village = True
				@s.village_type = $Savanna
			end
			case $RandomDesertVillage
				tell @s 'Finding random desert village...'
				go_to_random_village()
				@s.find_village = True
				@s.village_type = $Desert
			end
			case $RandomRuinedPortal
				done = False
				while not done
					randomize_overworld_position()
					at @Position do locate_overworld{'locate ruined_portal'}()
					at @Position
						if success
								/spreadplayers ~ ~ 0 5 true @s
							done = True
						end
					end
				end
			end
			case $NearStronghold
				in overworld
					unless @Position do create @Position
					locate_overworld{'locate stronghold'}()
					at @Position
						/spreadplayers ~ ~ 0 212 true @s
					end
				end
			end
			case $InStronghold
				in overworld
					unless @Position do create @Position
					at @Position
						/tp @s ~ ~ ~
					end
					locate_overworld{'locate stronghold'}()
					at @Position
						for step = 1 to 500
							@s.random_spot()
							at @s if block ~ ~-1 ~ stronghold and block ~ ~ ~ passthrough and block ~ ~1 ~ passthrough
								step = 1000000
							end
						end
					end
				end
			end
			case $ResetEnd
				reset_the_end(False)
			end
			case $ResetEndPerch
				reset_the_end(True)
			end
			case $EndPortal
				at @s do create_end_portal()
			end
			case $TrackCrystalShots
				if @s.track_shots
					@s.track_shots = False
				else
					@s.track_shots = True
				end
				@s.display_options()
			end
		end
		
		@Player.Practice = 0
		/scoreboard players enable @Player Practice
	end
	
	function random_spot()
		height = randint(2, 6)
		switch height
			case $height in $range(2, 6)
				$under = $height * 10
				/spreadplayers ~ ~ 0 50 under $under true @s
			end
		end
	end
	
	function post_village_hotbar()
		/clear
		/replaceitem entity @s hotbar.0 stone_axe
		/replaceitem entity @s hotbar.1 stone_pickaxe
		/replaceitem entity @s hotbar.2 water_bucket
		/replaceitem entity @s hotbar.3 stone_shovel
		/replaceitem entity @s hotbar.4 flint_and_steel
		/replaceitem entity @s hotbar.5 crafting_table
		/replaceitem entity @s hotbar.6 oak_planks 16
		/replaceitem entity @s hotbar.7 cobblestone 16
		/replaceitem entity @s weapon.offhand bread 64
		/replaceitem entity @s inventory.0 stone_hoe
		/replaceitem entity @s inventory.1 arrow 64
		for $slot in $range(9, 18)
			/replaceitem entity @s inventory.$slot white_bed
		end
	end
	
	function post_nether_hotbar()
		/clear
		/replaceitem entity @s hotbar.0 stone_axe
		/replaceitem entity @s hotbar.1 stone_pickaxe
		/replaceitem entity @s hotbar.2 water_bucket
		/replaceitem entity @s hotbar.3 stone_shovel
		/replaceitem entity @s hotbar.4 ender_eye 16
		/replaceitem entity @s hotbar.5 crafting_table
		/replaceitem entity @s hotbar.6 bow
		/replaceitem entity @s hotbar.7 netherrack 64
		/replaceitem entity @s hotbar.8 bread 64
		/replaceitem entity @s weapon.offhand shield
		
		/replaceitem entity @s inventory.0 cobblestone 16
		/replaceitem entity @s inventory.1 oak_planks 16
		/replaceitem entity @s inventory.2 stone_hoe
		/replaceitem entity @s inventory.3 arrow 64
		/replaceitem entity @s inventory.4 flint_and_steel
		
		for $slot in $range(9, 23)
			/replaceitem entity @s inventory.$slot white_bed
		end
	end
end

clock main
	as @Player unless @s.logged_in == 1
		@s.display_options()
	end
		
	/scoreboard players reset * logged_in
	@Player.logged_in = 1

	@Player.perform_practice()
	
	as @Player[find_village] at @s
		find_village()
	end
	
	mark_end_crystals()
	
	track_crystal_shots()
	
	track_dragon_damage()
	
	as @Player
		@s.<prev_pos> = @s.<pos>
		@s.prev_rx = @s.rx
		@s.prev_ry = @s.ry
	end
	
	in overworld
		/kill @Position
		/kill @Position2
		/kill @Position3
	end
	in the_nether
		/kill @Position
		/kill @Position2
		/kill @Position3
	end
	in the_end
		/kill @Position
		/kill @Position2
		/kill @Position3
	end

end

function go_to_fortress()
	locate_nether_structure{'fortress'}()

	at @Position2
		/spreadplayers ~ ~ 0 30 under 80 true @s
	end
end

function ground_at_cursor{$distance}()
	unless @Position do create @Position
	
	as @Position at ~ ~1.6 ~ at ^ ^ ^$distance
		/tp @s ~ ~ ~
		while True at @s if block ground
			/tp @s ~ ~1 ~
		end
		while True at @s unless block ground
			/tp @s ~ ~-1 ~
		end
	end
end

function create_end_portal()
	ground_at_cursor{5}()
	at @Position
		/fill ~-1 ~ ~-1 ~1 ~ ~1 end_portal
		/fill ~-2 ~1 ~-2 ~2 ~3 ~2 air
		/fill ~-1 ~ ~-2 ~1 ~ ~-2 end_portal_frame[facing=south,eye=true]
		/fill ~2 ~ ~-1 ~2 ~ ~1 end_portal_frame[facing=west,eye=true]
		/fill ~-1 ~ ~2 ~1 ~ ~2 end_portal_frame[facing=north,eye=true]
		/fill ~-2 ~ ~-1 ~-2 ~ ~1 end_portal_frame[facing=east,eye=true]
	end
end

function create_lava_pool()
	ground_at_cursor{15}()
	
	dx = 0
	dz = 0
	for i = 1 to 100
		mv = randint(0, 4)
		r = randint(0, 7)
		nr = randint(-6, 1)
				
		switch mv
			case 0
				if dx < r
					move @Position ~1 ~ ~
					dx++
				end
			end
			case 1
				if dx > nr
					move @Position ~-1 ~ ~
					dx--
				end
			end
			case 2
				if dz < r
					move @Position ~ ~ ~1
					dz++
				end
			end
			case 3
				if dz > nr
					move @Position ~ ~ ~-1
					dz--
				end
			end
		end
		at @Position
			create_lava_column()
		end
	end
end

function create_lava_column()
	depth = randint(1, 3)
	/setblock ~ ~ ~ lava
	/setblock ~ ~-1 ~ stone
	surround_with_stone()
	
	if depth == 2
		/setblock ~ ~-1 ~ lava
		/setblock ~ ~-2 ~ stone
		at ~ ~-1 ~ do surround_with_stone()
	end
	for $i in $range(1, 5)
		/setblock ~ ~$i ~ air
	end
end

function surround_with_stone()
	unless block ~-1 ~ ~ lava
		/setblock ~-1 ~ ~ stone
	end
	unless block ~1 ~ ~ lava
		/setblock ~1 ~ ~ stone
	end
	unless block ~ ~ ~-1 lava
		/setblock ~ ~ ~-1 stone
	end
	unless block ~ ~ ~1 lava
		/setblock ~ ~ ~1 stone
	end
	unless block ~-1 ~ ~-1 lava
		/setblock ~-1 ~ ~-1 stone
	end
	unless block ~1 ~ ~1 lava
		/setblock ~1 ~ ~1 stone
	end
	unless block ~1 ~ ~-1 lava
		/setblock ~1 ~ ~-1 stone
	end
	unless block ~-1 ~ ~1 lava
		/setblock ~-1 ~ ~1 stone
	end
end

function locate_nether_structure{$structure}()
	in the_nether unless @Position2 do create @Position2
	/tp @Position2 ~ ~ ~
	dist = result
		/locate $structure
	xdir = 1
	zdir = 1
	steps = 0

	while dist > 2 and steps < 500
		xdist = dist
		if xdir > 0
			$locate_nether_step(1, 0)
		else
			$locate_nether_step(-1, 0)
		end
		
		at @Position2 do dist = result
			/locate $structure
		
		if xdist < dist
			xdir *= -1
		end
		
		zdist = dist
		if zdir > 0
			$locate_nether_step(0, 1)
		else
			$locate_nether_step(0, 1)
		end
		
		at @Position2 do dist = result
			/locate $structure
		
		if zdist < dist
			zdir *= -1
		end
		
		steps++
	end
end

macro $locate_nether_step($dx, $dz)
	if dist > 300
		$mdx = $dx * 100
		$mdz = $dz * 100
		move @Position2 ~$mdx ~ ~$mdz
	else if dist > 30
		$mdx = $dx * 10
		$mdz = $dz * 10
		move @Position2 ~$mdx ~ ~$mdz
	else
		move @Position2 ~$dx ~ ~$dz
	end
end


function locate_overworld{$command}()
	in overworld unless @Position do create @Position
	/tp @Position ~ ~ ~
	dist = result
		/$command
	xdir = 1
	zdir = 1
	steps = 0

	while dist > 2 and steps < 100
		xdist = dist
		if xdir > 0
			$locate_overworld_step(1, 0)
		else
			$locate_overworld_step(-1, 0)
		end
		
		at @Position do dist = result
			/$command
		
		if xdist < dist
			xdir *= -1
		end
		
		zdist = dist
		if zdir > 0
			$locate_overworld_step(0, 1)
		else
			$locate_overworld_step(0, -1)
		end
		
		at @Position do dist = result
			/$command
		
		if zdist < dist
			zdir *= -1
		end
		
		steps++
	end
end

macro $locate_overworld_step($dx, $dz)
	if dist > 300
		$mdx = $dx * 100
		$mdz = $dz * 100
		move @Position ~$mdx ~ ~$mdz
	else if dist > 30
		$mdx = $dx * 10
		$mdz = $dz * 10
		move @Position ~$mdx ~ ~$mdz
	else
		move @Position ~$dx ~ ~$dz
	end
end

function find_village()
	right_biome = False
	if @s.village_type == $Plains and predicate plains
		right_biome = True
	end
	if @s.village_type == $Savanna and predicate savanna
		right_biome = True
	end
	if @s.village_type == $Desert and predicate desert
		right_biome = True
	end

	if right_biome
		at @s
			/spreadplayers ~ ~ 0 100 true @s
		end
		
		@s.find_village = False
		tell @s 'Found village!'
	end
	
	if @s.find_village
		go_to_random_village()
	end
end

function go_to_random_village()
	randomize_overworld_position()

	at @Position do locate_overworld{'locate village'}()	
	/tp @s @Position
	/effect give @s resistance 5 4 true
end

function randomize_overworld_position()
	randx = randint(-1000000, 1000000)
	randz = randint(-1000000, 1000000)
	
	in overworld unless @Position do create @Position
	@Position.<pos> = <randx, 200, randz> * scale
end

function mark_end_crystals()
	as @Crystal	at @s unless @CrystalMarker[distance=..0.25]
		in the_end unless @Position3 do create @Position3
		create @CrystalMarker
		
		<pos> = @s.<pos>
		
		for dx = -2 to 2
			for dy = -2 to 2
				for dz = -2 to 2
					@Position3.<pos> = <pos> + <dx, dy, dz> * scale
					at @Position3 if block iron_bars
						create @BarsMarker
					end
				end
			end
		end
	end
	
	at @EnderDragon[limit=1]
		/bossbar set dragon players @Player[distance=..256]
		/execute store result bossbar dragon value run data get entity @EnderDragon[limit=1] Health 1
	end
end

function reset_the_end(perch)
	in the_end
		/kill @e[type=ender_dragon]
		/kill @e[type=minecraft:experience_orb]
		if perch
			/summon ender_dragon 0 100 0 {DragonPhase: 3}
		else
			create @EnderDragon 0 100 0
		end

		at @CrystalMarker unless @Crystal[distance=..1]
			/summon end_crystal
		end
		at @BarsMarker
			/setblock ~ ~ ~ iron_bars
		end
		
		/fill -2 60 -2 2 70 2 air replace end_portal
		/fill 0 60 0 0 75 0 air replace dragon_egg
		
		/bossbar add dragon "Ender Dragon"
		/bossbar set dragon max 200
		/bossbar set dragon color pink
	end
end

function display_dimension()
	if predicate in_overworld
		tell @a 'overworld'
	end
	
	if predicate in_the_nether
		tell @a 'the_nether'
	end
	
	if predicate in_the_end
		tell @a 'the_end'
	end
end

function track_crystal_shots()
	as @Crystal at @s facing @Arrow[distance=..20,nbt={inGround:0b},limit=1,sort=nearest] at ^10 ^ ^10 facing @s
		as @Player[track_shots] unless @s.tracking_shot
			<x1, y1, z1> = @s.<prev_pos>
			<x2, y2, z2> = @s.<pos>
			if x1 == x2 and y1 == y2 and z1 == z2 and @s.prev_rx == @s.rx and @s.prev_ry == @s.ry
				@s.<old_pos> = @s.<pos>
				@s.old_rx = @s.rx
				@s.old_ry = @s.ry
				/tp @s ~ ~ ~ ~-45 ~20
				if @s[gamemode=creative]
					@s.old_gamemode = 1
				else
					@s.old_gamemode = 0
				end
				/gamemode spectator @s
				
				@s.tracking_shot = True
			end
		end
	end
	
	as @Player[tracking_shot] at @s
		if @Arrow[distance=..30,nbt={inGround:0b}]
			@s.not_tracking = 0
		else
			@s.not_tracking++
			
			if @s.not_tracking < 10 and @s.prev_rx == @s.rx and @s.prev_ry == @s.ry
			else
				in the_end unless @Position3 do create @Position3
				@Position3.<pos> = @s.<old_pos>
				@Position3.rx = @s.old_rx
				@Position3.ry = @s.old_ry
				at @Position3
					/tp @s ~ ~ ~ ~ ~
				end
				@s.tracking_shot = False
				if @s.old_gamemode == 1
					/gamemode creative @s
				else
					/gamemode survival @s
				end
			end
		end
	end
end

function track_dragon_damage()
	hp = @EnderDragon.hp
	
	if hp < old_hp
		damage = old_hp - hp
		tell @Player '(damage) damage to dragon'
	end
	
	if hp <= 0 and old_hp > 0
		@Player.display_options()
	end
	
	old_hp = hp
end