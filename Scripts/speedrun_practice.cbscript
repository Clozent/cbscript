dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.16\saves\New World (35)"
desc "Tools for Practicing Speedruns"


import common
import lootable_shulker_box
import random
import math

predicate plains {
	condition: 'location_check',
	predicate: {
		biome : 'plains'
	}
}

predicate savanna {
	condition: 'location_check',
	predicate: {
		biome : 'savanna'
	}
}

define block_tag ground
	grass_block
	dirt
	stone
	sand
	gravel
	sandstone
	podzol
	coarse_dirt
	ice
	water
end

define block_tag passthrough
	air
	cave_air
	grass
	fern
	dead_bush
	seagrass
	tall_seagrass
	piston_head
	tall_grass
	oak_sapling
	spruce_sapling
	birch_sapling
	jungle_sapling
	acacia_sapling
	dark_oak_sapling
	powered_rail
	detector_rail
	dandelion
	poppy
	blue_orchid
	allium
	azure_bluet
	red_tulip
	orange_tulip
	white_tulip
	pink_tulip
	oxeye_daisy
	brown_mushroom
	red_mushroom
	torch
	wall_torch
	redstone_wire
	wheat
	ladder
	rail
	lever
	redstone_torch
	redstone_wall_torch
	stone_button
	sugar_cane
	attached_pumpkin_stem
	attached_melon_stem
	pumpkin_stem
	melon_stem
	nether_wart
	tripwire_hook
	tripwire
	carrots
	potatoes
	oak_button
	spruce_button
	birch_button
	jungle_button
	acacia_button
	dark_oak_button
	activator_rail
	sunflower
	lilac
	rose_bush
	peony
	tall_grass
	large_fern
	chorus_plant
	chorus_flower
	beetroots
	structure_void
	kelp
	kelp_plant
	dead_tube_coral
	dead_brain_coral
	dead_bubble_coral
	dead_fire_coral
	dead_horn_coral
	tube_coral
	brain_coral
	bubble_coral
	fire_coral
	horn_coral
	dead_tube_coral_wall_fan
	dead_brain_coral_wall_fan
	dead_bubble_coral_wall_fan
	dead_fire_coral_wall_fan
	dead_horn_coral_wall_fan
	tube_coral_wall_fan
	brain_coral_wall_fan
	bubble_coral_wall_fan
	fire_coral_wall_fan
	horn_coral_wall_fan
	dead_tube_coral_fan
	dead_brain_coral_fan
	dead_bubble_coral_fan
	dead_fire_coral_fan
	dead_horn_coral_fan
	tube_coral_fan
	brain_coral_fan
	bubble_coral_fan
	fire_coral_fan
	horn_coral_fan
	void_air
end

reset
	/scoreboard objectives add Practice trigger
	@Player.display_options()
end

$DisplayOptions = 1
$PracticeNether = 2
$PracticeFortress = 3
$RandomFortress = 4
$PreNetherHotbar = 5
$RandomPlainsVillage = 6
$RandomSavannaVillage = 7

$Plains = 0
$Savanna = 1

define @Player = @Player
	function display_options()
		tell @s '{g[\[To Random Plains Village\]](/trigger Practice set $RandomPlainsVillage){- {y[\[To Random Savanna Village\]](/trigger Practice set $RandomSavannaVillage){-'
		tell @s '{G[\[Pre-Nether Hotbar\]](/trigger Practice set $PreNetherHotbar){-'
		tell @s '{R[\[Create Lava Pool\]](/trigger Practice set $PracticeNether){-'
		tell @s '{r[\[To Nearest Fortress\]](/trigger Practice set $PracticeFortress){- {r[\[To Random Fortress\]](/trigger Practice set $RandomFortress){-'
	end
	
	function pre_nether_hotbar()
		/clear
		/replaceitem entity @s hotbar.0 stone_axe
		/replaceitem entity @s hotbar.1 stone_pickaxe
		/replaceitem entity @s hotbar.2 water_bucket
		/replaceitem entity @s hotbar.3 stone_shovel
		/replaceitem entity @s hotbar.4 flint_and_steel
		/replaceitem entity @s hotbar.5 crafting_table
		/replaceitem entity @s hotbar.6 oak_planks 16
		/replaceitem entity @s hotbar.7 cobblestone 16
		/replaceitem entity @s weapon.offhand bread 22
		/replaceitem entity @s inventory.0 stone_hoe
		/replaceitem entity @s inventory.1 white_bed
		/replaceitem entity @s inventory.2 arrow 64
	end

	function find_nether_bricks()
		found = False
		for delta = 1 to 99
			$search_delta(-1, 0)
			if found
				delta = 100000
			else
				$search_delta(1, 0)
				if found
					delta = 100000
				else
					$search_delta(0, -1)
					if found
						delta = 100000
					else
						$search_delta(0, 1)
						if found
							delta = 100000
						end
					end
				end
			end
		end
		
		if found
			@Position2.<pos> = @s.<structpos>
			at @Position2 align xyz
				/tp @s ~0.5 ~1 ~0.5
				/effect give @s minecraft:instant_health 1 10
			end
			<x, y, z> = @s.<structpos> / scale
			tell @s 'Fortress at (x), (y), (z).'
		else
			tell @s 'No fortress found.'
		end
	end
end

clock main
	unless @Position do create @Position
	as @Player unless @s.logged_in == 1
		@s.display_options()
	end
	
	as @Player[move_to_ground]
		while True at @s if block ~ ~-1 ~ passthrough
			/tp @s ~ ~-1 ~
		end
		@s.move_to_ground = False
	end
	
	as @Player[brick_search] at @s
		in the_nether unless @Position2 do create @Position2
		/tp @Position2 @s
		@s.find_nether_bricks()
		@s.brick_search = False
	end
	
	/scoreboard players reset * logged_in
	@Player.logged_in = 1

	as @Player
		switch @s.Practice
			case $DisplayOptions
				@s.display_options()
			end
			case $PracticeNether
				at @s
					create_lava_pool()
				end
			end
			case $PracticeFortress
				tell @s 'Finding the closest fortress...'
				at @s do move_to_fortress_point()
			end
			case $RandomFortress
				at @s in the_nether
					/tp @s ~ ~ ~
					unless @Position2 do create @Position2
					randx = randint(-124000000, 124000000)
					randz = randint(-124000000, 124000000)
					@Position2.<pos> = <randx, 0, randz>
					/tp @s @Position2
					at @Position2 do move_to_fortress_point()
				end
			end
			case $PreNetherHotbar
				@s.pre_nether_hotbar()
			end
			case $RandomPlainsVillage
				@s.find_village = True
				@s.village_type = $Plains
			end
			case $RandomSavannaVillage
				@s.find_village = True
				@s.village_type = $Savanna
			end
		end
	end
	
	as @Player[find_village]
		find_village()
	end
	
	@Player.Practice = 0
	/scoreboard players enable @Player Practice
end

function move_to_fortress_point()
	locate_nether_structure{'fortress'}()
	<x, y, z> = @Position2.<pos> / scale
	/tp @s @Position2
	/effect give @s resistance 5 4 true
	@s.brick_search = True
end

function create_lava_pool()
	unless @Position do create @Position
	/tp @Position ~ ~ ~
	
	at ~ ~1.6 ~ at ^ ^ ^15
		/tp @Position ~ ~ ~
		while True at @Position if block ~ ~ ~ ground
			/tp @Position ~ ~1 ~
		end
		while True at @Position unless block ~ ~ ~ ground
			/tp @Position ~ ~-1 ~
		end
		dx = 0
		dz = 0
		for i = 1 to 100
			mv = randint(0, 4)
			r = randint(0, 7)
			nr = randint(-6, 1)
					
			switch mv
				case 0
					if dx < r
						move @Position ~1 ~ ~
						dx++
					end
				end
				case 1
					if dx > nr
						move @Position ~-1 ~ ~
						dx--
					end
				end
				case 2
					if dz < r
						move @Position ~ ~ ~1
						dz++
					end
				end
				case 3
					if dz > nr
						move @Position ~ ~ ~-1
						dz--
					end
				end
			end
			at @Position
				create_lava_column()
			end
		end
	end
end

function create_lava_column()
	depth = randint(1, 2)
	/setblock ~ ~ ~ lava
	/setblock ~ ~-1 ~ stone
	surround_with_stone()
	
	if depth == 2
		/setblock ~ ~-1 ~ lava
		/setblock ~ ~-2 ~ stone
		at ~ ~-1 ~ do surround_with_stone()
	end
	for $i in $range(1, 5)
		/setblock ~ ~$i ~ air
	end
end

function surround_with_stone()
	unless block ~-1 ~ ~ lava
		/setblock ~-1 ~ ~ stone
	end
	unless block ~1 ~ ~ lava
		/setblock ~1 ~ ~ stone
	end
	unless block ~ ~ ~-1 lava
		/setblock ~ ~ ~-1 stone
	end
	unless block ~ ~ ~1 lava
		/setblock ~ ~ ~1 stone
	end
	unless block ~-1 ~ ~-1 lava
		/setblock ~-1 ~ ~-1 stone
	end
	unless block ~1 ~ ~1 lava
		/setblock ~1 ~ ~1 stone
	end
	unless block ~1 ~ ~-1 lava
		/setblock ~1 ~ ~-1 stone
	end
	unless block ~-1 ~ ~1 lava
		/setblock ~-1 ~ ~1 stone
	end
end

function locate_nether_structure{$structure}()
	in the_nether unless @Position2 do create @Position2
	/tp @Position2 ~ ~ ~
	dist = result
		/locate $structure
	xdir = 1
	zdir = 1
	steps = 0

	while dist > 2 and steps < 500
		xdist = dist
		if xdir > 0
			if dist > 50
				move @Position2 ~10 ~ ~
			else
				move @Position2 ~1 ~ ~
			end
		else
			if dist > 50
				move @Position2 ~-10 ~ ~
			else
				move @Position2 ~-1 ~ ~
			end
		end
		
		at @Position2 do dist = result
			/locate $structure
		
		if xdist < dist
			xdir *= -1
		end
		
		zdist = dist
		if zdir > 0
			if dist > 50
				move @Position2 ~ ~ ~10
			else
				move @Position2 ~ ~ ~1
			end
		else
			if dist > 50
				move @Position2 ~ ~ ~-10
			else
				move @Position2 ~ ~ ~-1
			end
		end
		
		at @Position2 do dist = result
			/locate $structure
		
		if zdist < dist
			zdir *= -1
		end
		
		steps++
	end
end


function locate_overworld{$command}()
	in overworld unless @Position do create @Position
	/tp @Position ~ ~ ~
	dist = result
		/$command
	xdir = 1
	zdir = 1
	steps = 0

	while dist > 2 and steps < 100
		xdist = dist
		if xdir > 0
			if dist > 300
				move @Position ~100 ~ ~
			else if dist > 30
				move @Position ~10 ~ ~
			else
				move @Position ~1 ~ ~
			end
		else
			if dist > 300
				move @Position ~-100 ~ ~
			else if dist > 30
				move @Position ~-10 ~ ~
			else
				move @Position ~-1 ~ ~
			end
		end
		
		at @Position do dist = result
			/$command
		
		if xdist < dist
			xdir *= -1
		end
		
		zdist = dist
		if zdir > 0
			if dist > 300
				move @Position ~ ~ ~100
			else if dist > 30
				move @Position ~ ~ ~10
			else
				move @Position ~ ~ ~1
			end
		else
			if dist > 300
				move @Position ~ ~ ~-100
			else if dist > 30
				move @Position ~ ~ ~-10
			else
				move @Position ~ ~ ~-1
			end
		end
		
		at @Position do dist = result
			/$command
		
		if zdist < dist
			zdir *= -1
		end
		
		steps++
	end
end

macro $search_delta($signx, $signz)
	switch delta
		case $delta in $range(1, 100)
			$dx = $signx * $delta
			$dz = $signz * $delta
			$ndx = -$dx
			$ndz = -$dz
			
			move @Position2 ~$dx 127 ~$dz
			search_column()
			move @Position2 ~$ndx ~ ~$ndz
		end
	end
end

function search_column()	
	tracky = 127
	while tracky > 0 and not found
		at @Position2 if block ~ ~ ~ nether_bricks if block ~ ~1 ~ air if block ~ ~2 ~ air
			@s.<structpos> = @Position2.<pos>
			found = True
		end
		tracky--
		move @Position2 ~ ~-1 ~
	end
end

function find_village()
	if @s.at_village at @s
		right_biome = False
		if @s.village_type == $Plains and predicate plains
			right_biome = True
		end
		if @s.village_type == $Savanna and predicate savanna
			right_biome = True
		end
	
		if right_biome
			unless @Position do create @Position
			/tp @Position @s
			randx = randint(-100, 100)
			randz = randint(-100, 100)
			@Position.<pos> += <randx, 0, randz> * scale
			/tp @s @Position
			@s.move_to_ground = True
			at @s align xyz
				/tp @s ~0.5 ~ ~0.5
			end
			
			@s.find_village = False
			tell @s 'Found village!'
		end
		@s.at_village = False
	else
		randomize_position()

		at @Position do locate_overworld{'locate village'}()	
		/tp @s @Position
		/effect give @s resistance 5 4 true
		
		@s.at_village = True
	end
end

function randomize_position()
	randx = randint(-1000000, 1000000)
	randz = randint(-1000000, 1000000)
	
	in overworld unless @Position do create @Position
	@Position.<pos> = <randx, 200, randz> * scale
end