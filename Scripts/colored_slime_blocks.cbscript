dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.14\saves\SethBling's World 1.14"
desc "Colored slime blocks for piston machines"

import common
import piston_pushable

define block_tag sticky
	slime_block
	white_stained_glass
	orange_stained_glass
	magenta_stained_glass
	light_blue_stained_glass
	yellow_stained_glass
	lime_stained_glass
	pink_stained_glass
	gray_stained_glass
	light_gray_stained_glass
	cyan_stained_glass
	purple_stained_glass
	blue_stained_glass
	brown_stained_glass
	green_stained_glass
	red_stained_glass
	black_stained_glass
end

$Colors = [
	'white_stained_glass',
	'orange_stained_glass',
	'magenta_stained_glass',
	'light_blue_stained_glass',
	'yellow_stained_glass',
	'lime_stained_glass',
	'pink_stained_glass',
	'gray_stained_glass',
	'light_gray_stained_glass',
	'cyan_stained_glass',
	'purple_stained_glass',
	'blue_stained_glass',
	'brown_stained_glass',
	'green_stained_glass',
	'red_stained_glass',
	'black_stained_glass',
]

$Deltas = [
	(0, -1, 0),
	(0, 1, 0),
	(0, 0, -1),
	(0, 0, 1),
	(-1, 0, 0),
	(1, 0, 0),
]

$PullDeltas = [
	(0, 1, 0),
	(0, -1, 0),
	(0, 0, 1),
	(0, 0, -1),
	(1, 0, 0),
	(-1, 0, 0),
]

$SideDeltas = [
	[$Deltas[2], $Deltas[3], $Deltas[4], $Deltas[5], $PullDeltas[0]],
	[$Deltas[2], $Deltas[3], $Deltas[4], $Deltas[5], $PullDeltas[1]],
	[$Deltas[0], $Deltas[1], $Deltas[4], $Deltas[5], $PullDeltas[2]],
	[$Deltas[0], $Deltas[1], $Deltas[4], $Deltas[5], $PullDeltas[3]],
	[$Deltas[0], $Deltas[1], $Deltas[2], $Deltas[3], $PullDeltas[4]],
	[$Deltas[0], $Deltas[1], $Deltas[2], $Deltas[3], $PullDeltas[5]],
]

$DirNames = [
	'down',
	'up',
	'north',
	'south',
	'west',
	'east',
]

$Undefined = 0
$Pushable = 1
$Break = 2
$BlockPush = 3
$Pushed = 4
$Nonstick = 5

$OppositeDir = [1, 0, 3, 2, 5, 4]

define @SlimeMarker: @Entity[type=area_effect_cloud,tag=SlimeMarker]
	create {Tags:["SlimeMarker"], Duration:-1,Age:-2147483648,WaitTime:-2147483648}
end

define @PushMarker: @Entity[type=area_effect_cloud,tag=PushMarker]
	create {Tags:["PushMarker","Pushing"], Duration:-1,Age:-2147483648,WaitTime:-2147483648}
end

define @BreakMarker: @Entity[type=area_effect_cloud,tag=BreakMarker]
	create {Tags:["BreakMarker","Pushing"], Duration:-1,Age:-2147483648,WaitTime:-2147483648}
end

define @MovingBlockPos : @Entity[type=armor_stand, tag=MovingBlockPos]
end

@NewMovingBlockPos = @Entity[type=armor_stand, tag=NewMovingBlockPos]

define @MovingBlock : @Entity[type=falling_block,tag=MovingBlock]
	time: Time byte 1
end
@NewMovingBlock = @Entity[type=falling_block,tag=NewMovingBlock]

@Pushing = @Entity[type=area_effect_cloud, tag=Pushing]

define [Moving]
	extending: extending byte 1
	face: facing int 1
	source: source byte 1
end

define @Player: @Player
	array place_slime[0 to 15]
end

reset
	/gamerule maxCommandChainLength 1000000000

	for $i in $range($len($Colors))
		$c = $Colors[$i]
		/scoreboard objectives add place_slime$i minecraft.used:minecraft.$c
	end
	
	tell @a 'Loaded {RColored {GSlime {BBlocks{- by SethBling'
end

clock main
	as @PushMarker[move_timer > 0]
		@s.move_timer--
		if @s.move_timer == 0
			at @s if block ~ ~ ~ barrier
				/setblock ~ ~ ~ air
			end
			move_dir = @s.move_dir
			switch @s.move_dir
				case $d in $range(6)
					at @s as @SlimeMarker[distance=..0.1,move_timer==0]
						move @s ~<$Deltas[$d]>
					end
					move @s ~<$Deltas[$d]>
				end
			end
			at @s
				set_block()
			end
			/kill @s
		end
	end
	
	as @SlimeMarker at @s
		if @s.move_timer
			@s.move_timer--
			if @s.move_timer == 0
				at @s if block ~ ~ ~ barrier
					/setblock ~ ~ ~ air
				end
				switch @s.move_dir
					case $d in $range(6)
						move @s ~<$Deltas[$d]>
					end
				end
				switch @s.color
					case $i in $range(16)
						$color = $Colors[$i]
						at @s
							/setblock ~ ~ ~ $color
						end
					end
				end
			end
		else
			for $d in $range(6)
				# Regular 3 tick pull
				at ~<$PullDeltas[$d]> at ~<$PullDeltas[$d]>
					if [Moving].face == $d and [Moving].extending == 0 and [Moving].source == 1
						at @s
							$dx, $dy, $dz = $PullDeltas[$d]
							
							$op = $OppositeDir[$d]
							@s.move_dir = $op
							@s.move_timer = 3
							get_pushable_list{$op, False}()
						end
					end
				end
				
				# 0-tick push then pull
				at ~<$PullDeltas[$d]>
					if [Moving].face == $d and [Moving].extending == 0 and [Moving].source == 1
						$op = $OppositeDir[$d]
						at @s
							get_pushable_list{$d, True}()
						end
						at @s ~<$Deltas[$d]>
							/setblock ~ ~ ~ barrier
							/tp @s ~ ~ ~
							@s.move_dir = $op
							@s.move_timer = 3
							get_pushable_list{$op, False}()
						end
					end
				end
				
				# Regular 3 tick push
				at ~<$Deltas[$d]>
					if [Moving].face == $d and [Moving].extending and not [Moving].source
						@s.move_dir = $d
						@s.move_timer = 3
						at @s
							get_pushable_list{$d, True}()
						end
					end
				end
			end
			
			at @s unless block ~ ~ ~ sticky unless block ~ ~ ~ barrier if @s.move_timer == 0
				/kill @s
			end
		end
	end
	
	@MovingBlockPos.move_timer--
	@MovingBlock.move_timer--
	as @MovingBlockPos
		if @s.move_timer >= 0
			switch @s.d
				case $d in $range(6)
					$dx, $dy, $dz = $Deltas[$d]
					$dx = $dx / 2.0
					$dy = $dy / 2.0
					$dz = $dz / 2.0
					move @s ~$dx ~$dy ~$dz
				end
			end
		else
			/kill @s
		end
	end
	as @MovingBlock
		@s.time = 1
		if @s.move_timer < 0
			/kill @s
		end
	end
		
	as @Player at @s eyes ^ ^ ^
		for $i in $range(16)
			if @s.place_slime[$i]
				steps = 0
				while steps < 60 at feet ^ ^ ^0.1
					if block ~ ~ ~ sticky align xyz at ~0.5 ~0.5 ~0.5 unless @SlimeMarker[distance=..0.1]
						for $i in $range(16)
							$color = $Colors[$i]
							if block ~ ~ ~ $color
								as create @SlimeMarker
									@s.color = $i
									@s.move_timer = 0
								end
								steps = 1000000
							end
						end
					end
					steps++
				end
				
				@s.place_slime[$i] = False
			end
		end
	end
end

function get_pushable_list{$d, $extend}()
	push_count = 0
	
	at @s
		recursive_pushed{$d}()
	end
	
	if push_count <= 12
		at @BreakMarker
			/setblock ~ ~ ~ air destroy
		end
		/kill @BreakMarker
		/kill @PushMarker[not act]
		@PushMarker.move_timer += 0
		as @PushMarker[move_timer==0] at @s
			get_block()
			@s.move_dir = $d
		end
		as @PushMarker[move_timer==0] at @s
			@s.move_timer = 3
			$dx, $dy, $dz = $Deltas[$d]
			/setblock ~ ~ ~ barrier
			/setblock ~$dx ~$dy ~$dz barrier
			
			block_id = @s.block_id
			create_moving_block()
			as @NewMovingBlockPos[limit=1]
				@s.d = $d
				@s.move_timer = 3
				/tag @s remove NewMovingBlockPos
			end
			as @NewMovingBlock[limit=1]
				@s.move_timer = 3
				set_moving_block_state()
				/tag @s remove NewMovingBlock
			end
		end
	else
		@PushMarker.move_timer += 0
		/kill @PushMarker[move_timer == 0]
		/kill @BreakMarker
	end
end

function create_moving_block()
	switch block block_id
		case $block_name, $block_id
			$block_name_parts = $block_name.$split('[')
			$block_name = $block_name_parts[0]
			/summon armor_stand ~ ~-0.5 ~ {Tags:["MovingBlockPos", "NewMovingBlockPos"], Marker:1b, Invisible:1b, Invulnerable:1b, NoGravity:1b, Passengers:[{id:"falling_block", Time:1b, NoGravity:1b, BlockState:{Name:"$block_name"}, Tags:["MovingBlock","NewMovingBlock"]}]}
		end
	end
end

function get_block()
	switch block
		case $block_name, $block_id
			@s.block_id = $block_id
		end
	end
end

function set_block()
	switch block @s.block_id
		case $block_name, $block_id
			$is_observer = $block_name.$startswith('minecraft:observer[')
			if $is_observer
				$block_name = $block_name.$replace('powered=false', 'powered=true')
				/setblock ~ ~ ~ $block_name
			else
				/setblock ~ ~ ~ $block_name
			end
		end
	end
end

function recursive_pushed{$d}()
	at ~<$Deltas[$d]>
		$get_pushable($d)
	end
	if pushable == $Pushed
		push_count++
		as create @PushMarker
			@s.act = False
			at ~<$Deltas[$d]>
				recursive_pushed{$d}()
			end
			
			for $i in $range(16)
				sticky_color = -1
			
				$color = $Colors[$i]
				
				$dx, $dy, $dz = $Deltas[$d]
				/execute if data block ~$dx ~$dy ~$dz {blockState:{Name:"minecraft:$color"}} run scoreboard players set Global sticky_color $i
				if sticky_color >= 0
					recursive_push{$d, True, True}()
				end
			end
		end
	end
end

function recursive_push{$d, $extend, $force_sticky}()
	at @s
		if $force_sticky
		else
			at ~<$Deltas[$d]> unless @Pushing[distance=..0.1,limit=1]
				$get_pushable($d)
				if pushable == $BlockPush
					push_count = 1000
					<x, y, z> = here / scale
					tell @a 'Blocked at (x) (y) (z)'
				else if pushable == $Break
					create @BreakMarker
				else
					recursive = False
					if pushable == $Pushable
						recursive = True
						act = True
					end
					if pushable == $Pushed
						recursive = True
						act = False
					end
					if recursive
						push_count++
						if push_count <= 12
							as create @PushMarker
								@s.act = act
								recursive_push{$d, $extend, False}()
							end
						end
					end
				end
			end
		end
		if $force_sticky
			sticky = True
		else
			sticky = False
			if block ~ ~ ~ sticky
				sticky = True
			end
		end
			
		if sticky
			for $side_delta in $SideDeltas[$d]
				at ~<$side_delta> unless @Pushing[distance=..0.1,limit=1]
					$get_pushable($d)
					
					if $force_sticky
						switch sticky_color
							case $i in $range(16)
								$color = $Colors[$i]
								if block ~ ~ ~ sticky unless block ~ ~ ~ $color
									pushable = $Nonstick
								end
							end
						end
					else					
						for $color in $Colors
							if block ~ ~ ~ sticky if block ~ ~ ~ $color at @s unless block ~ ~ ~ $color
								pushable = $Nonstick
							end
						end
					end
					
					recursive = False
					if pushable == $Pushable
						recursive = True
						act = True
					end
					if pushable == $Pushed
						recursive = True
						act = False
					end
					if recursive
						push_count++
						if push_count <= 12
							as create @PushMarker
								@s.act = act
								recursive_push{$d, $extend, False}()
							end
						end
					end
				end
			end
		end
	end
end

macro $get_pushable($direction)
	pushable = $Undefined
	
	/execute if data block ~ ~ ~ {id:"minecraft:piston", source:0b, progress:0.0f, extending:1b, facing: $direction} run scoreboard players set Global pushable $Pushed
	$op = $OppositeDir[$direction]
	/execute if data block ~ ~ ~ {id:"minecraft:piston", source:0b, progress:0.0f, extending:0b, facing: $op} run scoreboard players set Global pushable $Pushed
	if pushable == $Undefined
		/execute if data block ~ ~ ~ {} run scoreboard players set Global pushable $BlockPush
	end
	
	if pushable == $Undefined
		if block ~ ~ ~ piston[extended=false]
			pushable = $Pushable
		else if block ~ ~ ~ piston[extended=true]
			pushable = $BlockPush
		else if block ~ ~ ~ sticky_piston[extended=false]
			pushable = $Pushable
		else if block ~ ~ ~ sticky_piston[extended=true]
			pushable = $BlockPush
		else if block ~ ~ ~ piston_push
			pushable = $Pushable
		else if block ~ ~ ~ piston_block
			pushable = $BlockPush
		else
			pushable = $Break
		end
	end
end