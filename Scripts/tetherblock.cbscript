dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.20\saves\TetherBlock"
desc "TetherBlock game"
scale 1000

import common
import math
import colliders

@Interaction = @Entity[type=interaction]

define @PlayerInteraction = @Interaction[tag=PlayerInteraction]
    create {width:3, height:3, teleport_duration:1, Tags:["PlayerInteraction"]}
end

define @RopeSegment = @Entity[type=block_display,tag=RopeSegment]
    create {block_state: {Name: "minecraft:brown_concrete", count: 0b}, teleport_duration: 0, interpolation_duration: 0, transformation:{left_rotation: [0f, 0f, 0f, 1f], translation: [0f, 0f, 0f], right_rotation: [0f, 0f, 0f, 1f], scale:[0.05f, 0.05f, 0.05f]}, Tags:["RopeSegment"]}
    
    tele_dur: teleport_duration int 1
    interp_dur = interpolation_duration int 1
end

$Precision = 1000
$Half = 500
$Billion = 1000000000
$AttackRange = 10000
$PunchPower = 1000

$PoleBase = 56000
$SpringConstant = 100

$Unwrapped = 1
$ClockXPosZPos = 2
$ClockXNegZPos = 3
$ClockXNegZNeg = 4
$ClockXPosZNeg = 5
$CounterXPosZPos = 6
$CounterXPosZNeg = 7
$CounterXNegZNeg = 8
$CounterXNegZPos = 9

reset
    /scoreboard objectives add absorbed minecraft.custom:minecraft.damage_dealt_absorbed

    initialize_transforms()

    CubeSize = 1500
    CubeInvMass = 800
    CubeInvRotInt = 400
end

function clear_game()
    destroy_colliders()
    /kill @RopeSegment
    /kill @PlayerInteraction
end

function start_normal_game()
    clear_game()
    
    /fill 0 56 0 0 67 0 minecraft:birch_fence
    
    PoleRadius = 125
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherX = 500+PoleRadius
    TetherY = $PoleBase + PoleHeight
    TetherZ = 500
    TetherLength = 8000

    with
        $(block_name) = "red_wool"
    add_collider(1000, 60000, 1000)
    
    @PhysicsBlock.free_length = TetherLength
end

clock tick
    /kill @Position
    create @Position
    
    as @Player at @s ~ ~ ~
        if @s.id
            id = @s.id
        else
            player_id++
            @s.id = player_id
            id = player_id
        end
    
        as @PlayerInteraction if @s.id == id
            /tp @s ~ ~ ~
        else
            as create @PlayerInteraction
                @s.id = id
            end
        end
    end
    
    as @PlayerInteraction
        id = @s.id
        as @Player if @s.id == id
        else
            /kill @s
        end
    end
    
    as @PlayerInteraction
        on attacker
            at @s eyes
                /tp @Position ^ ^ ^
                world_eye_x = @Position.x
                world_eye_y = @Position.y
                world_eye_z = @Position.z
                
                /tp @Position ^ ^ ^1
                world_eye_dx = @Position.x - world_eye_x
                world_eye_dy = @Position.y - world_eye_y
                world_eye_dz = @Position.z - world_eye_z
            end
        
            min_col_t = $Billion

            # Find the nearest collider in the direction of the cursor ray
            for collider = 1 to max_collider
                with
                    $(collider) = collider
                do
                    define name collider = "collider_$(collider)"

                    if collider_ray_intersection(world_eye_x, world_eye_y, world_eye_z, world_eye_dx, world_eye_dy, world_eye_dz) with macros
                        if t < min_col_t
                            min_col_t = t
                            min_x = collision_x
                            min_y = collision_y
                            min_z = collision_z
                            min_col = collider
                        end
                    end
                end
            end
            
            if min_col_t <= $AttackRange
                # There was a ray intersection
                
                @s.attacking = min_col
                @s.attack_x = min_x
                @s.attack_y = min_y
                @s.attack_z = min_z
                @s.attack_dx = world_eye_dx
                @s.attack_dy = world_eye_dy
                @s.attack_dz = world_eye_dz
                
            end
        end
        /data remove entity @s attack
        /data remove entity @s interaction
    end
    
    as @Player
        if @s.attacking
            with
                $(collider) = @s.attacking
            collider_apply_impulse(@s.attack_x, @s.attack_y, @s.attack_z, @s.attack_dx * $PunchPower / scale, @s.attack_dy * $PunchPower / scale, @s.attack_dz * $PunchPower / scale)

            @Position.<pos> = <@s.attack_x, @s.attack_y, @s.attack_z>
            at @Position
                /particle minecraft:explosion ~ ~ ~ 0 0 0 0 1 force
            end
        
            @s.attacking = 0
        end
    end

    as @PhysicsBlock
        id = @s.collider_id
        segments = @s.segments
        free_length = @s.free_length
        as @RopeSegment if @s.id == id and @s.segment == segments
            spring_x = @s.origin_x
            spring_y = @s.origin_y
            spring_z = @s.origin_z
            spring_neutral = free_length
            spring_constant = $SpringConstant
            local_att_x = 0
            local_att_y = CubeSize / 2
            local_att_z = 0
            
            with
                $(collider) = id
            collider_apply_spring_cable(spring_x, spring_y, spring_z, spring_neutral, spring_constant, local_att_x, local_att_y, local_att_z)
        end
    end
        
    colliders_physics_tick()
    colliders_get_new_collisions()
    colliders_resolve_collisions()
    colliders_finalize_tick()
    
    as @PhysicsBlock at @s ~ ~-1.5 ~
        id = @s.collider_id
        segments = @s.segments
        free_length = @s.free_length
        
        as @RopeSegment if @s.id == id and @s.segment == segments
            # Handle the last segment
            
            with
                $(collider) = id
            collider_local_to_world(0, 750, 0, True)
            
            dx = world_x - @s.origin_x
            dy = world_y - @s.origin_y
            dz = world_z - @s.origin_z
            new_wrap_state = False
            unwrap = False
            
            switch @s.wrap_state
                case $Unwrapped
                    if dx < 0
                        if dz > 0
                            wrapped_portion = PoleRadius * 1000 / dz
                            wrap_x = 500 + PoleRadius
                            wrap_z = 500 + PoleRadius
                            new_wrap_state = $ClockXNegZPos
                        else
                            wrapped_portion = PoleRadius * 1000 / -dz
                            wrap_x = 500 + PoleRadius
                            wrap_z = 500 - PoleRadius
                            new_wrap_state = $CounterXNegZNeg
                        end
                    end
                end
                case $ClockXPosZPos
                    if dz < 0
                        # Unwrap
                        unwrap = True                        
                    else if dx < 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / dz
                        wrap_x = 500 + PoleRadius
                        wrap_z = 500 + PoleRadius
                        new_wrap_state = $ClockXNegZPos
                    end
                end
                case $ClockXNegZPos
                    if dx > 0
                        # Unwrap
                        unwrap = True
                    else if dz < 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / -dx
                        wrap_x = 500 - PoleRadius
                        wrap_z = 500 + PoleRadius
                        new_wrap_state = $ClockXNegZNeg
                    end
                end
                case $ClockXNegZNeg
                    if dz > 0
                        # Unwrap
                        unwrap = True
                    else if dx > 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / -dz
                        wrap_x = 500 - PoleRadius
                        wrap_z = 500 - PoleRadius
                        new_wrap_state = $ClockXPosZNeg
                    end
                end
                case $ClockXPosZNeg
                    if dx < 0
                        # Unwrap
                        unwrap = True
                    else if dz > 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / dx
                        wrap_x = 500 + PoleRadius
                        wrap_z = 500 - PoleRadius
                        new_wrap_state = $ClockXPosZPos
                    end
                end
            end
            
            if new_wrap_state
                @s.bound_length = bound_length

                wrapped_dy = dy * wrapped_portion / 1000
                wrap_y = @s.origin_y + wrapped_dy

                # Compute the stretched length of the unbound tether
                len = sqrt(dx*dx + dy*dy + dz*dz)
            
                # Compute the amount of tether that's bound
                stretched_length = wrapped_portion * len / 1000
                bound_length = wrapped_portion * free_length / 1000
                free_length -= bound_length
                
                if Debug
                    tell @a "Wrapping..."
                    tell @a "new_wrap_state: (new_wrap_state)"
                    tell @a "wrapped_portion: (wrapped_portion)"
                    tell @a "wrap_xyz: (wrap_x), (wrap_y), (wrap_z)"
                    tell @a "stretched_length: (stretched_length)"
                    tell @a "free_length: (free_length)"
                end

                stretched_length += 50
                # Position current segment as bound
                /data modify storage $namespace:global scale set value [0.05f, 0.05f, 0.05f]
                /execute store result storage $namespace:global scale[2] float 0.001 run scoreboard players get Global stretched_length
                /data modify entity @s transformation.scale set from storage $namespace:global scale
                /data modify entity @s start_interpolation set value 0b
                
                @s.interp_dur = 0
                @s.tele_dur = 0
                
                bdx = wrap_x - @s.origin_x
                bdy = wrap_y - @s.origin_y
                bdz = wrap_z - @s.origin_z
                bl = sqrt(bdx*bdx + bdy*bdy + bdz*bdz)
                ix = bdx * 25 / bl
                iy = bdy * 25 / bl
                iz = bdz * 25 / bl
                
                @Position.<pos> = <@s.origin_x-ix, @s.origin_y-iy, @s.origin_z-iz>
                at @Position
                    @Position.<pos> = <wrap_x+ix, wrap_y+iy, wrap_z+iz>
                    facing @Position
                        /tp @s ~ ~ ~ ~ ~
                    end
                end
                
                at @Position
                    as create @RopeSegment
                        segments++
                        @s.id = id
                        @s.segment = segments
                        @s.origin_x = wrap_x
                        @s.origin_y = wrap_y
                        @s.origin_z = wrap_z
                        @s.wrap_state = new_wrap_state
                    end
                end
            end
            
            if unwrap
                segments--
                as @RopeSegment if @s.segment == segments
                    free_length += @s.bound_length
                end
                /kill @s
            end
        end
        
        @s.segments = segments
        @s.free_length = free_length
        
        as @RopeSegment if @s.id == id and @s.segment == segments
            if not new_wrap_state
                dx = world_x - @s.origin_x
                dy = world_y - @s.origin_y
                dz = world_z - @s.origin_z

                len = sqrt(dx*dx + dy*dy + dz*dz)
                
                /data modify storage $namespace:global scale set value [0.05f, 0.05f, 0.05f]
                /execute store result storage $namespace:global scale[2] float 0.001 run scoreboard players get Global len
                /data modify entity @s transformation.scale set from storage $namespace:global scale
                /data modify entity @s start_interpolation set value 0b
                
                @s.tele_dur = 1
                @s.interp_dur = 1
            end
                
            @Position.<pos> = <@s.origin_x, @s.origin_y, @s.origin_z>
            at @Position            
                @Position.<pos> = <world_x, world_y, world_z>
                facing @Position
                    /tp @s ~ ~ ~ ~ ~
                end
            end
        else
            as create @RopeSegment
                @s.segment = 1
                @s.id = id
                @s.origin_x = TetherX
                @s.origin_y = TetherY
                @s.origin_z = TetherZ
                @s.wrap_state = $Unwrapped
            end
            
            @s.segments = 1
        end
    end
end
