dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.20\saves\Physics - One Wall"
desc "Automatically mine the blocks in front of you"
scale 1000

import common
import transforms
import math
import click_detector

define @ChainLink = @Entity[type=block_display,tag=chain]
    create {block_state:{Name:"minecraft:stone",Count:0b}, transformation:[0.2f,0f,0f,-0.1f,0f,0.2f,0f,-0.1f,0f,0f,0.2f,-0.1f,0f,0f,0f,1f],Tags:["chain"]}
end

reset
    for $row in $range(3)
        for $col in $range(3)
            /scoreboard objectives add m_$row$col dummy
        end
    end

    /kill @PhysicsBlock
    /summon minecraft:block_display 6.5 57.5 1.5 {block_state:{Name:"minecraft:grass_block",Count:0b}, interpolation_duration: 1b, Tags:["physics_block"]}
    with
        $(collider) = 1
    create_collider(6500, 57500, 1500, 3000, 400, 300)

    with
        $(collider) = 2
    create_collider(-6500, 67500, 1500, 3000, 400, 300)

    /kill @Position
    create @Position
    
    click_detector_reset()
    as @Player
        create_click()
    end
    
    test_call_macro()
end

define @nearest_player = @Player[sort=nearest,limit=1]
end

clock tick
    as @Player at @s eyes
        /tp @Position ^ ^ ^
        world_eye_x = @Position.x
        world_eye_y = @Position.y
        world_eye_z = @Position.z
        
        /tp @Position ^ ^ ^1
        world_eye_dx = @Position.x - world_eye_x
        world_eye_dy = @Position.y - world_eye_y
        world_eye_dz = @Position.z - world_eye_z
        
        clicked = check_clicked()
    end
    click_detector_tick()
    
    for collider = 1 to 2
        with
            $(collider) = collider
        collider_physics_tick()
    end
end

function collider_physics_tick()
    define name collider = "collider_$(collider)"

    if clicked
        if collider_ray_intersection(world_eye_x, world_eye_y, world_eye_z, world_eye_dx, world_eye_dy, world_eye_dz) with macros
            @Position.<pos> = <collision_x, collision_y, collision_z>
            @Position.<pos> += <collision_nx, collision_ny, collision_nz> / 8

            $PunchPower = 750

            collider_apply_impulse(collision_x, collision_y, collision_z, world_eye_dx * $PunchPower / scale, world_eye_dy * $PunchPower / scale, world_eye_dz * $PunchPower / scale) with macros
            
            at @Position
                /particle minecraft:crit ~ ~ ~ 0 0 0 0 1 force
            end
        end
    end
    
    # Apply Gravity
    $Gravity = 5
    collider.velocity_y -= $Gravity
    
    collider_integrate() with macros
    collider_quaternion_to_transform() with macros
    
    max_penetration = 0
    
    for iter = 1 to 4
        max_col_v = 0
        
        halfsize = collider.size / 2
        
        for px = -halfsize to halfsize by collider.size
            for py = -halfsize to halfsize by collider.size
                for pz = -halfsize to halfsize by collider.size
                    collider_local_to_world(px, py, pz, True) with macros
                    
                    penetration = 56000 - world_y
                    
                    if penetration > 0
                        dx = world_x - collider.x
                        dy = world_y - collider.y
                        dz = world_z - collider.z
                    
                        rot_lin_vel_x = (collider.rotation_y * dz - collider.rotation_z * dy + 500) / scale
                        rot_lin_vel_y = (collider.rotation_z * dx - collider.rotation_x * dz + 500) / scale
                        rot_lin_vel_z = (collider.rotation_x * dy - collider.rotation_y * dx + 500) / scale
                        
                        vel_x = collider.velocity_x + rot_lin_vel_x
                        vel_y = collider.velocity_y + rot_lin_vel_y
                        vel_z = collider.velocity_z + rot_lin_vel_z
                        
                        if -vel_y > max_col_v
                            max_col_v = -vel_y
                            pen_x = world_x
                            pen_y = world_y
                            pen_z = world_z
                            
                            norm_x = 0
                            norm_y = scale
                            norm_z = 0
                        end
                        if penetration > max_penetration
                            max_penetration = penetration
                            max_pen_norm_x = 0
                            max_pen_norm_y = scale
                            max_pen_norm_z = 0
                        end
                    end
                    
                    penetration = world_x - 10000
                    
                    if penetration > 0
                        dx = world_x - collider.x
                        dy = world_y - collider.y
                        dz = world_z - collider.z
                    
                        rot_lin_vel_x = (collider.rotation_y * dz - collider.rotation_z * dy + 500) / scale
                        rot_lin_vel_y = (collider.rotation_z * dx - collider.rotation_x * dz + 500) / scale
                        rot_lin_vel_z = (collider.rotation_x * dy - collider.rotation_y * dx + 500) / scale
                        
                        vel_x = collider.velocity_x + rot_lin_vel_x
                        vel_y = collider.velocity_y + rot_lin_vel_y
                        vel_z = collider.velocity_z + rot_lin_vel_z
                        
                        if vel_x > max_col_v
                            max_col_v = vel_x
                            pen_x = world_x
                            pen_y = world_y
                            pen_z = world_z
                            
                            norm_x = -scale
                            norm_y = 0
                            norm_z = 0
                        end
                        if penetration > max_penetration
                            max_penetration = penetration
                            max_pen_norm_x = -scale
                            max_pen_norm_y = 0
                            max_pen_norm_z = 0
                        end
                    end
                    
                    penetration = world_z - 10000
                    
                    if penetration > 0
                        dx = world_x - collider.x
                        dy = world_y - collider.y
                        dz = world_z - collider.z
                    
                        rot_lin_vel_x = (collider.rotation_y * dz - collider.rotation_z * dy + 500) / scale
                        rot_lin_vel_y = (collider.rotation_z * dx - collider.rotation_x * dz + 500) / scale
                        rot_lin_vel_z = (collider.rotation_x * dy - collider.rotation_y * dx + 500) / scale
                        
                        vel_x = collider.velocity_x + rot_lin_vel_x
                        vel_y = collider.velocity_y + rot_lin_vel_y
                        vel_z = collider.velocity_z + rot_lin_vel_z
                        
                        if vel_z > max_col_v
                            max_col_v = vel_z
                            pen_x = world_x
                            pen_y = world_y
                            pen_z = world_z
                            
                            norm_x = 0
                            norm_y = 0
                            norm_z = -scale
                        end
                        if penetration > max_penetration
                            max_penetration = penetration
                            max_pen_norm_x = 0
                            max_pen_norm_y = 0
                            max_pen_norm_z = -scale
                        end
                    end
                end
            end
        end
        
        if max_col_v > 1
            collision_1.norm_x = norm_x
            collision_1.norm_y = norm_y
            collision_1.norm_z = norm_z

            collision_1.pen_x = pen_x
            collision_1.pen_y = pen_y
            collision_1.pen_z = pen_z
            
            with
                $(collision) = 1
                $(collider1) = collider.id
            handle_collision_1body()
        end
    end
    if max_penetration > 0
        collider.x += max_penetration * max_pen_norm_x / scale
        collider.y += max_penetration * max_pen_norm_y / scale
        collider.z += max_penetration * max_pen_norm_z / scale
    end
    
    collider_set_transform() with macros
end

function get_unused_collision_id()
    # TODO: Iterate through collision ids until an unallocated collision is found
end

# Assumes $(collision) contains the collision id
function store_collision()
    # If the collision id isn't in the global collision list, allocate it
    /$execute if score collision_$(collision) allocated < c1 Constant run function allocate_collision with $namespace:global args
    /$execute store result score c1 dx run scoreboard players get collision_$(collision) c1dx
end

function allocate_collision()
    /$scoreboard players set Global collision $(i)
    /$scoreboard players set collision_$(i) allocated 1
    # Add collision to list
    /execute store result storage $namespace:global contacts[-1] int 1 run scoreboard players get Global collision
    # TODO: Set the variable for the object-feature pair
end

function deallocate_collision()
    /$scoreboard players set collision_$(i) allocated 0
    # TODO: Remove collision from list
    # TODO: Clear the variable for the object-feature pair
end

# Checks if an object-feature collision pair exists
function collision_exists()

end

# Removes the last element of contacts and appends it to contacts_processed
# Returns the collision id, or -1 if there aren't any more collisions
function get_next_collision()
    contact = -1
    /execute store result score Global contact run data get storage $namespace:global contacts[-1]
    if contact >= 0
        /execute store result storage $namespace:global contacts_processed[-1] int 1 run scoreboard players get Global contact
    end
    
    return contact
end

function reset_collision_list()
    /data modify storage $namespace:global contacts set from storage $namespace:global contacts_processed
end
