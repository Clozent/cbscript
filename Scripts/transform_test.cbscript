dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.20\saves\New World"
desc "Automatically mine the blocks in front of you"
scale 1000

import common
import transforms
import math
import click_detector

define @ChainLink = @Entity[type=block_display,tag=chain]
    create {block_state:{Name:"minecraft:stone",Count:0b}, transformation:[0.2f,0f,0f,-0.1f,0f,0.2f,0f,-0.1f,0f,0f,0.2f,-0.1f,0f,0f,0f,1f],Tags:["chain"]}
end

reset
    /kill @PhysicsBlock
    /summon minecraft:block_display 6.5 57.5 1.5 {block_state:{Name:"minecraft:grass_block",Count:0b}, interpolation_duration: 1b, Tags:["physics_block"]}
    
    /kill @Position
    create @Position
    
    as @PhysicsBlock
        @s.initialize_transform()
        @s.set_transform()
        angle = 0
    end
    
    click_detector_reset()
    as @Player
        create_click()
    end
end

define @nearest_player = @Player[sort=nearest,limit=1]
end

clock tick
    as @PhysicsBlock
        as @Player at @s eyes
            /tp @Position ^ ^ ^
            world_eye_x = @Position.x
            world_eye_y = @Position.y
            world_eye_z = @Position.z
            
            /tp @Position ^ ^ ^1
            world_eye_dx = @Position.x - world_eye_x
            world_eye_dy = @Position.y - world_eye_y
            world_eye_dz = @Position.z - world_eye_z
            
            clicked = check_clicked()
        end
        click_detector_tick()

        if clicked
            @s.ray_intersection(world_eye_x, world_eye_y, world_eye_z, world_eye_dx, world_eye_dy, world_eye_dz)
            
            if @s.collision
                @Position.<pos> = <@s.collision_x, @s.collision_y, @s.collision_z>
                @Position.<pos> += <@s.collision_nx, @s.collision_ny, @s.collision_nz> / 8

                $PunchPower = 2000

                @s.apply_impulse(@s.collision_x, @s.collision_y, @s.collision_z, world_eye_dx * $PunchPower / scale, world_eye_dy * $PunchPower / scale, world_eye_dz * $PunchPower / scale)
                
                at @Position
                    /particle minecraft:crit ~ ~ ~ 0 0 0 0 1 force
                end
            else
                #@s.glowing = 0
                
                #@s.clear_rotation()
            end
        end
        
        max_penetration = 0
        
        for dx = -500 to 500 by 1000
            for dy = -500 to 500 by 1000
                for dz = -500 to 500 by 1000
                    @s.local_to_world(dx, dy, dz, True)
                    
                    penetration = 56000 - world_y
                    
                    if penetration > max_penetration
                        max_penetration = penetration
                        pen_x = world_x
                        pen_y = world_y
                        pen_z = world_z
                    end
                end
            end
        end
        
        if max_penetration > 0
            dx = pen_x - @s.x
            dy = pen_y - @s.y
            dz = pen_z - @s.z
            
        
            rot_lin_vel_x = (@s.rotation_y * dz - @s.rotation_z * dy) / scale
            rot_lin_vel_y = (@s.rotation_z * dx - @s.rotation_x * dz) / scale
            rot_lin_vel_z = (@s.rotation_x * dy - @s.rotation_y * dx) / scale
            
            vel_x = @s.velocity_x + rot_lin_vel_x
            vel_y = @s.velocity_y + rot_lin_vel_y
            vel_z = @s.velocity_z + rot_lin_vel_z
            
            hor_mag = sqrt(vel_x*vel_x + vel_z*vel_z)
            dir_x = vel_x * scale / hor_mag
            dir_z = vel_z * scale / hor_mag
            
            $Friction = 100
            
            if hor_mag > 50
                fx = -dir_x * scale / $InverseMass * $Friction / scale
                fz = -dir_z * scale / $InverseMass * $Friction / scale
            else
                fx = 0
                fz = 0
                @s.velocity_x = 0
                @s.velocity_z = 0
            end
            
            fy = -vel_y * scale / $InverseMass
            
            @s.apply_impulse(pen_x, pen_y, pen_z, fx, fy, fz)
            @s.y += max_penetration

            # Gravity
            @s.velocity_y -= 40
        end
    
        @s.velocity_y -= 40
        
        @s.integrate()
        
        @s.quaternion_to_transform()
        @s.scale_transform()
        
        @s.center_transform()

        @s.set_transform()
    end
end
