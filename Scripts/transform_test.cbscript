dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.20\saves\Physics - One Wall"
desc "Automatically mine the blocks in front of you"
scale 1000

import common
import transforms
import math
import click_detector

define @ChainLink = @Entity[type=block_display,tag=chain]
    create {block_state:{Name:"minecraft:stone",Count:0b}, transformation:[0.2f,0f,0f,-0.1f,0f,0.2f,0f,-0.1f,0f,0f,0.2f,-0.1f,0f,0f,0f,1f],Tags:["chain"]}
end

define @nearest_player = @Player[sort=nearest,limit=1]
end


$Precision = 1000
$Half = 500
reset
    /scoreboard objectives add absorbed minecraft.custom:minecraft.damage_dealt_absorbed

    initialize_transforms()

    at @nearest_player
        /kill @Position
        create @Position ~ ~ ~
    end
    
    destroy_colliders()
    delete_collisions()

    CubeSize = 1500
    CubeInvMass = 800
    CubeInvRotInt = 400
    
    #id = get_unused_collider_id()

    #with
    #    $(collider) = id
    #    $(block_name) = "command_block"
    #create_collider(DebugX, DebugY, DebugZ, CubeSize, CubeInvMass, CubeInvRotInt)
    
    #unless id <= max_collider
    #    max_collider = id
    #end

    
    click_detector_reset()
    as @Player
        create_click()
    end
end

clock tick
    define name collider = "collider_$(collider)"

    # Get click data
    as @Player at @s eyes
        /tp @Position ^ ^ ^
        world_eye_x = @Position.x
        world_eye_y = @Position.y
        world_eye_z = @Position.z
        
        /tp @Position ^ ^ ^1
        world_eye_dx = @Position.x - world_eye_x
        world_eye_dy = @Position.y - world_eye_y
        world_eye_dz = @Position.z - world_eye_z
        
        clicked = check_clicked()
        
        if @s.absorbed
            @s.absorbed = 0
        else
            clicked = False
        end
    end
    click_detector_tick()

    if clicked
        min_col_t = 1000000000

        # Find the nearest collider in the direction of the cursor ray
        for collider = 1 to max_collider
            with
                $(collider) = collider
            do
                if collider_ray_intersection(world_eye_x, world_eye_y, world_eye_z, world_eye_dx, world_eye_dy, world_eye_dz) with macros
                    if t < min_col_t
                        min_col_t = t
                        min_x = collision_x
                        min_y = collision_y
                        min_z = collision_z
                        min_col = collider
                    end
                end
            end
        end
        
        if min_col_t < 1000000000
            # There was a ray intersection
            $PunchPower = 1000
            with
                $(collider) = min_col
            collider_apply_impulse(min_x, min_y, min_z, world_eye_dx * $PunchPower / scale, world_eye_dy * $PunchPower / scale, world_eye_dz * $PunchPower / scale)
            
            save_state()
            
            @Position.<pos> = <min_x, min_y, min_z>
            at @Position
                /particle minecraft:crit ~ ~ ~ 0 0 0 0 1 force
            end
        else
            #if max_collider >= 1
            #    load_state()
            #else
                # No ray intersection, create a new collider
                add_collider()
            #end
        end
    end
    
    # Apply gravity, integrate linear/angular velocity
    for collider = 1 to max_collider
        with
            $(collider) = collider
        do
            if not collider.sleeping
                collider_physics_tick() with macros
            end
        end
    end
    
    # Update the penetration and normal for active collisions
    update_active_collisions()

    # Get collisions between colliders and the world
    for collider = 1 to max_collider
        with
            $(collider) = collider
        do
            if not collider.sleeping
                get_point_world_collisions() with macros
                get_edge_world_collisions() with macros
            end
        end
    end
    
    # Get collisions between each pair of colliders
    for col1 = 1 to max_collider
        for col2 = col1+1 to max_collider
            with
                $(collider1) = col1
                $(collider2) = col2
            get_collider_collider_collisions()
        end
    end
    
    # Remove all new collisions, except for new collisions that have
    # the deepest penetration for a collider
    cull_collisions()

    # Resolve collisions
    resolve_collision_velocity()
    resolve_collision_penetration()

    # Final collider update to render and check for sleeping
    for collider = 1 to max_collider
        with
            $(collider) = collider
        do
            if not collider.sleeping
                collider_set_transform() with macros
                collider_check_sleep() with macros
            end
        end
    end
end


function destroy_colliders()
    for collider = max_collider to 1 by -1
        with
            $(collider) = collider
        destroy_collider()
    end
    
    /kill @PhysicsBlock
    
    max_collider = 0
end

function destroy_collider()
    define name collider = "collider_$(collider)"
    
    /say destroying $(collider)
    
    if max_collider == collider.id
        max_collider--
    end
    
    as @PhysicsBlock
        if @s.id == collider.id
            /kill @s
        end
    end
    
    /scoreboard players reset collider_$(collider)
    
    for vertex = 0 to 7
        with
            $(vertex) = vertex
        do
            /scoreboard players reset collider_$(collider)_v$(vertex)
        end
    end
end

function add_collider()
    at @nearest_player ^ ^1.6 ^3
        /tp @Position ~ ~ ~
        x = @Position.x
        y = @Position.y
        z = @Position.z
    end
    
    tell @a "Creating collider at (x), (y), (z)"
    
    id = get_unused_collider_id()

    with
        $(collider) = id
        $(block_name) = "command_block"
    create_collider(x, y, z, CubeSize, CubeInvMass, CubeInvRotInt)
    
    unless id <= max_collider
        max_collider = id
    end
end

function get_unused_collider_id()
    for collider = 1 to max_collider+1
        with
            $(collider) = collider
        do
            define name collider = "collider_$(collider)"
            unless collider.inv_mass
                return_id = collider
                collider = 1000000000
            end
        end
    end
    
    return return_id
end

function test_update_collision()
    for collision = 1 to max_collision
        with
            $(collision) = collision
        do
            define name collision = "collision_$(collision)"
            
            old_id = collision.id
            old_type = collision.type
            old_pen = collision.pen
            old_x = collision.x
            old_y = collision.y
            old_z = collision.z
            old_nx = collision.nx
            old_ny = collision.ny
            old_nz = collision.nz
            update_collision() with macros
            
            same = True
            unless old_pen == collision.pen
                same = False
            end
            unless old_x == collision.x
                same = False
            end
            unless old_y == collision.y
                same = False
            end
            unless old_z == collision.z
                same = False
            end
            unless old_nx == collision.nx
                same = False
            end
            unless old_ny == collision.ny
                same = False
            end
            unless old_nz == collision.nz
                same = False
            end
            
            unless same
                tell @a "Collision #(old_id) changed"
                if old_type == $CollisionCubePointWorldFace
                    tell @a "Cube Point - World Face"
                end
                if old_type == $CollisionCubeFaceWorldPoint
                    tell @a "Cube Face - World Point"
                end
                if old_type == $CollisionCubeEdgeWorldEdge
                    tell @a "Cube Edge - World Edge"
                end
                if old_type == $CollisionCubeFaceCubePoint
                    tell @a "Cube Face - Cube Point"
                end
                if old_type == $CollisionCubeEdgeCubeEdge
                    tell @a "Cube Edge - Cube Edge"
                end

                tell @a "(old_pen) pos (old_x), (old_y), (old_z) norm (old_nx), (old_ny), (old_nz)"
                tell @a "(collision.pen) pos (collision.x), (collision.y), (collision.z) norm (collision.nx), (collision.ny), (collision.nz)"
            end
        end
    end
end

function clear_save_state()
    for collider_iter = 1 to save_state.max_collider
        with
            $(collider) = collider_iter
        do
            /scoreboard players reset save_state_collider_$(collider)
        end
    end
    
    for collision_iter = 1 to save_state.max_collision
        with
            $(collision) = collision_iter
        do
            /scoreboard players reset save_state_collision_$(collision)
        end
    end
    
    /scoreboard players reset save_state
end

function save_state()
    clear_save_state()

    save_state.max_collider = max_collider
    
    for collider_iter = 1 to max_collider
        with
            $(collider) = collider_iter
        do
            define name collider = "collider_$(collider)"
            define name save_state = "save_state_collider_$(collider)"
            
            if collider.id
                save_state.id = collider.id
            
                save_state.x = collider.x
                save_state.y = collider.y
                save_state.z = collider.z
                
                save_state.velocity_x = collider.velocity_x
                save_state.velocity_y = collider.velocity_y
                save_state.velocity_z = collider.velocity_z
                
                save_state.rotation_x = collider.rotation_x
                save_state.rotation_y = collider.rotation_y
                save_state.rotation_z = collider.rotation_z
                
                save_state.size = collider.size
                
                save_state.inv_mass = collider.inv_mass
                save_state.inv_rot_int = collider.inv_rot_int
                
                save_state.w = collider.w
                save_state.i = collider.i
                save_state.j = collider.j
                save_state.k = collider.k
                
                save_state.recent_motion = collider.recent_motion
                save_state.recent_rotation = collider.recent_rotation
                save_state.sleeping = collider.sleeping
            end
        end
    end
    
    save_state.max_collision = max_collision

    for collision_iter = 1 to max_collision
        with
            $(collision) = collision_iter
        do
            define name collision = "collision_$(collision)"
            define name save_state = "save_state_collision_$(collision)"

            if collision.active
                save_state.id = collision.id
                save_state.active = collision.active
                save_state.pen = collision.pen
                
                save_state.x = collision.x
                save_state.y = collision.y
                save_state.z = collision.z
                
                save_state.nx = collision.nx
                save_state.ny = collision.ny
                save_state.nz = collision.nz
                
                save_state.type = collision.type
                save_state.collider1 = collision.collider1
                save_state.collider2 = collision.collider2
                save_state.vertex = collision.vertex
                save_state.vertex1 = collision.vertex1
                save_state.vertex2 = collision.vertex2
                save_state.nvert1 = collision.nvert1
                save_state.nvert2 = collision.nvert2
                save_state.block_x = collision.block_x
                save_state.block_y = collision.block_y
                save_state.block_z = collision.block_z
                save_state.lnx = collision.lnx
                save_state.lny = collision.lny
                save_state.lnz = collision.lnz
                save_state.ox = collision.ox
                save_state.oy = collision.oy
                save_state.oz = collision.oz
                save_state.ex = collision.ex
                save_state.ey = collision.ey
                save_state.ez = collision.ez
            end
        end
    end
end

function load_state()
    destroy_colliders()
    delete_collisions()

    collision_frame = 0

    max_collider = save_state.max_collider
    
    for collider_iter = 1 to save_state.max_collider
        with
            $(collider) = collider_iter
        do
            define name collider = "collider_$(collider)"
            define name save_state = "save_state_collider_$(collider)"
            
            if save_state.id
                create_collider(save_state.x, save_state.y, save_state.z, save_state.size, save_state.inv_mass, save_state.inv_rot_int) with macros
            
                collider.velocity_x = save_state.velocity_x
                collider.velocity_y = save_state.velocity_y
                collider.velocity_z = save_state.velocity_z
                
                collider.rotation_x = save_state.rotation_x
                collider.rotation_y = save_state.rotation_y
                collider.rotation_z = save_state.rotation_z
                
                collider.w = save_state.w
                collider.i = save_state.i
                collider.j = save_state.j
                collider.k = save_state.k
                
                collider_quaternion_to_transform() with macros
                
                collider.recent_motion = save_state.recent_motion
                collider.recent_rotation = save_state.recent_rotation
                collider.sleeping = save_state.sleeping
            end
        end
    end
    
    max_collision = save_state.max_collision

    for collision_iter = 1 to save_state.max_collision
        with
            $(collision) = collision_iter
        do
            define name collision = "collision_$(collision)"
            define name save_state = "save_state_collision_$(collision)"

            if save_state.active
                collision.id = save_state.id
                collision.active = save_state.active
                collision.pen = save_state.pen
                
                collision.x = save_state.x
                collision.y = save_state.y
                collision.z = save_state.z
                
                collision.nx = save_state.nx
                collision.ny = save_state.ny
                collision.nz = save_state.nz
                
                collision.type = save_state.type
                collision.collider1 = save_state.collider1
                collision.collider2 = save_state.collider2
                collision.vertex = save_state.vertex
                collision.vertex1 = save_state.vertex1
                collision.vertex2 = save_state.vertex2
                collision.nvert1 = save_state.nvert1
                collision.nvert2 = save_state.nvert2
                collision.block_x = save_state.block_x
                collision.block_y = save_state.block_y
                collision.block_z = save_state.block_z
                collision.lnx = save_state.lnx
                collision.lny = save_state.lny
                collision.lnz = save_state.lnz
                collision.ox = save_state.ox
                collision.oy = save_state.oy
                collision.oz = save_state.oz
                collision.ex = save_state.ex
                collision.ey = save_state.ey
                collision.ez = save_state.ez
            end
        end
    end
end