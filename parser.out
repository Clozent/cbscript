Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> parsed
Rule 1     parsed -> program
Rule 2     parsed -> expr
Rule 3     program -> optcomments dir PYTHON newlines optdesc optscale optassignments sections
Rule 4     optdesc -> desc PYTHON newlines
Rule 5     optdesc -> empty
Rule 6     optscale -> scale PYTHON newlines
Rule 7     optscale -> empty
Rule 8     sections -> section_commented newlines sections
Rule 9     sections -> empty
Rule 10    section_commented -> optcomments section
Rule 11    optcomments -> COMMENT optnewlines optcomments
Rule 12    optcomments -> empty
Rule 13    section -> clocksection
Rule 14    section -> functionsection
Rule 15    section -> resetsection
Rule 16    section -> macrosection
Rule 17    section -> template_function_section
Rule 18    resetsection -> reset newlines blocklist end
Rule 19    clocksection -> clock ID newlines blocklist end
Rule 20    functionsection -> function ID LPAREN id_list RPAREN newlines blocklist end
Rule 21    template_function_section -> function ID LT macro_params GT LPAREN id_list RPAREN newlines blocklist end
Rule 22    macrosection -> macro DOLLAR ID macro_args newlines blocklist end
Rule 23    macro_args -> LPAREN macro_params RPAREN
Rule 24    macro_args -> empty
Rule 25    macro_params -> DOLLAR ID COMMA macro_params
Rule 26    macro_params -> DOLLAR ID
Rule 27    macro_params -> empty
Rule 28    newlines -> NEWLINE newlines
Rule 29    newlines -> NEWLINE
Rule 30    optnewlines -> newlines
Rule 31    optnewlines -> empty
Rule 32    id_list -> ID COMMA id_list
Rule 33    id_list -> ID
Rule 34    id_list -> empty
Rule 35    optassignments -> pythonassignment newlines optassignments
Rule 36    optassignments -> selectorassignment newlines optassignments
Rule 37    optassignments -> selector_define_block newlines optassignments
Rule 38    optassignments -> blocktag newlines optassignments
Rule 39    optassignments -> array_definition newlines optassignments
Rule 40    optassignments -> COMMENT newlines optassignments
Rule 41    optassignments -> empty
Rule 42    variable -> fullselector DOT ID
Rule 43    variable -> ID
Rule 44    variable -> ID LBRACK virtualinteger RBRACK
Rule 45    variable -> ID LBRACK expr RBRACK
Rule 46    optcomment -> COMMENT
Rule 47    optcomment -> empty
Rule 48    blocklist -> codeblock optcomment newlines blocklist
Rule 49    blocklist -> empty
Rule 50    codeblock -> comment_block
Rule 51    codeblock -> command_block
Rule 52    codeblock -> move_block
Rule 53    codeblock -> create_block
Rule 54    codeblock -> for_block
Rule 55    codeblock -> if_block
Rule 56    codeblock -> trigger_block
Rule 57    codeblock -> execute_block
Rule 58    codeblock -> while_block
Rule 59    codeblock -> switch_block
Rule 60    codeblock -> tell_block
Rule 61    codeblock -> function_call_block
Rule 62    codeblock -> template_function_call
Rule 63    codeblock -> method_call_block
Rule 64    codeblock -> macro_call_block
Rule 65    codeblock -> pythonassignment_block
Rule 66    codeblock -> assignment_block
Rule 67    codeblock -> selectorassignment_block
Rule 68    codeblock -> vector_assignment_block
Rule 69    codeblock -> vector_assignment_scalar_block
Rule 70    comment_block -> COMMENT
Rule 71    command_block -> COMMAND
Rule 72    move_block -> move fullselector relcoords
Rule 73    for_block -> for DOLLAR ID in PYTHON newlines blocklist end
Rule 74    trigger_block -> trigger fullselector DOT ID newlines blocklist end
Rule 75    codeblock -> as variable newlines blocklist end
Rule 76    codeblock -> as variable LPAREN ATID RPAREN newlines blocklist end
Rule 77    codeblock -> as variable do codeblock
Rule 78    codeblock -> as variable LPAREN ATID RPAREN do codeblock
Rule 79    codeblock -> as create_block newlines blocklist end
Rule 80    codeblock -> as create_block do codeblock
Rule 81    execute_block -> execute_items newlines blocklist end
Rule 82    execute_block -> execute_items do codeblock
Rule 83    execute_block -> execute_items then codeblock
Rule 84    execute_items -> execute_item
Rule 85    execute_items -> execute_item execute_items
Rule 86    execute_item -> if conditions
Rule 87    execute_item -> unless conditions
Rule 88    execute_item -> as fullselector
Rule 89    execute_item -> rotated fullselector
Rule 90    execute_item -> facing relcoords
Rule 91    execute_item -> facing fullselector
Rule 92    execute_item -> align ID
Rule 93    execute_item -> at fullselector
Rule 94    execute_item -> at relcoords
Rule 95    execute_item -> at fullselector relcoords
Rule 96    execute_item -> at vector_expr
Rule 97    execute_item -> at LPAREN virtualnumber RPAREN vector_expr
Rule 98    execute_item -> in overworld
Rule 99    execute_item -> in the_end
Rule 100   execute_item -> in the_nether
Rule 101   codeblock -> for ATID in fullselector newlines blocklist end
Rule 102   conditions -> condition
Rule 103   conditions -> condition and conditions
Rule 104   condition -> variable EQUALEQUAL fullselector
Rule 105   condition -> fullselector EQUALEQUAL variable
Rule 106   condition -> fullselector
Rule 107   condition -> variable LT comparison
Rule 108   condition -> variable LEQ comparison
Rule 109   condition -> variable EQUALEQUAL comparison
Rule 110   condition -> variable GT comparison
Rule 111   condition -> variable GEQ comparison
Rule 112   condition -> vector_var EQUALEQUAL vector_var
Rule 113   condition -> variable
Rule 114   condition -> not variable
Rule 115   condition -> block relcoords ID
Rule 116   comparison -> virtualinteger
Rule 117   comparison -> variable
Rule 118   if_block -> if PYTHON newlines blocklist end
Rule 119   if_block -> if PYTHON newlines blocklist else newlines blocklist end
Rule 120   while_block -> while conditions newlines blocklist end
Rule 121   while_block -> while conditions execute_items newlines blocklist end
Rule 122   for_block -> for ID EQUALS expr to expr by expr newlines blocklist end
Rule 123   for_block -> for ID EQUALS expr to expr newlines blocklist end
Rule 124   switch_block -> switch expr newlines cases end
Rule 125   cases -> switch_case newlines
Rule 126   cases -> switch_case newlines cases
Rule 127   switch_case -> case virtualinteger newlines blocklist end
Rule 128   switch_case -> case virtualinteger to virtualinteger newlines blocklist end
Rule 129   switch_case -> case DOLLAR ID in PYTHON newlines blocklist end
Rule 130   tell_block -> tell fullselector PYTHON
Rule 131   codeblock -> title fullselector PYTHON
Rule 132   codeblock -> subtitle fullselector PYTHON
Rule 133   codeblock -> actionbar fullselector PYTHON
Rule 134   codeblock -> title fullselector virtualinteger virtualinteger virtualinteger PYTHON
Rule 135   codeblock -> subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
Rule 136   codeblock -> actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
Rule 137   function_call_block -> function_call
Rule 138   method_call_block -> method_call
Rule 139   macro_call_block -> macro_call
Rule 140   pythonassignment_block -> pythonassignment
Rule 141   assignment_block -> assignment
Rule 142   vector_assignment_block -> vector_assignment
Rule 143   vector_assignment_scalar_block -> vector_assignment_scalar
Rule 144   selectorassignment_block -> selectorassignment
Rule 145   number -> INTEGER
Rule 146   number -> HEX
Rule 147   number -> BINARY
Rule 148   number -> MINUS INTEGER
Rule 149   number -> MINUS HEX
Rule 150   number -> MINUS BINARY
Rule 151   number -> FLOAT
Rule 152   number -> MINUS FLOAT
Rule 153   virtualnumber -> number
Rule 154   virtualnumber -> DOLLAR ID
Rule 155   virtualinteger -> INTEGER
Rule 156   virtualinteger -> HEX
Rule 157   virtualinteger -> BINARY
Rule 158   virtualinteger -> MINUS INTEGER
Rule 159   virtualinteger -> MINUS HEX
Rule 160   virtualinteger -> MINUS BINARY
Rule 161   virtualinteger -> DOLLAR ID
Rule 162   blocktag -> define block ID newlines block_list end
Rule 163   block_list -> ID newlines block_list
Rule 164   block_list -> ID newlines
Rule 165   selectorassignment -> ATID EQUALS fullselector
Rule 166   selector_define_block -> define ATID EQUALS fullselector newlines selector_definition end
Rule 167   selector_definition -> empty
Rule 168   selector_definition -> selector_item newlines selector_definition
Rule 169   selector_item -> create PYTHON
Rule 170   selector_item -> ID EQUALS data_path data_type virtualnumber
Rule 171   selector_item -> ID EQUALS data_path data_type
Rule 172   selector_item -> LT ID GT EQUALS data_path data_type virtualnumber
Rule 173   selector_item -> LT ID GT EQUALS data_path data_type
Rule 174   selector_item -> functionsection
Rule 175   data_path -> ID
Rule 176   data_path -> ID LBRACK virtualinteger RBRACK
Rule 177   data_path -> data_path DOT data_path
Rule 178   data_type -> byte
Rule 179   data_type -> double
Rule 180   data_type -> float
Rule 181   data_type -> int
Rule 182   data_type -> long
Rule 183   data_type -> short
Rule 184   array_definition -> array ID LBRACK virtualinteger RBRACK
Rule 185   array_definition -> array ID LBRACK virtualinteger to virtualinteger RBRACK
Rule 186   create_block -> create ATID relcoords
Rule 187   create_block -> create ATID
Rule 188   pythonassignment -> DOLLAR ID PYTHON
Rule 189   qualifiers -> qualifiers COMMA qualifier
Rule 190   qualifiers -> qualifiers and qualifier
Rule 191   qualifiers -> qualifier
Rule 192   qualifiers -> empty
Rule 193   qualifier -> virtualinteger
Rule 194   qualifier -> ID EQUALS virtualinteger
Rule 195   qualifier -> ID EQUALS ID
Rule 196   qualifier -> ID EQUALEQUAL virtualinteger
Rule 197   qualifier -> ID GEQ virtualinteger
Rule 198   qualifier -> ID LEQ virtualinteger
Rule 199   qualifier -> ID GT virtualinteger
Rule 200   qualifier -> ID LT virtualinteger
Rule 201   qualifier -> ID EQUALS virtualinteger DOT DOT virtualinteger
Rule 202   qualifier -> ID EQUALS DOT DOT virtualinteger
Rule 203   qualifier -> ID EQUALS virtualinteger DOT DOT
Rule 204   qualifier -> ID EQUALS
Rule 205   qualifier -> ID EQUALS NOT ID
Rule 206   qualifier -> ID
Rule 207   qualifier -> not ID
Rule 208   fullselector -> ATID
Rule 209   fullselector -> ATID LBRACK qualifiers RBRACK
Rule 210   relcoord -> virtualnumber
Rule 211   relcoord -> TILDE virtualnumber
Rule 212   relcoord -> TILDEEMPTY
Rule 213   relcoord -> TILDE
Rule 214   localcoord -> POWER virtualnumber
Rule 215   localcoord -> POWEREMPTY
Rule 216   localcoord -> POWER
Rule 217   relcoords -> virtualnumber virtualnumber virtualnumber
Rule 218   relcoords -> relcoord relcoord relcoord
Rule 219   relcoords -> localcoord localcoord localcoord
Rule 220   assignment -> return expr
Rule 221   assignment -> variable EQUALS expr
Rule 222   assignment -> variable PLUSEQUALS expr
Rule 223   assignment -> variable MINUSEQUALS expr
Rule 224   assignment -> variable TIMESEQUALS expr
Rule 225   assignment -> variable DIVIDEEQUALS expr
Rule 226   assignment -> variable MODEQUALS expr
Rule 227   assignment -> variable PLUSPLUS
Rule 228   assignment -> variable MINUSMINUS
Rule 229   assignment -> variable EQUALS fullselector
Rule 230   assignment -> variable EQUALS create_block
Rule 231   vector_assignment -> vector_var EQUALS vector_expr
Rule 232   vector_assignment -> vector_var PLUSEQUALS vector_expr
Rule 233   vector_assignment -> vector_var MINUSEQUALS vector_expr
Rule 234   vector_assignment_scalar -> vector_var EQUALS expr
Rule 235   vector_assignment_scalar -> vector_var PLUSEQUALS expr
Rule 236   vector_assignment_scalar -> vector_var MINUSEQUALS expr
Rule 237   vector_assignment_scalar -> vector_var TIMESEQUALS expr
Rule 238   vector_assignment_scalar -> vector_var DIVIDEEQUALS expr
Rule 239   vector_assignment_scalar -> vector_var MODEQUALS expr
Rule 240   vector_var -> LT ID GT
Rule 241   vector_var -> fullselector DOT LT ID GT
Rule 242   vector_var -> LT variable COMMA variable COMMA variable GT
Rule 243   expr -> expr PLUS expr
Rule 244   expr -> expr MINUS expr
Rule 245   expr -> expr TIMES expr
Rule 246   expr -> expr DIVIDE expr
Rule 247   expr -> expr MOD expr
Rule 248   expr -> expr POWER INTEGER
Rule 249   expr -> expr POWER HEX
Rule 250   expr -> expr POWER BINARY
Rule 251   expr -> vector_expr TIMES vector_expr
Rule 252   expr -> virtualinteger
Rule 253   expr -> scale
Rule 254   expr -> ID
Rule 255   expr -> ID LBRACK virtualinteger RBRACK
Rule 256   expr -> ID LBRACK expr RBRACK
Rule 257   expr -> fullselector DOT ID
Rule 258   expr -> function_call
Rule 259   expr -> LPAREN expr RPAREN
Rule 260   expr -> MINUS expr
Rule 261   vector_expr -> LPAREN vector_expr RPAREN
Rule 262   vector_expr -> LT expr COMMA expr COMMA expr GT
Rule 263   vector_expr -> LT ID GT
Rule 264   vector_expr -> fullselector DOT LT ID GT
Rule 265   vector_expr -> vector_expr PLUS vector_expr
Rule 266   vector_expr -> vector_expr MINUS vector_expr
Rule 267   vector_expr -> vector_expr PLUS expr
Rule 268   vector_expr -> vector_expr MINUS expr
Rule 269   vector_expr -> vector_expr TIMES expr
Rule 270   vector_expr -> vector_expr DIVIDE expr
Rule 271   vector_expr -> vector_expr MOD expr
Rule 272   vector_expr -> expr PLUS vector_expr
Rule 273   vector_expr -> expr TIMES vector_expr
Rule 274   vector_expr -> MINUS vector_expr
Rule 275   vector_expr -> here
Rule 276   vector_expr -> here LPAREN virtualnumber RPAREN
Rule 277   function_call -> ID LPAREN exprlist RPAREN
Rule 278   method_call -> fullselector DOT ID LPAREN exprlist RPAREN
Rule 279   exprlist -> exprlist COMMA expr
Rule 280   exprlist -> expr
Rule 281   exprlist -> empty
Rule 282   template_function_call -> ID LT macro_call_params GT LPAREN exprlist RPAREN
Rule 283   macro_call -> DOLLAR ID macro_call_args
Rule 284   macro_call_args -> LPAREN macro_call_params RPAREN
Rule 285   macro_call_args -> empty
Rule 286   macro_call_params -> macro_call_param COMMA macro_call_params
Rule 287   macro_call_params -> macro_call_param
Rule 288   macro_call_params -> empty
Rule 289   macro_call_param -> virtualnumber
Rule 290   empty -> <empty>

Terminals, with rules where they appear

ATID                 : 76 78 101 165 166 186 187 208 209
BINARY               : 147 150 157 160 250
COMMA                : 25 32 189 242 242 262 262 279 286
COMMAND              : 71
COMMENT              : 11 40 46 70
DIVIDE               : 246 270
DIVIDEEQUALS         : 225 238
DOLLAR               : 22 25 26 73 129 154 161 188 283
DOT                  : 42 74 177 201 201 202 202 203 203 241 257 264 278
EQUALEQUAL           : 104 105 109 112 196
EQUALS               : 122 123 165 166 170 171 172 173 194 195 201 202 203 204 205 221 229 230 231 234
FLOAT                : 151 152
GEQ                  : 111 197
GT                   : 21 110 172 173 199 240 241 242 262 263 264 282
HEX                  : 146 149 156 159 249
ID                   : 19 20 21 22 25 26 32 33 42 43 44 45 73 74 92 115 122 123 129 154 161 162 163 164 170 171 172 173 175 176 184 185 188 194 195 195 196 197 198 199 200 201 202 203 204 205 205 206 207 240 241 254 255 256 257 263 264 277 278 282 283
INTEGER              : 145 148 155 158 248
LBRACK               : 44 45 176 184 185 209 255 256
LEQ                  : 108 198
LPAREN               : 20 21 23 76 78 97 259 261 276 277 278 282 284
LT                   : 21 107 172 173 200 240 241 242 262 263 264 282
MINUS                : 148 149 150 152 158 159 160 244 260 266 268 274
MINUSEQUALS          : 223 233 236
MINUSMINUS           : 228
MOD                  : 247 271
MODEQUALS            : 226 239
NEWLINE              : 28 29
NOT                  : 205
PLUS                 : 243 265 267 272
PLUSEQUALS           : 222 232 235
PLUSPLUS             : 227
POWER                : 214 216 248 249 250
POWEREMPTY           : 215
PYTHON               : 3 4 6 73 118 119 129 130 131 132 133 134 135 136 169 188
RBRACK               : 44 45 176 184 185 209 255 256
RPAREN               : 20 21 23 76 78 97 259 261 276 277 278 282 284
TILDE                : 211 213
TILDEEMPTY           : 212
TIMES                : 245 251 269 273
TIMESEQUALS          : 224 237
actionbar            : 133 136
align                : 92
and                  : 103 190
array                : 184 185
as                   : 75 76 77 78 79 80 88
at                   : 93 94 95 96 97
block                : 115 162
by                   : 122
byte                 : 178
case                 : 127 128 129
clock                : 19
create               : 169 186 187
define               : 162 166
desc                 : 4
dir                  : 3
do                   : 77 78 80 82
double               : 179
else                 : 119
end                  : 18 19 20 21 22 73 74 75 76 79 81 101 118 119 120 121 122 123 124 127 128 129 162 166
error                : 
facing               : 90 91
float                : 180
for                  : 73 101 122 123
function             : 20 21
here                 : 275 276
if                   : 86 118 119
in                   : 73 98 99 100 101 129
int                  : 181
long                 : 182
macro                : 22
move                 : 72
not                  : 114 207
overworld            : 98
reset                : 18
return               : 220
rotated              : 89
scale                : 6 253
short                : 183
subtitle             : 132 135
switch               : 124
tell                 : 130
the_end              : 99
the_nether           : 100
then                 : 83
title                : 131 134
to                   : 122 123 128 185
trigger              : 74
unless               : 87
while                : 120 121

Nonterminals, with rules where they appear

array_definition     : 39
assignment           : 141
assignment_block     : 66
block_list           : 162 163
blocklist            : 18 19 20 21 22 48 73 74 75 76 79 81 101 118 119 119 120 121 122 123 127 128 129
blocktag             : 38
cases                : 124 126
clocksection         : 13
codeblock            : 48 77 78 80 82 83
command_block        : 51
comment_block        : 50
comparison           : 107 108 109 110 111
condition            : 102 103
conditions           : 86 87 103 120 121
create_block         : 53 79 80 230
data_path            : 170 171 172 173 177 177
data_type            : 170 171 172 173
empty                : 5 7 9 12 24 27 31 34 41 47 49 167 192 281 285 288
execute_block        : 57
execute_item         : 84 85
execute_items        : 81 82 83 85 121
expr                 : 2 45 122 122 122 123 123 124 220 221 222 223 224 225 226 234 235 236 237 238 239 243 243 244 244 245 245 246 246 247 247 248 249 250 256 259 260 262 262 262 267 268 269 270 271 272 273 279 280
exprlist             : 277 278 279 282
for_block            : 54
fullselector         : 42 72 74 88 89 91 93 95 101 104 105 106 130 131 132 133 134 135 136 165 166 229 241 257 264 278
function_call        : 137 258
function_call_block  : 61
functionsection      : 14 174
id_list              : 20 21 32
if_block             : 55
localcoord           : 219 219 219
macro_args           : 22
macro_call           : 139
macro_call_args      : 283
macro_call_block     : 64
macro_call_param     : 286 287
macro_call_params    : 282 284 286
macro_params         : 21 23 25
macrosection         : 16
method_call          : 138
method_call_block    : 63
move_block           : 52
newlines             : 3 4 6 8 18 19 20 21 22 28 30 35 36 37 38 39 40 48 73 74 75 76 79 81 101 118 119 119 120 121 122 123 124 125 126 127 128 129 162 163 164 166 168
number               : 153
optassignments       : 3 35 36 37 38 39 40
optcomment           : 48
optcomments          : 3 10 11
optdesc              : 3
optnewlines          : 11
optscale             : 3
parsed               : 0
program              : 1
pythonassignment     : 35 140
pythonassignment_block : 65
qualifier            : 189 190 191
qualifiers           : 189 190 209
relcoord             : 218 218 218
relcoords            : 72 90 94 95 115 186
resetsection         : 15
section              : 10
section_commented    : 8
sections             : 3 8
selector_define_block : 37
selector_definition  : 166 168
selector_item        : 168
selectorassignment   : 36 144
selectorassignment_block : 67
switch_block         : 59
switch_case          : 125 126
tell_block           : 60
template_function_call : 62
template_function_section : 17
trigger_block        : 56
variable             : 75 76 77 78 104 105 107 108 109 110 111 113 114 117 221 222 223 224 225 226 227 228 229 230 242 242 242
vector_assignment    : 142
vector_assignment_block : 68
vector_assignment_scalar : 143
vector_assignment_scalar_block : 69
vector_expr          : 96 97 231 232 233 251 251 261 265 265 266 266 267 268 269 270 271 272 273 274
vector_var           : 112 112 231 232 233 234 235 236 237 238 239
virtualinteger       : 44 116 127 128 128 134 134 134 135 135 135 136 136 136 176 184 185 185 193 194 196 197 198 199 200 201 201 202 203 252 255
virtualnumber        : 97 170 172 210 211 214 217 217 217 276 289
while_block          : 58

Parsing method: LALR

state 0

    (0) S' -> . parsed
    (1) parsed -> . program
    (2) parsed -> . expr
    (3) program -> . optcomments dir PYTHON newlines optdesc optscale optassignments sections
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (11) optcomments -> . COMMENT optnewlines optcomments
    (12) optcomments -> . empty
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (290) empty -> .

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    COMMENT         shift and go to state 4
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17
    dir             reduce using rule 290 (empty -> .)

    optcomments                    shift and go to state 1
    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 20
    virtualinteger                 shift and go to state 21
    function_call                  shift and go to state 2
    program                        shift and go to state 8
    parsed                         shift and go to state 6
    empty                          shift and go to state 10

state 1

    (3) program -> optcomments . dir PYTHON newlines optdesc optscale optassignments sections

    dir             shift and go to state 22


state 2

    (258) expr -> function_call .

    PLUS            reduce using rule 258 (expr -> function_call .)
    MINUS           reduce using rule 258 (expr -> function_call .)
    TIMES           reduce using rule 258 (expr -> function_call .)
    DIVIDE          reduce using rule 258 (expr -> function_call .)
    MOD             reduce using rule 258 (expr -> function_call .)
    POWER           reduce using rule 258 (expr -> function_call .)
    $end            reduce using rule 258 (expr -> function_call .)
    COMMA           reduce using rule 258 (expr -> function_call .)
    RPAREN          reduce using rule 258 (expr -> function_call .)
    RBRACK          reduce using rule 258 (expr -> function_call .)
    if              reduce using rule 258 (expr -> function_call .)
    unless          reduce using rule 258 (expr -> function_call .)
    as              reduce using rule 258 (expr -> function_call .)
    rotated         reduce using rule 258 (expr -> function_call .)
    facing          reduce using rule 258 (expr -> function_call .)
    align           reduce using rule 258 (expr -> function_call .)
    at              reduce using rule 258 (expr -> function_call .)
    in              reduce using rule 258 (expr -> function_call .)
    do              reduce using rule 258 (expr -> function_call .)
    then            reduce using rule 258 (expr -> function_call .)
    NEWLINE         reduce using rule 258 (expr -> function_call .)
    COMMENT         reduce using rule 258 (expr -> function_call .)
    GT              reduce using rule 258 (expr -> function_call .)
    to              reduce using rule 258 (expr -> function_call .)
    by              reduce using rule 258 (expr -> function_call .)


state 3

    (260) expr -> MINUS . expr
    (274) vector_expr -> MINUS . vector_expr
    (158) virtualinteger -> MINUS . INTEGER
    (159) virtualinteger -> MINUS . HEX
    (160) virtualinteger -> MINUS . BINARY
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    INTEGER         shift and go to state 24
    HEX             shift and go to state 25
    BINARY          shift and go to state 26
    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 23
    fullselector                   shift and go to state 19
    expr                           shift and go to state 27
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 4

    (11) optcomments -> COMMENT . optnewlines optcomments
    (30) optnewlines -> . newlines
    (31) optnewlines -> . empty
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE
    (290) empty -> .

    NEWLINE         shift and go to state 28
    COMMENT         reduce using rule 290 (empty -> .)
    dir             reduce using rule 290 (empty -> .)
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)

    newlines                       shift and go to state 31
    empty                          shift and go to state 30
    optnewlines                    shift and go to state 29

state 5

    (253) expr -> scale .

    PLUS            reduce using rule 253 (expr -> scale .)
    MINUS           reduce using rule 253 (expr -> scale .)
    TIMES           reduce using rule 253 (expr -> scale .)
    DIVIDE          reduce using rule 253 (expr -> scale .)
    MOD             reduce using rule 253 (expr -> scale .)
    POWER           reduce using rule 253 (expr -> scale .)
    $end            reduce using rule 253 (expr -> scale .)
    COMMA           reduce using rule 253 (expr -> scale .)
    RPAREN          reduce using rule 253 (expr -> scale .)
    RBRACK          reduce using rule 253 (expr -> scale .)
    if              reduce using rule 253 (expr -> scale .)
    unless          reduce using rule 253 (expr -> scale .)
    as              reduce using rule 253 (expr -> scale .)
    rotated         reduce using rule 253 (expr -> scale .)
    facing          reduce using rule 253 (expr -> scale .)
    align           reduce using rule 253 (expr -> scale .)
    at              reduce using rule 253 (expr -> scale .)
    in              reduce using rule 253 (expr -> scale .)
    do              reduce using rule 253 (expr -> scale .)
    then            reduce using rule 253 (expr -> scale .)
    NEWLINE         reduce using rule 253 (expr -> scale .)
    COMMENT         reduce using rule 253 (expr -> scale .)
    GT              reduce using rule 253 (expr -> scale .)
    to              reduce using rule 253 (expr -> scale .)
    by              reduce using rule 253 (expr -> scale .)


state 6

    (0) S' -> parsed .



state 7

    (262) vector_expr -> LT . expr COMMA expr COMMA expr GT
    (263) vector_expr -> LT . ID GT
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    ID              shift and go to state 32
    scale           shift and go to state 5
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 33
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 8

    (1) parsed -> program .

    $end            reduce using rule 1 (parsed -> program .)


state 9

    (155) virtualinteger -> INTEGER .

    PLUS            reduce using rule 155 (virtualinteger -> INTEGER .)
    MINUS           reduce using rule 155 (virtualinteger -> INTEGER .)
    TIMES           reduce using rule 155 (virtualinteger -> INTEGER .)
    DIVIDE          reduce using rule 155 (virtualinteger -> INTEGER .)
    MOD             reduce using rule 155 (virtualinteger -> INTEGER .)
    POWER           reduce using rule 155 (virtualinteger -> INTEGER .)
    $end            reduce using rule 155 (virtualinteger -> INTEGER .)
    COMMA           reduce using rule 155 (virtualinteger -> INTEGER .)
    RPAREN          reduce using rule 155 (virtualinteger -> INTEGER .)
    RBRACK          reduce using rule 155 (virtualinteger -> INTEGER .)
    if              reduce using rule 155 (virtualinteger -> INTEGER .)
    unless          reduce using rule 155 (virtualinteger -> INTEGER .)
    as              reduce using rule 155 (virtualinteger -> INTEGER .)
    rotated         reduce using rule 155 (virtualinteger -> INTEGER .)
    facing          reduce using rule 155 (virtualinteger -> INTEGER .)
    align           reduce using rule 155 (virtualinteger -> INTEGER .)
    at              reduce using rule 155 (virtualinteger -> INTEGER .)
    in              reduce using rule 155 (virtualinteger -> INTEGER .)
    do              reduce using rule 155 (virtualinteger -> INTEGER .)
    then            reduce using rule 155 (virtualinteger -> INTEGER .)
    NEWLINE         reduce using rule 155 (virtualinteger -> INTEGER .)
    COMMENT         reduce using rule 155 (virtualinteger -> INTEGER .)
    GT              reduce using rule 155 (virtualinteger -> INTEGER .)
    to              reduce using rule 155 (virtualinteger -> INTEGER .)
    by              reduce using rule 155 (virtualinteger -> INTEGER .)
    and             reduce using rule 155 (virtualinteger -> INTEGER .)
    PYTHON          reduce using rule 155 (virtualinteger -> INTEGER .)
    INTEGER         reduce using rule 155 (virtualinteger -> INTEGER .)
    HEX             reduce using rule 155 (virtualinteger -> INTEGER .)
    BINARY          reduce using rule 155 (virtualinteger -> INTEGER .)
    DOLLAR          reduce using rule 155 (virtualinteger -> INTEGER .)
    DOT             reduce using rule 155 (virtualinteger -> INTEGER .)


state 10

    (12) optcomments -> empty .

    dir             reduce using rule 12 (optcomments -> empty .)
    clock           reduce using rule 12 (optcomments -> empty .)
    function        reduce using rule 12 (optcomments -> empty .)
    reset           reduce using rule 12 (optcomments -> empty .)
    macro           reduce using rule 12 (optcomments -> empty .)


state 11

    (161) virtualinteger -> DOLLAR . ID

    ID              shift and go to state 34


state 12

    (156) virtualinteger -> HEX .

    PLUS            reduce using rule 156 (virtualinteger -> HEX .)
    MINUS           reduce using rule 156 (virtualinteger -> HEX .)
    TIMES           reduce using rule 156 (virtualinteger -> HEX .)
    DIVIDE          reduce using rule 156 (virtualinteger -> HEX .)
    MOD             reduce using rule 156 (virtualinteger -> HEX .)
    POWER           reduce using rule 156 (virtualinteger -> HEX .)
    $end            reduce using rule 156 (virtualinteger -> HEX .)
    COMMA           reduce using rule 156 (virtualinteger -> HEX .)
    RPAREN          reduce using rule 156 (virtualinteger -> HEX .)
    RBRACK          reduce using rule 156 (virtualinteger -> HEX .)
    if              reduce using rule 156 (virtualinteger -> HEX .)
    unless          reduce using rule 156 (virtualinteger -> HEX .)
    as              reduce using rule 156 (virtualinteger -> HEX .)
    rotated         reduce using rule 156 (virtualinteger -> HEX .)
    facing          reduce using rule 156 (virtualinteger -> HEX .)
    align           reduce using rule 156 (virtualinteger -> HEX .)
    at              reduce using rule 156 (virtualinteger -> HEX .)
    in              reduce using rule 156 (virtualinteger -> HEX .)
    do              reduce using rule 156 (virtualinteger -> HEX .)
    then            reduce using rule 156 (virtualinteger -> HEX .)
    NEWLINE         reduce using rule 156 (virtualinteger -> HEX .)
    COMMENT         reduce using rule 156 (virtualinteger -> HEX .)
    GT              reduce using rule 156 (virtualinteger -> HEX .)
    to              reduce using rule 156 (virtualinteger -> HEX .)
    by              reduce using rule 156 (virtualinteger -> HEX .)
    and             reduce using rule 156 (virtualinteger -> HEX .)
    PYTHON          reduce using rule 156 (virtualinteger -> HEX .)
    INTEGER         reduce using rule 156 (virtualinteger -> HEX .)
    HEX             reduce using rule 156 (virtualinteger -> HEX .)
    BINARY          reduce using rule 156 (virtualinteger -> HEX .)
    DOLLAR          reduce using rule 156 (virtualinteger -> HEX .)
    DOT             reduce using rule 156 (virtualinteger -> HEX .)


state 13

    (275) vector_expr -> here .
    (276) vector_expr -> here . LPAREN virtualnumber RPAREN

    TIMES           reduce using rule 275 (vector_expr -> here .)
    PLUS            reduce using rule 275 (vector_expr -> here .)
    MINUS           reduce using rule 275 (vector_expr -> here .)
    DIVIDE          reduce using rule 275 (vector_expr -> here .)
    MOD             reduce using rule 275 (vector_expr -> here .)
    RPAREN          reduce using rule 275 (vector_expr -> here .)
    POWER           reduce using rule 275 (vector_expr -> here .)
    $end            reduce using rule 275 (vector_expr -> here .)
    COMMA           reduce using rule 275 (vector_expr -> here .)
    RBRACK          reduce using rule 275 (vector_expr -> here .)
    if              reduce using rule 275 (vector_expr -> here .)
    unless          reduce using rule 275 (vector_expr -> here .)
    as              reduce using rule 275 (vector_expr -> here .)
    rotated         reduce using rule 275 (vector_expr -> here .)
    facing          reduce using rule 275 (vector_expr -> here .)
    align           reduce using rule 275 (vector_expr -> here .)
    at              reduce using rule 275 (vector_expr -> here .)
    in              reduce using rule 275 (vector_expr -> here .)
    do              reduce using rule 275 (vector_expr -> here .)
    then            reduce using rule 275 (vector_expr -> here .)
    NEWLINE         reduce using rule 275 (vector_expr -> here .)
    COMMENT         reduce using rule 275 (vector_expr -> here .)
    GT              reduce using rule 275 (vector_expr -> here .)
    to              reduce using rule 275 (vector_expr -> here .)
    by              reduce using rule 275 (vector_expr -> here .)
    LPAREN          shift and go to state 35


state 14

    (259) expr -> LPAREN . expr RPAREN
    (261) vector_expr -> LPAREN . vector_expr RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 36
    fullselector                   shift and go to state 19
    expr                           shift and go to state 37
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 15

    (254) expr -> ID .
    (255) expr -> ID . LBRACK virtualinteger RBRACK
    (256) expr -> ID . LBRACK expr RBRACK
    (277) function_call -> ID . LPAREN exprlist RPAREN

    PLUS            reduce using rule 254 (expr -> ID .)
    MINUS           reduce using rule 254 (expr -> ID .)
    TIMES           reduce using rule 254 (expr -> ID .)
    DIVIDE          reduce using rule 254 (expr -> ID .)
    MOD             reduce using rule 254 (expr -> ID .)
    POWER           reduce using rule 254 (expr -> ID .)
    $end            reduce using rule 254 (expr -> ID .)
    COMMA           reduce using rule 254 (expr -> ID .)
    RPAREN          reduce using rule 254 (expr -> ID .)
    RBRACK          reduce using rule 254 (expr -> ID .)
    if              reduce using rule 254 (expr -> ID .)
    unless          reduce using rule 254 (expr -> ID .)
    as              reduce using rule 254 (expr -> ID .)
    rotated         reduce using rule 254 (expr -> ID .)
    facing          reduce using rule 254 (expr -> ID .)
    align           reduce using rule 254 (expr -> ID .)
    at              reduce using rule 254 (expr -> ID .)
    in              reduce using rule 254 (expr -> ID .)
    do              reduce using rule 254 (expr -> ID .)
    then            reduce using rule 254 (expr -> ID .)
    NEWLINE         reduce using rule 254 (expr -> ID .)
    COMMENT         reduce using rule 254 (expr -> ID .)
    GT              reduce using rule 254 (expr -> ID .)
    to              reduce using rule 254 (expr -> ID .)
    by              reduce using rule 254 (expr -> ID .)
    LBRACK          shift and go to state 38
    LPAREN          shift and go to state 39


state 16

    (157) virtualinteger -> BINARY .

    PLUS            reduce using rule 157 (virtualinteger -> BINARY .)
    MINUS           reduce using rule 157 (virtualinteger -> BINARY .)
    TIMES           reduce using rule 157 (virtualinteger -> BINARY .)
    DIVIDE          reduce using rule 157 (virtualinteger -> BINARY .)
    MOD             reduce using rule 157 (virtualinteger -> BINARY .)
    POWER           reduce using rule 157 (virtualinteger -> BINARY .)
    $end            reduce using rule 157 (virtualinteger -> BINARY .)
    COMMA           reduce using rule 157 (virtualinteger -> BINARY .)
    RPAREN          reduce using rule 157 (virtualinteger -> BINARY .)
    RBRACK          reduce using rule 157 (virtualinteger -> BINARY .)
    if              reduce using rule 157 (virtualinteger -> BINARY .)
    unless          reduce using rule 157 (virtualinteger -> BINARY .)
    as              reduce using rule 157 (virtualinteger -> BINARY .)
    rotated         reduce using rule 157 (virtualinteger -> BINARY .)
    facing          reduce using rule 157 (virtualinteger -> BINARY .)
    align           reduce using rule 157 (virtualinteger -> BINARY .)
    at              reduce using rule 157 (virtualinteger -> BINARY .)
    in              reduce using rule 157 (virtualinteger -> BINARY .)
    do              reduce using rule 157 (virtualinteger -> BINARY .)
    then            reduce using rule 157 (virtualinteger -> BINARY .)
    NEWLINE         reduce using rule 157 (virtualinteger -> BINARY .)
    COMMENT         reduce using rule 157 (virtualinteger -> BINARY .)
    GT              reduce using rule 157 (virtualinteger -> BINARY .)
    to              reduce using rule 157 (virtualinteger -> BINARY .)
    by              reduce using rule 157 (virtualinteger -> BINARY .)
    and             reduce using rule 157 (virtualinteger -> BINARY .)
    PYTHON          reduce using rule 157 (virtualinteger -> BINARY .)
    INTEGER         reduce using rule 157 (virtualinteger -> BINARY .)
    HEX             reduce using rule 157 (virtualinteger -> BINARY .)
    BINARY          reduce using rule 157 (virtualinteger -> BINARY .)
    DOLLAR          reduce using rule 157 (virtualinteger -> BINARY .)
    DOT             reduce using rule 157 (virtualinteger -> BINARY .)


state 17

    (208) fullselector -> ATID .
    (209) fullselector -> ATID . LBRACK qualifiers RBRACK

    DOT             reduce using rule 208 (fullselector -> ATID .)
    EQUALEQUAL      reduce using rule 208 (fullselector -> ATID .)
    and             reduce using rule 208 (fullselector -> ATID .)
    if              reduce using rule 208 (fullselector -> ATID .)
    unless          reduce using rule 208 (fullselector -> ATID .)
    as              reduce using rule 208 (fullselector -> ATID .)
    rotated         reduce using rule 208 (fullselector -> ATID .)
    facing          reduce using rule 208 (fullselector -> ATID .)
    align           reduce using rule 208 (fullselector -> ATID .)
    at              reduce using rule 208 (fullselector -> ATID .)
    in              reduce using rule 208 (fullselector -> ATID .)
    do              reduce using rule 208 (fullselector -> ATID .)
    then            reduce using rule 208 (fullselector -> ATID .)
    NEWLINE         reduce using rule 208 (fullselector -> ATID .)
    COMMENT         reduce using rule 208 (fullselector -> ATID .)
    PYTHON          reduce using rule 208 (fullselector -> ATID .)
    INTEGER         reduce using rule 208 (fullselector -> ATID .)
    HEX             reduce using rule 208 (fullselector -> ATID .)
    BINARY          reduce using rule 208 (fullselector -> ATID .)
    MINUS           reduce using rule 208 (fullselector -> ATID .)
    DOLLAR          reduce using rule 208 (fullselector -> ATID .)
    TILDE           reduce using rule 208 (fullselector -> ATID .)
    TILDEEMPTY      reduce using rule 208 (fullselector -> ATID .)
    POWER           reduce using rule 208 (fullselector -> ATID .)
    POWEREMPTY      reduce using rule 208 (fullselector -> ATID .)
    FLOAT           reduce using rule 208 (fullselector -> ATID .)
    LBRACK          shift and go to state 40


state 18

    (251) expr -> vector_expr . TIMES vector_expr
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr

    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 19

    (257) expr -> fullselector . DOT ID
    (264) vector_expr -> fullselector . DOT LT ID GT

    DOT             shift and go to state 46


state 20

    (2) parsed -> expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    $end            reduce using rule 2 (parsed -> expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 21

    (252) expr -> virtualinteger .

    PLUS            reduce using rule 252 (expr -> virtualinteger .)
    MINUS           reduce using rule 252 (expr -> virtualinteger .)
    TIMES           reduce using rule 252 (expr -> virtualinteger .)
    DIVIDE          reduce using rule 252 (expr -> virtualinteger .)
    MOD             reduce using rule 252 (expr -> virtualinteger .)
    POWER           reduce using rule 252 (expr -> virtualinteger .)
    $end            reduce using rule 252 (expr -> virtualinteger .)
    COMMA           reduce using rule 252 (expr -> virtualinteger .)
    RPAREN          reduce using rule 252 (expr -> virtualinteger .)
    RBRACK          reduce using rule 252 (expr -> virtualinteger .)
    if              reduce using rule 252 (expr -> virtualinteger .)
    unless          reduce using rule 252 (expr -> virtualinteger .)
    as              reduce using rule 252 (expr -> virtualinteger .)
    rotated         reduce using rule 252 (expr -> virtualinteger .)
    facing          reduce using rule 252 (expr -> virtualinteger .)
    align           reduce using rule 252 (expr -> virtualinteger .)
    at              reduce using rule 252 (expr -> virtualinteger .)
    in              reduce using rule 252 (expr -> virtualinteger .)
    do              reduce using rule 252 (expr -> virtualinteger .)
    then            reduce using rule 252 (expr -> virtualinteger .)
    NEWLINE         reduce using rule 252 (expr -> virtualinteger .)
    COMMENT         reduce using rule 252 (expr -> virtualinteger .)
    GT              reduce using rule 252 (expr -> virtualinteger .)
    to              reduce using rule 252 (expr -> virtualinteger .)
    by              reduce using rule 252 (expr -> virtualinteger .)


state 22

    (3) program -> optcomments dir . PYTHON newlines optdesc optscale optassignments sections

    PYTHON          shift and go to state 53


state 23

    (274) vector_expr -> MINUS vector_expr .
    (251) expr -> vector_expr . TIMES vector_expr
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr

    PLUS            reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    MINUS           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    POWER           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    $end            reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    COMMA           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    RPAREN          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    RBRACK          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    if              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    unless          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    as              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    rotated         reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    facing          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    align           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    at              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    in              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    do              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    then            reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    NEWLINE         reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    COMMENT         reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    GT              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    to              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    by              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45

  ! TIMES           [ reduce using rule 274 (vector_expr -> MINUS vector_expr .) ]
  ! DIVIDE          [ reduce using rule 274 (vector_expr -> MINUS vector_expr .) ]
  ! MOD             [ reduce using rule 274 (vector_expr -> MINUS vector_expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 24

    (158) virtualinteger -> MINUS INTEGER .
    (155) virtualinteger -> INTEGER .

  ! reduce/reduce conflict for PLUS resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for MINUS resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for TIMES resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for MOD resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for POWER resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for $end resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for RBRACK resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for if resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for unless resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for as resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for rotated resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for facing resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for align resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for at resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for in resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for do resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for then resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for COMMENT resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for GT resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for to resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for by resolved using rule 155 (virtualinteger -> INTEGER .)
    PLUS            reduce using rule 155 (virtualinteger -> INTEGER .)
    MINUS           reduce using rule 155 (virtualinteger -> INTEGER .)
    TIMES           reduce using rule 155 (virtualinteger -> INTEGER .)
    DIVIDE          reduce using rule 155 (virtualinteger -> INTEGER .)
    MOD             reduce using rule 155 (virtualinteger -> INTEGER .)
    POWER           reduce using rule 155 (virtualinteger -> INTEGER .)
    $end            reduce using rule 155 (virtualinteger -> INTEGER .)
    COMMA           reduce using rule 155 (virtualinteger -> INTEGER .)
    RPAREN          reduce using rule 155 (virtualinteger -> INTEGER .)
    RBRACK          reduce using rule 155 (virtualinteger -> INTEGER .)
    if              reduce using rule 155 (virtualinteger -> INTEGER .)
    unless          reduce using rule 155 (virtualinteger -> INTEGER .)
    as              reduce using rule 155 (virtualinteger -> INTEGER .)
    rotated         reduce using rule 155 (virtualinteger -> INTEGER .)
    facing          reduce using rule 155 (virtualinteger -> INTEGER .)
    align           reduce using rule 155 (virtualinteger -> INTEGER .)
    at              reduce using rule 155 (virtualinteger -> INTEGER .)
    in              reduce using rule 155 (virtualinteger -> INTEGER .)
    do              reduce using rule 155 (virtualinteger -> INTEGER .)
    then            reduce using rule 155 (virtualinteger -> INTEGER .)
    NEWLINE         reduce using rule 155 (virtualinteger -> INTEGER .)
    COMMENT         reduce using rule 155 (virtualinteger -> INTEGER .)
    GT              reduce using rule 155 (virtualinteger -> INTEGER .)
    to              reduce using rule 155 (virtualinteger -> INTEGER .)
    by              reduce using rule 155 (virtualinteger -> INTEGER .)

  ! PLUS            [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! MINUS           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! TIMES           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! DIVIDE          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! MOD             [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! POWER           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! $end            [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! COMMA           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! RPAREN          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! RBRACK          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! if              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! unless          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! as              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! rotated         [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! facing          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! align           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! at              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! in              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! do              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! then            [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! NEWLINE         [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! COMMENT         [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! GT              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! to              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! by              [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]


state 25

    (159) virtualinteger -> MINUS HEX .
    (156) virtualinteger -> HEX .

  ! reduce/reduce conflict for PLUS resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for MINUS resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for TIMES resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for MOD resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for POWER resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for $end resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for COMMA resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for RPAREN resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for RBRACK resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for if resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for unless resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for as resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for rotated resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for facing resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for align resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for at resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for in resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for do resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for then resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for COMMENT resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for GT resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for to resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for by resolved using rule 156 (virtualinteger -> HEX .)
    PLUS            reduce using rule 156 (virtualinteger -> HEX .)
    MINUS           reduce using rule 156 (virtualinteger -> HEX .)
    TIMES           reduce using rule 156 (virtualinteger -> HEX .)
    DIVIDE          reduce using rule 156 (virtualinteger -> HEX .)
    MOD             reduce using rule 156 (virtualinteger -> HEX .)
    POWER           reduce using rule 156 (virtualinteger -> HEX .)
    $end            reduce using rule 156 (virtualinteger -> HEX .)
    COMMA           reduce using rule 156 (virtualinteger -> HEX .)
    RPAREN          reduce using rule 156 (virtualinteger -> HEX .)
    RBRACK          reduce using rule 156 (virtualinteger -> HEX .)
    if              reduce using rule 156 (virtualinteger -> HEX .)
    unless          reduce using rule 156 (virtualinteger -> HEX .)
    as              reduce using rule 156 (virtualinteger -> HEX .)
    rotated         reduce using rule 156 (virtualinteger -> HEX .)
    facing          reduce using rule 156 (virtualinteger -> HEX .)
    align           reduce using rule 156 (virtualinteger -> HEX .)
    at              reduce using rule 156 (virtualinteger -> HEX .)
    in              reduce using rule 156 (virtualinteger -> HEX .)
    do              reduce using rule 156 (virtualinteger -> HEX .)
    then            reduce using rule 156 (virtualinteger -> HEX .)
    NEWLINE         reduce using rule 156 (virtualinteger -> HEX .)
    COMMENT         reduce using rule 156 (virtualinteger -> HEX .)
    GT              reduce using rule 156 (virtualinteger -> HEX .)
    to              reduce using rule 156 (virtualinteger -> HEX .)
    by              reduce using rule 156 (virtualinteger -> HEX .)

  ! PLUS            [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! MINUS           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! TIMES           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! DIVIDE          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! MOD             [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! POWER           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! $end            [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! COMMA           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! RPAREN          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! RBRACK          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! if              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! unless          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! as              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! rotated         [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! facing          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! align           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! at              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! in              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! do              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! then            [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! NEWLINE         [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! COMMENT         [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! GT              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! to              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! by              [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]


state 26

    (160) virtualinteger -> MINUS BINARY .
    (157) virtualinteger -> BINARY .

  ! reduce/reduce conflict for PLUS resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for MINUS resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for TIMES resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for MOD resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for POWER resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for $end resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for COMMA resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for RBRACK resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for if resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for unless resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for as resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for rotated resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for facing resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for align resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for at resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for in resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for do resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for then resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for COMMENT resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for GT resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for to resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for by resolved using rule 157 (virtualinteger -> BINARY .)
    PLUS            reduce using rule 157 (virtualinteger -> BINARY .)
    MINUS           reduce using rule 157 (virtualinteger -> BINARY .)
    TIMES           reduce using rule 157 (virtualinteger -> BINARY .)
    DIVIDE          reduce using rule 157 (virtualinteger -> BINARY .)
    MOD             reduce using rule 157 (virtualinteger -> BINARY .)
    POWER           reduce using rule 157 (virtualinteger -> BINARY .)
    $end            reduce using rule 157 (virtualinteger -> BINARY .)
    COMMA           reduce using rule 157 (virtualinteger -> BINARY .)
    RPAREN          reduce using rule 157 (virtualinteger -> BINARY .)
    RBRACK          reduce using rule 157 (virtualinteger -> BINARY .)
    if              reduce using rule 157 (virtualinteger -> BINARY .)
    unless          reduce using rule 157 (virtualinteger -> BINARY .)
    as              reduce using rule 157 (virtualinteger -> BINARY .)
    rotated         reduce using rule 157 (virtualinteger -> BINARY .)
    facing          reduce using rule 157 (virtualinteger -> BINARY .)
    align           reduce using rule 157 (virtualinteger -> BINARY .)
    at              reduce using rule 157 (virtualinteger -> BINARY .)
    in              reduce using rule 157 (virtualinteger -> BINARY .)
    do              reduce using rule 157 (virtualinteger -> BINARY .)
    then            reduce using rule 157 (virtualinteger -> BINARY .)
    NEWLINE         reduce using rule 157 (virtualinteger -> BINARY .)
    COMMENT         reduce using rule 157 (virtualinteger -> BINARY .)
    GT              reduce using rule 157 (virtualinteger -> BINARY .)
    to              reduce using rule 157 (virtualinteger -> BINARY .)
    by              reduce using rule 157 (virtualinteger -> BINARY .)

  ! PLUS            [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! MINUS           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! TIMES           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! DIVIDE          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! MOD             [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! POWER           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! $end            [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! COMMA           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! RPAREN          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! RBRACK          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! if              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! unless          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! as              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! rotated         [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! facing          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! align           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! at              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! in              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! do              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! then            [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! NEWLINE         [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! COMMENT         [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! GT              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! to              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! by              [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]


state 27

    (260) expr -> MINUS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    PLUS            reduce using rule 260 (expr -> MINUS expr .)
    MINUS           reduce using rule 260 (expr -> MINUS expr .)
    TIMES           reduce using rule 260 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 260 (expr -> MINUS expr .)
    MOD             reduce using rule 260 (expr -> MINUS expr .)
    POWER           reduce using rule 260 (expr -> MINUS expr .)
    $end            reduce using rule 260 (expr -> MINUS expr .)
    COMMA           reduce using rule 260 (expr -> MINUS expr .)
    RPAREN          reduce using rule 260 (expr -> MINUS expr .)
    RBRACK          reduce using rule 260 (expr -> MINUS expr .)
    if              reduce using rule 260 (expr -> MINUS expr .)
    unless          reduce using rule 260 (expr -> MINUS expr .)
    as              reduce using rule 260 (expr -> MINUS expr .)
    rotated         reduce using rule 260 (expr -> MINUS expr .)
    facing          reduce using rule 260 (expr -> MINUS expr .)
    align           reduce using rule 260 (expr -> MINUS expr .)
    at              reduce using rule 260 (expr -> MINUS expr .)
    in              reduce using rule 260 (expr -> MINUS expr .)
    do              reduce using rule 260 (expr -> MINUS expr .)
    then            reduce using rule 260 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 260 (expr -> MINUS expr .)
    COMMENT         reduce using rule 260 (expr -> MINUS expr .)
    GT              reduce using rule 260 (expr -> MINUS expr .)
    to              reduce using rule 260 (expr -> MINUS expr .)
    by              reduce using rule 260 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]
  ! POWER           [ shift and go to state 48 ]


state 28

    (28) newlines -> NEWLINE . newlines
    (29) newlines -> NEWLINE .
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    create          reduce using rule 29 (newlines -> NEWLINE .)
    ID              reduce using rule 29 (newlines -> NEWLINE .)
    LT              reduce using rule 29 (newlines -> NEWLINE .)
    function        reduce using rule 29 (newlines -> NEWLINE .)
    end             reduce using rule 29 (newlines -> NEWLINE .)
    COMMENT         reduce using rule 29 (newlines -> NEWLINE .)
    DOLLAR          reduce using rule 29 (newlines -> NEWLINE .)
    ATID            reduce using rule 29 (newlines -> NEWLINE .)
    define          reduce using rule 29 (newlines -> NEWLINE .)
    array           reduce using rule 29 (newlines -> NEWLINE .)
    clock           reduce using rule 29 (newlines -> NEWLINE .)
    reset           reduce using rule 29 (newlines -> NEWLINE .)
    macro           reduce using rule 29 (newlines -> NEWLINE .)
    $end            reduce using rule 29 (newlines -> NEWLINE .)
    as              reduce using rule 29 (newlines -> NEWLINE .)
    for             reduce using rule 29 (newlines -> NEWLINE .)
    title           reduce using rule 29 (newlines -> NEWLINE .)
    subtitle        reduce using rule 29 (newlines -> NEWLINE .)
    actionbar       reduce using rule 29 (newlines -> NEWLINE .)
    COMMAND         reduce using rule 29 (newlines -> NEWLINE .)
    move            reduce using rule 29 (newlines -> NEWLINE .)
    if              reduce using rule 29 (newlines -> NEWLINE .)
    trigger         reduce using rule 29 (newlines -> NEWLINE .)
    while           reduce using rule 29 (newlines -> NEWLINE .)
    switch          reduce using rule 29 (newlines -> NEWLINE .)
    tell            reduce using rule 29 (newlines -> NEWLINE .)
    return          reduce using rule 29 (newlines -> NEWLINE .)
    unless          reduce using rule 29 (newlines -> NEWLINE .)
    rotated         reduce using rule 29 (newlines -> NEWLINE .)
    facing          reduce using rule 29 (newlines -> NEWLINE .)
    align           reduce using rule 29 (newlines -> NEWLINE .)
    at              reduce using rule 29 (newlines -> NEWLINE .)
    in              reduce using rule 29 (newlines -> NEWLINE .)
    scale           reduce using rule 29 (newlines -> NEWLINE .)
    else            reduce using rule 29 (newlines -> NEWLINE .)
    dir             reduce using rule 29 (newlines -> NEWLINE .)
    case            reduce using rule 29 (newlines -> NEWLINE .)
    desc            reduce using rule 29 (newlines -> NEWLINE .)
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 54

state 29

    (11) optcomments -> COMMENT optnewlines . optcomments
    (11) optcomments -> . COMMENT optnewlines optcomments
    (12) optcomments -> . empty
    (290) empty -> .

    COMMENT         shift and go to state 4
    dir             reduce using rule 290 (empty -> .)
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)

    optcomments                    shift and go to state 55
    empty                          shift and go to state 10

state 30

    (31) optnewlines -> empty .

    COMMENT         reduce using rule 31 (optnewlines -> empty .)
    dir             reduce using rule 31 (optnewlines -> empty .)
    clock           reduce using rule 31 (optnewlines -> empty .)
    function        reduce using rule 31 (optnewlines -> empty .)
    reset           reduce using rule 31 (optnewlines -> empty .)
    macro           reduce using rule 31 (optnewlines -> empty .)


state 31

    (30) optnewlines -> newlines .

    COMMENT         reduce using rule 30 (optnewlines -> newlines .)
    dir             reduce using rule 30 (optnewlines -> newlines .)
    clock           reduce using rule 30 (optnewlines -> newlines .)
    function        reduce using rule 30 (optnewlines -> newlines .)
    reset           reduce using rule 30 (optnewlines -> newlines .)
    macro           reduce using rule 30 (optnewlines -> newlines .)


state 32

    (263) vector_expr -> LT ID . GT
    (254) expr -> ID .
    (255) expr -> ID . LBRACK virtualinteger RBRACK
    (256) expr -> ID . LBRACK expr RBRACK
    (277) function_call -> ID . LPAREN exprlist RPAREN

    GT              shift and go to state 56
    COMMA           reduce using rule 254 (expr -> ID .)
    PLUS            reduce using rule 254 (expr -> ID .)
    MINUS           reduce using rule 254 (expr -> ID .)
    TIMES           reduce using rule 254 (expr -> ID .)
    DIVIDE          reduce using rule 254 (expr -> ID .)
    MOD             reduce using rule 254 (expr -> ID .)
    POWER           reduce using rule 254 (expr -> ID .)
    LBRACK          shift and go to state 38
    LPAREN          shift and go to state 39


state 33

    (262) vector_expr -> LT expr . COMMA expr COMMA expr GT
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMA           shift and go to state 57
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 34

    (161) virtualinteger -> DOLLAR ID .

    PLUS            reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    MINUS           reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    TIMES           reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    DIVIDE          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    MOD             reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    POWER           reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    $end            reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    COMMA           reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    RPAREN          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    RBRACK          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    if              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    unless          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    as              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    rotated         reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    facing          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    align           reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    at              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    in              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    do              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    then            reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    NEWLINE         reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    COMMENT         reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    GT              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    to              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    by              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    and             reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    PYTHON          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    INTEGER         reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    HEX             reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    BINARY          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    DOLLAR          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    DOT             reduce using rule 161 (virtualinteger -> DOLLAR ID .)


state 35

    (276) vector_expr -> here LPAREN . virtualnumber RPAREN
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 59
    number                         shift and go to state 63

state 36

    (261) vector_expr -> LPAREN vector_expr . RPAREN
    (251) expr -> vector_expr . TIMES vector_expr
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr

    RPAREN          shift and go to state 66
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 37

    (259) expr -> LPAREN expr . RPAREN
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    RPAREN          shift and go to state 67
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 38

    (255) expr -> ID LBRACK . virtualinteger RBRACK
    (256) expr -> ID LBRACK . expr RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 68
    DOLLAR          shift and go to state 11
    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    LT              shift and go to state 7
    here            shift and go to state 13
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 69
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 70

state 39

    (277) function_call -> ID LPAREN . exprlist RPAREN
    (279) exprlist -> . exprlist COMMA expr
    (280) exprlist -> . expr
    (281) exprlist -> . empty
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (290) empty -> .
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    RPAREN          reduce using rule 290 (empty -> .)
    COMMA           reduce using rule 290 (empty -> .)
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 73
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21
    exprlist                       shift and go to state 72
    empty                          shift and go to state 71

state 40

    (209) fullselector -> ATID LBRACK . qualifiers RBRACK
    (189) qualifiers -> . qualifiers COMMA qualifier
    (190) qualifiers -> . qualifiers and qualifier
    (191) qualifiers -> . qualifier
    (192) qualifiers -> . empty
    (193) qualifier -> . virtualinteger
    (194) qualifier -> . ID EQUALS virtualinteger
    (195) qualifier -> . ID EQUALS ID
    (196) qualifier -> . ID EQUALEQUAL virtualinteger
    (197) qualifier -> . ID GEQ virtualinteger
    (198) qualifier -> . ID LEQ virtualinteger
    (199) qualifier -> . ID GT virtualinteger
    (200) qualifier -> . ID LT virtualinteger
    (201) qualifier -> . ID EQUALS virtualinteger DOT DOT virtualinteger
    (202) qualifier -> . ID EQUALS DOT DOT virtualinteger
    (203) qualifier -> . ID EQUALS virtualinteger DOT DOT
    (204) qualifier -> . ID EQUALS
    (205) qualifier -> . ID EQUALS NOT ID
    (206) qualifier -> . ID
    (207) qualifier -> . not ID
    (290) empty -> .
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    ID              shift and go to state 79
    not             shift and go to state 78
    RBRACK          reduce using rule 290 (empty -> .)
    COMMA           reduce using rule 290 (empty -> .)
    and             reduce using rule 290 (empty -> .)
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 80
    qualifiers                     shift and go to state 74
    empty                          shift and go to state 76
    qualifier                      shift and go to state 77

state 41

    (270) vector_expr -> vector_expr DIVIDE . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 81
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 42

    (251) expr -> vector_expr TIMES . vector_expr
    (269) vector_expr -> vector_expr TIMES . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 83
    fullselector                   shift and go to state 85
    expr                           shift and go to state 86
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 43

    (265) vector_expr -> vector_expr PLUS . vector_expr
    (267) vector_expr -> vector_expr PLUS . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 87
    fullselector                   shift and go to state 85
    expr                           shift and go to state 88
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 44

    (266) vector_expr -> vector_expr MINUS . vector_expr
    (268) vector_expr -> vector_expr MINUS . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 89
    fullselector                   shift and go to state 85
    expr                           shift and go to state 90
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 45

    (271) vector_expr -> vector_expr MOD . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 91
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 46

    (257) expr -> fullselector DOT . ID
    (264) vector_expr -> fullselector DOT . LT ID GT

    ID              shift and go to state 93
    LT              shift and go to state 92


state 47

    (246) expr -> expr DIVIDE . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 94
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 48

    (248) expr -> expr POWER . INTEGER
    (249) expr -> expr POWER . HEX
    (250) expr -> expr POWER . BINARY

    INTEGER         shift and go to state 97
    HEX             shift and go to state 96
    BINARY          shift and go to state 95


state 49

    (245) expr -> expr TIMES . expr
    (273) vector_expr -> expr TIMES . vector_expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 98
    fullselector                   shift and go to state 19
    expr                           shift and go to state 99
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 50

    (243) expr -> expr PLUS . expr
    (272) vector_expr -> expr PLUS . vector_expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 100
    fullselector                   shift and go to state 19
    expr                           shift and go to state 101
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 51

    (244) expr -> expr MINUS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 102
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 52

    (247) expr -> expr MOD . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 103
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 53

    (3) program -> optcomments dir PYTHON . newlines optdesc optscale optassignments sections
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 104

state 54

    (28) newlines -> NEWLINE newlines .

    create          reduce using rule 28 (newlines -> NEWLINE newlines .)
    ID              reduce using rule 28 (newlines -> NEWLINE newlines .)
    LT              reduce using rule 28 (newlines -> NEWLINE newlines .)
    function        reduce using rule 28 (newlines -> NEWLINE newlines .)
    end             reduce using rule 28 (newlines -> NEWLINE newlines .)
    COMMENT         reduce using rule 28 (newlines -> NEWLINE newlines .)
    DOLLAR          reduce using rule 28 (newlines -> NEWLINE newlines .)
    ATID            reduce using rule 28 (newlines -> NEWLINE newlines .)
    define          reduce using rule 28 (newlines -> NEWLINE newlines .)
    array           reduce using rule 28 (newlines -> NEWLINE newlines .)
    clock           reduce using rule 28 (newlines -> NEWLINE newlines .)
    reset           reduce using rule 28 (newlines -> NEWLINE newlines .)
    macro           reduce using rule 28 (newlines -> NEWLINE newlines .)
    $end            reduce using rule 28 (newlines -> NEWLINE newlines .)
    as              reduce using rule 28 (newlines -> NEWLINE newlines .)
    for             reduce using rule 28 (newlines -> NEWLINE newlines .)
    title           reduce using rule 28 (newlines -> NEWLINE newlines .)
    subtitle        reduce using rule 28 (newlines -> NEWLINE newlines .)
    actionbar       reduce using rule 28 (newlines -> NEWLINE newlines .)
    COMMAND         reduce using rule 28 (newlines -> NEWLINE newlines .)
    move            reduce using rule 28 (newlines -> NEWLINE newlines .)
    if              reduce using rule 28 (newlines -> NEWLINE newlines .)
    trigger         reduce using rule 28 (newlines -> NEWLINE newlines .)
    while           reduce using rule 28 (newlines -> NEWLINE newlines .)
    switch          reduce using rule 28 (newlines -> NEWLINE newlines .)
    tell            reduce using rule 28 (newlines -> NEWLINE newlines .)
    return          reduce using rule 28 (newlines -> NEWLINE newlines .)
    unless          reduce using rule 28 (newlines -> NEWLINE newlines .)
    rotated         reduce using rule 28 (newlines -> NEWLINE newlines .)
    facing          reduce using rule 28 (newlines -> NEWLINE newlines .)
    align           reduce using rule 28 (newlines -> NEWLINE newlines .)
    at              reduce using rule 28 (newlines -> NEWLINE newlines .)
    in              reduce using rule 28 (newlines -> NEWLINE newlines .)
    scale           reduce using rule 28 (newlines -> NEWLINE newlines .)
    else            reduce using rule 28 (newlines -> NEWLINE newlines .)
    dir             reduce using rule 28 (newlines -> NEWLINE newlines .)
    case            reduce using rule 28 (newlines -> NEWLINE newlines .)
    desc            reduce using rule 28 (newlines -> NEWLINE newlines .)


state 55

    (11) optcomments -> COMMENT optnewlines optcomments .

    dir             reduce using rule 11 (optcomments -> COMMENT optnewlines optcomments .)
    clock           reduce using rule 11 (optcomments -> COMMENT optnewlines optcomments .)
    function        reduce using rule 11 (optcomments -> COMMENT optnewlines optcomments .)
    reset           reduce using rule 11 (optcomments -> COMMENT optnewlines optcomments .)
    macro           reduce using rule 11 (optcomments -> COMMENT optnewlines optcomments .)


state 56

    (263) vector_expr -> LT ID GT .

    TIMES           reduce using rule 263 (vector_expr -> LT ID GT .)
    PLUS            reduce using rule 263 (vector_expr -> LT ID GT .)
    MINUS           reduce using rule 263 (vector_expr -> LT ID GT .)
    DIVIDE          reduce using rule 263 (vector_expr -> LT ID GT .)
    MOD             reduce using rule 263 (vector_expr -> LT ID GT .)
    RPAREN          reduce using rule 263 (vector_expr -> LT ID GT .)
    POWER           reduce using rule 263 (vector_expr -> LT ID GT .)
    $end            reduce using rule 263 (vector_expr -> LT ID GT .)
    COMMA           reduce using rule 263 (vector_expr -> LT ID GT .)
    RBRACK          reduce using rule 263 (vector_expr -> LT ID GT .)
    if              reduce using rule 263 (vector_expr -> LT ID GT .)
    unless          reduce using rule 263 (vector_expr -> LT ID GT .)
    as              reduce using rule 263 (vector_expr -> LT ID GT .)
    rotated         reduce using rule 263 (vector_expr -> LT ID GT .)
    facing          reduce using rule 263 (vector_expr -> LT ID GT .)
    align           reduce using rule 263 (vector_expr -> LT ID GT .)
    at              reduce using rule 263 (vector_expr -> LT ID GT .)
    in              reduce using rule 263 (vector_expr -> LT ID GT .)
    do              reduce using rule 263 (vector_expr -> LT ID GT .)
    then            reduce using rule 263 (vector_expr -> LT ID GT .)
    NEWLINE         reduce using rule 263 (vector_expr -> LT ID GT .)
    COMMENT         reduce using rule 263 (vector_expr -> LT ID GT .)
    GT              reduce using rule 263 (vector_expr -> LT ID GT .)
    to              reduce using rule 263 (vector_expr -> LT ID GT .)
    by              reduce using rule 263 (vector_expr -> LT ID GT .)


state 57

    (262) vector_expr -> LT expr COMMA . expr COMMA expr GT
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 105
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 58

    (147) number -> BINARY .

    DOLLAR          reduce using rule 147 (number -> BINARY .)
    INTEGER         reduce using rule 147 (number -> BINARY .)
    HEX             reduce using rule 147 (number -> BINARY .)
    BINARY          reduce using rule 147 (number -> BINARY .)
    MINUS           reduce using rule 147 (number -> BINARY .)
    FLOAT           reduce using rule 147 (number -> BINARY .)
    TILDE           reduce using rule 147 (number -> BINARY .)
    TILDEEMPTY      reduce using rule 147 (number -> BINARY .)
    NEWLINE         reduce using rule 147 (number -> BINARY .)
    COMMA           reduce using rule 147 (number -> BINARY .)
    GT              reduce using rule 147 (number -> BINARY .)
    RPAREN          reduce using rule 147 (number -> BINARY .)
    if              reduce using rule 147 (number -> BINARY .)
    unless          reduce using rule 147 (number -> BINARY .)
    as              reduce using rule 147 (number -> BINARY .)
    rotated         reduce using rule 147 (number -> BINARY .)
    facing          reduce using rule 147 (number -> BINARY .)
    align           reduce using rule 147 (number -> BINARY .)
    at              reduce using rule 147 (number -> BINARY .)
    in              reduce using rule 147 (number -> BINARY .)
    do              reduce using rule 147 (number -> BINARY .)
    then            reduce using rule 147 (number -> BINARY .)
    COMMENT         reduce using rule 147 (number -> BINARY .)
    ID              reduce using rule 147 (number -> BINARY .)
    POWER           reduce using rule 147 (number -> BINARY .)
    POWEREMPTY      reduce using rule 147 (number -> BINARY .)


state 59

    (276) vector_expr -> here LPAREN virtualnumber . RPAREN

    RPAREN          shift and go to state 106


state 60

    (146) number -> HEX .

    DOLLAR          reduce using rule 146 (number -> HEX .)
    INTEGER         reduce using rule 146 (number -> HEX .)
    HEX             reduce using rule 146 (number -> HEX .)
    BINARY          reduce using rule 146 (number -> HEX .)
    MINUS           reduce using rule 146 (number -> HEX .)
    FLOAT           reduce using rule 146 (number -> HEX .)
    TILDE           reduce using rule 146 (number -> HEX .)
    TILDEEMPTY      reduce using rule 146 (number -> HEX .)
    NEWLINE         reduce using rule 146 (number -> HEX .)
    COMMA           reduce using rule 146 (number -> HEX .)
    GT              reduce using rule 146 (number -> HEX .)
    RPAREN          reduce using rule 146 (number -> HEX .)
    if              reduce using rule 146 (number -> HEX .)
    unless          reduce using rule 146 (number -> HEX .)
    as              reduce using rule 146 (number -> HEX .)
    rotated         reduce using rule 146 (number -> HEX .)
    facing          reduce using rule 146 (number -> HEX .)
    align           reduce using rule 146 (number -> HEX .)
    at              reduce using rule 146 (number -> HEX .)
    in              reduce using rule 146 (number -> HEX .)
    do              reduce using rule 146 (number -> HEX .)
    then            reduce using rule 146 (number -> HEX .)
    COMMENT         reduce using rule 146 (number -> HEX .)
    ID              reduce using rule 146 (number -> HEX .)
    POWER           reduce using rule 146 (number -> HEX .)
    POWEREMPTY      reduce using rule 146 (number -> HEX .)


state 61

    (151) number -> FLOAT .

    DOLLAR          reduce using rule 151 (number -> FLOAT .)
    INTEGER         reduce using rule 151 (number -> FLOAT .)
    HEX             reduce using rule 151 (number -> FLOAT .)
    BINARY          reduce using rule 151 (number -> FLOAT .)
    MINUS           reduce using rule 151 (number -> FLOAT .)
    FLOAT           reduce using rule 151 (number -> FLOAT .)
    TILDE           reduce using rule 151 (number -> FLOAT .)
    TILDEEMPTY      reduce using rule 151 (number -> FLOAT .)
    NEWLINE         reduce using rule 151 (number -> FLOAT .)
    COMMA           reduce using rule 151 (number -> FLOAT .)
    GT              reduce using rule 151 (number -> FLOAT .)
    RPAREN          reduce using rule 151 (number -> FLOAT .)
    if              reduce using rule 151 (number -> FLOAT .)
    unless          reduce using rule 151 (number -> FLOAT .)
    as              reduce using rule 151 (number -> FLOAT .)
    rotated         reduce using rule 151 (number -> FLOAT .)
    facing          reduce using rule 151 (number -> FLOAT .)
    align           reduce using rule 151 (number -> FLOAT .)
    at              reduce using rule 151 (number -> FLOAT .)
    in              reduce using rule 151 (number -> FLOAT .)
    do              reduce using rule 151 (number -> FLOAT .)
    then            reduce using rule 151 (number -> FLOAT .)
    COMMENT         reduce using rule 151 (number -> FLOAT .)
    ID              reduce using rule 151 (number -> FLOAT .)
    POWER           reduce using rule 151 (number -> FLOAT .)
    POWEREMPTY      reduce using rule 151 (number -> FLOAT .)


state 62

    (154) virtualnumber -> DOLLAR . ID

    ID              shift and go to state 107


state 63

    (153) virtualnumber -> number .

    RPAREN          reduce using rule 153 (virtualnumber -> number .)
    DOLLAR          reduce using rule 153 (virtualnumber -> number .)
    INTEGER         reduce using rule 153 (virtualnumber -> number .)
    HEX             reduce using rule 153 (virtualnumber -> number .)
    BINARY          reduce using rule 153 (virtualnumber -> number .)
    MINUS           reduce using rule 153 (virtualnumber -> number .)
    FLOAT           reduce using rule 153 (virtualnumber -> number .)
    TILDE           reduce using rule 153 (virtualnumber -> number .)
    TILDEEMPTY      reduce using rule 153 (virtualnumber -> number .)
    COMMA           reduce using rule 153 (virtualnumber -> number .)
    GT              reduce using rule 153 (virtualnumber -> number .)
    NEWLINE         reduce using rule 153 (virtualnumber -> number .)
    if              reduce using rule 153 (virtualnumber -> number .)
    unless          reduce using rule 153 (virtualnumber -> number .)
    as              reduce using rule 153 (virtualnumber -> number .)
    rotated         reduce using rule 153 (virtualnumber -> number .)
    facing          reduce using rule 153 (virtualnumber -> number .)
    align           reduce using rule 153 (virtualnumber -> number .)
    at              reduce using rule 153 (virtualnumber -> number .)
    in              reduce using rule 153 (virtualnumber -> number .)
    do              reduce using rule 153 (virtualnumber -> number .)
    then            reduce using rule 153 (virtualnumber -> number .)
    COMMENT         reduce using rule 153 (virtualnumber -> number .)
    ID              reduce using rule 153 (virtualnumber -> number .)
    POWER           reduce using rule 153 (virtualnumber -> number .)
    POWEREMPTY      reduce using rule 153 (virtualnumber -> number .)


state 64

    (148) number -> MINUS . INTEGER
    (149) number -> MINUS . HEX
    (150) number -> MINUS . BINARY
    (152) number -> MINUS . FLOAT

    INTEGER         shift and go to state 108
    HEX             shift and go to state 110
    BINARY          shift and go to state 111
    FLOAT           shift and go to state 109


state 65

    (145) number -> INTEGER .

    DOLLAR          reduce using rule 145 (number -> INTEGER .)
    INTEGER         reduce using rule 145 (number -> INTEGER .)
    HEX             reduce using rule 145 (number -> INTEGER .)
    BINARY          reduce using rule 145 (number -> INTEGER .)
    MINUS           reduce using rule 145 (number -> INTEGER .)
    FLOAT           reduce using rule 145 (number -> INTEGER .)
    TILDE           reduce using rule 145 (number -> INTEGER .)
    TILDEEMPTY      reduce using rule 145 (number -> INTEGER .)
    NEWLINE         reduce using rule 145 (number -> INTEGER .)
    COMMA           reduce using rule 145 (number -> INTEGER .)
    GT              reduce using rule 145 (number -> INTEGER .)
    RPAREN          reduce using rule 145 (number -> INTEGER .)
    if              reduce using rule 145 (number -> INTEGER .)
    unless          reduce using rule 145 (number -> INTEGER .)
    as              reduce using rule 145 (number -> INTEGER .)
    rotated         reduce using rule 145 (number -> INTEGER .)
    facing          reduce using rule 145 (number -> INTEGER .)
    align           reduce using rule 145 (number -> INTEGER .)
    at              reduce using rule 145 (number -> INTEGER .)
    in              reduce using rule 145 (number -> INTEGER .)
    do              reduce using rule 145 (number -> INTEGER .)
    then            reduce using rule 145 (number -> INTEGER .)
    COMMENT         reduce using rule 145 (number -> INTEGER .)
    ID              reduce using rule 145 (number -> INTEGER .)
    POWER           reduce using rule 145 (number -> INTEGER .)
    POWEREMPTY      reduce using rule 145 (number -> INTEGER .)


state 66

    (261) vector_expr -> LPAREN vector_expr RPAREN .

    TIMES           reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    PLUS            reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    MINUS           reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    DIVIDE          reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    MOD             reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    RPAREN          reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    POWER           reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    $end            reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    COMMA           reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    RBRACK          reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    if              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    unless          reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    as              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    rotated         reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    facing          reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    align           reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    at              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    in              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    do              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    then            reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    NEWLINE         reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    COMMENT         reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    GT              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    to              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)
    by              reduce using rule 261 (vector_expr -> LPAREN vector_expr RPAREN .)


state 67

    (259) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    RBRACK          reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    if              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    unless          reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    as              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    rotated         reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    facing          reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    align           reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    at              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    in              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    do              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    then            reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    COMMENT         reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    to              reduce using rule 259 (expr -> LPAREN expr RPAREN .)
    by              reduce using rule 259 (expr -> LPAREN expr RPAREN .)


state 68

    (158) virtualinteger -> MINUS . INTEGER
    (159) virtualinteger -> MINUS . HEX
    (160) virtualinteger -> MINUS . BINARY
    (260) expr -> MINUS . expr
    (274) vector_expr -> MINUS . vector_expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    INTEGER         shift and go to state 24
    HEX             shift and go to state 25
    BINARY          shift and go to state 26
    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 23
    fullselector                   shift and go to state 19
    expr                           shift and go to state 27
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 69

    (256) expr -> ID LBRACK expr . RBRACK
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    RBRACK          shift and go to state 112
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 70

    (255) expr -> ID LBRACK virtualinteger . RBRACK
    (252) expr -> virtualinteger .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 113
    PLUS            reduce using rule 252 (expr -> virtualinteger .)
    MINUS           reduce using rule 252 (expr -> virtualinteger .)
    TIMES           reduce using rule 252 (expr -> virtualinteger .)
    DIVIDE          reduce using rule 252 (expr -> virtualinteger .)
    MOD             reduce using rule 252 (expr -> virtualinteger .)
    POWER           reduce using rule 252 (expr -> virtualinteger .)

  ! RBRACK          [ reduce using rule 252 (expr -> virtualinteger .) ]


state 71

    (281) exprlist -> empty .

    RPAREN          reduce using rule 281 (exprlist -> empty .)
    COMMA           reduce using rule 281 (exprlist -> empty .)


state 72

    (277) function_call -> ID LPAREN exprlist . RPAREN
    (279) exprlist -> exprlist . COMMA expr

    RPAREN          shift and go to state 114
    COMMA           shift and go to state 115


state 73

    (280) exprlist -> expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    RPAREN          reduce using rule 280 (exprlist -> expr .)
    COMMA           reduce using rule 280 (exprlist -> expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 74

    (209) fullselector -> ATID LBRACK qualifiers . RBRACK
    (189) qualifiers -> qualifiers . COMMA qualifier
    (190) qualifiers -> qualifiers . and qualifier

    RBRACK          shift and go to state 117
    COMMA           shift and go to state 118
    and             shift and go to state 116


state 75

    (158) virtualinteger -> MINUS . INTEGER
    (159) virtualinteger -> MINUS . HEX
    (160) virtualinteger -> MINUS . BINARY

    INTEGER         shift and go to state 119
    HEX             shift and go to state 120
    BINARY          shift and go to state 121


state 76

    (192) qualifiers -> empty .

    RBRACK          reduce using rule 192 (qualifiers -> empty .)
    COMMA           reduce using rule 192 (qualifiers -> empty .)
    and             reduce using rule 192 (qualifiers -> empty .)


state 77

    (191) qualifiers -> qualifier .

    RBRACK          reduce using rule 191 (qualifiers -> qualifier .)
    COMMA           reduce using rule 191 (qualifiers -> qualifier .)
    and             reduce using rule 191 (qualifiers -> qualifier .)


state 78

    (207) qualifier -> not . ID

    ID              shift and go to state 122


state 79

    (194) qualifier -> ID . EQUALS virtualinteger
    (195) qualifier -> ID . EQUALS ID
    (196) qualifier -> ID . EQUALEQUAL virtualinteger
    (197) qualifier -> ID . GEQ virtualinteger
    (198) qualifier -> ID . LEQ virtualinteger
    (199) qualifier -> ID . GT virtualinteger
    (200) qualifier -> ID . LT virtualinteger
    (201) qualifier -> ID . EQUALS virtualinteger DOT DOT virtualinteger
    (202) qualifier -> ID . EQUALS DOT DOT virtualinteger
    (203) qualifier -> ID . EQUALS virtualinteger DOT DOT
    (204) qualifier -> ID . EQUALS
    (205) qualifier -> ID . EQUALS NOT ID
    (206) qualifier -> ID .

    EQUALS          shift and go to state 125
    EQUALEQUAL      shift and go to state 128
    GEQ             shift and go to state 123
    LEQ             shift and go to state 126
    GT              shift and go to state 124
    LT              shift and go to state 127
    RBRACK          reduce using rule 206 (qualifier -> ID .)
    COMMA           reduce using rule 206 (qualifier -> ID .)
    and             reduce using rule 206 (qualifier -> ID .)


state 80

    (193) qualifier -> virtualinteger .

    RBRACK          reduce using rule 193 (qualifier -> virtualinteger .)
    COMMA           reduce using rule 193 (qualifier -> virtualinteger .)
    and             reduce using rule 193 (qualifier -> virtualinteger .)


state 81

    (270) vector_expr -> vector_expr DIVIDE expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    TIMES           reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    PLUS            reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    MINUS           reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    DIVIDE          reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    MOD             reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    RPAREN          reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    $end            reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    COMMA           reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    RBRACK          reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    if              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    unless          reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    as              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    rotated         reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    facing          reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    align           reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    at              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    in              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    do              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    then            reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    NEWLINE         reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    COMMENT         reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    GT              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    to              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    by              reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 270 (vector_expr -> vector_expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 82

    (274) vector_expr -> MINUS . vector_expr
    (260) expr -> MINUS . expr
    (158) virtualinteger -> MINUS . INTEGER
    (159) virtualinteger -> MINUS . HEX
    (160) virtualinteger -> MINUS . BINARY
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    INTEGER         shift and go to state 24
    HEX             shift and go to state 25
    BINARY          shift and go to state 26
    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 129
    fullselector                   shift and go to state 85
    expr                           shift and go to state 130
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 83

    (251) expr -> vector_expr TIMES vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    PLUS            reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    MINUS           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    TIMES           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    DIVIDE          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    MOD             reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    POWER           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    $end            reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    COMMA           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    RPAREN          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    RBRACK          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    if              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    unless          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    as              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    rotated         reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    facing          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    align           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    at              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    in              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    do              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    then            reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    NEWLINE         reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    COMMENT         reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    GT              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    to              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    by              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! TIMES           [ shift and go to state 131 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 45 ]


state 84

    (261) vector_expr -> LPAREN . vector_expr RPAREN
    (259) expr -> LPAREN . expr RPAREN
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 132
    fullselector                   shift and go to state 85
    expr                           shift and go to state 133
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 85

    (264) vector_expr -> fullselector . DOT LT ID GT
    (257) expr -> fullselector . DOT ID

    DOT             shift and go to state 134


state 86

    (269) vector_expr -> vector_expr TIMES expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    TIMES           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    PLUS            reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    MINUS           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    DIVIDE          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    MOD             reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    $end            reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    COMMA           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    RPAREN          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    RBRACK          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    if              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    unless          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    as              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    rotated         reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    facing          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    align           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    at              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    in              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    do              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    then            reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    NEWLINE         reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    COMMENT         reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    GT              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    to              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    by              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 269 (vector_expr -> vector_expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! TIMES           [ shift and go to state 135 ]
  ! MINUS           [ shift and go to state 51 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 87

    (265) vector_expr -> vector_expr PLUS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    PLUS            reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    MINUS           reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    RPAREN          reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    POWER           reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    $end            reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    COMMA           reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    RBRACK          reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    if              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    unless          reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    as              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    rotated         reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    facing          reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    align           reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    at              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    in              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    do              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    then            reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    NEWLINE         reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    COMMENT         reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    GT              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    to              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    by              reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .)
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45

  ! TIMES           [ reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .) ]
  ! DIVIDE          [ reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .) ]
  ! MOD             [ reduce using rule 265 (vector_expr -> vector_expr PLUS vector_expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 88

    (267) vector_expr -> vector_expr PLUS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    PLUS            reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    MINUS           reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    RPAREN          reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    $end            reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    COMMA           reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    RBRACK          reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    if              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    unless          reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    as              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    rotated         reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    facing          reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    align           reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    at              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    in              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    do              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    then            reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    NEWLINE         reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    COMMENT         reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    GT              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    to              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    by              reduce using rule 267 (vector_expr -> vector_expr PLUS expr .)
    TIMES           shift and go to state 135
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48

  ! TIMES           [ reduce using rule 267 (vector_expr -> vector_expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 267 (vector_expr -> vector_expr PLUS expr .) ]
  ! MOD             [ reduce using rule 267 (vector_expr -> vector_expr PLUS expr .) ]
  ! POWER           [ reduce using rule 267 (vector_expr -> vector_expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 51 ]


state 89

    (266) vector_expr -> vector_expr MINUS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    PLUS            reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    MINUS           reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    RPAREN          reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    POWER           reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    $end            reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    COMMA           reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    RBRACK          reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    if              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    unless          reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    as              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    rotated         reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    facing          reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    align           reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    at              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    in              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    do              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    then            reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    NEWLINE         reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    COMMENT         reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    GT              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    to              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    by              reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .)
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45

  ! TIMES           [ reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .) ]
  ! DIVIDE          [ reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .) ]
  ! MOD             [ reduce using rule 266 (vector_expr -> vector_expr MINUS vector_expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 90

    (268) vector_expr -> vector_expr MINUS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    PLUS            reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    MINUS           reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    RPAREN          reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    $end            reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    COMMA           reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    RBRACK          reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    if              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    unless          reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    as              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    rotated         reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    facing          reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    align           reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    at              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    in              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    do              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    then            reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    NEWLINE         reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    COMMENT         reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    GT              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    to              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    by              reduce using rule 268 (vector_expr -> vector_expr MINUS expr .)
    TIMES           shift and go to state 135
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48

  ! TIMES           [ reduce using rule 268 (vector_expr -> vector_expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 268 (vector_expr -> vector_expr MINUS expr .) ]
  ! MOD             [ reduce using rule 268 (vector_expr -> vector_expr MINUS expr .) ]
  ! POWER           [ reduce using rule 268 (vector_expr -> vector_expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 51 ]


state 91

    (271) vector_expr -> vector_expr MOD expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    TIMES           reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    PLUS            reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    MINUS           reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    DIVIDE          reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    MOD             reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    RPAREN          reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    $end            reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    COMMA           reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    RBRACK          reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    if              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    unless          reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    as              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    rotated         reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    facing          reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    align           reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    at              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    in              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    do              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    then            reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    NEWLINE         reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    COMMENT         reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    GT              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    to              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    by              reduce using rule 271 (vector_expr -> vector_expr MOD expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 271 (vector_expr -> vector_expr MOD expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 92

    (264) vector_expr -> fullselector DOT LT . ID GT

    ID              shift and go to state 137


state 93

    (257) expr -> fullselector DOT ID .

    PLUS            reduce using rule 257 (expr -> fullselector DOT ID .)
    MINUS           reduce using rule 257 (expr -> fullselector DOT ID .)
    TIMES           reduce using rule 257 (expr -> fullselector DOT ID .)
    DIVIDE          reduce using rule 257 (expr -> fullselector DOT ID .)
    MOD             reduce using rule 257 (expr -> fullselector DOT ID .)
    POWER           reduce using rule 257 (expr -> fullselector DOT ID .)
    $end            reduce using rule 257 (expr -> fullselector DOT ID .)
    COMMA           reduce using rule 257 (expr -> fullselector DOT ID .)
    RPAREN          reduce using rule 257 (expr -> fullselector DOT ID .)
    RBRACK          reduce using rule 257 (expr -> fullselector DOT ID .)
    if              reduce using rule 257 (expr -> fullselector DOT ID .)
    unless          reduce using rule 257 (expr -> fullselector DOT ID .)
    as              reduce using rule 257 (expr -> fullselector DOT ID .)
    rotated         reduce using rule 257 (expr -> fullselector DOT ID .)
    facing          reduce using rule 257 (expr -> fullselector DOT ID .)
    align           reduce using rule 257 (expr -> fullselector DOT ID .)
    at              reduce using rule 257 (expr -> fullselector DOT ID .)
    in              reduce using rule 257 (expr -> fullselector DOT ID .)
    do              reduce using rule 257 (expr -> fullselector DOT ID .)
    then            reduce using rule 257 (expr -> fullselector DOT ID .)
    NEWLINE         reduce using rule 257 (expr -> fullselector DOT ID .)
    COMMENT         reduce using rule 257 (expr -> fullselector DOT ID .)
    GT              reduce using rule 257 (expr -> fullselector DOT ID .)
    to              reduce using rule 257 (expr -> fullselector DOT ID .)
    by              reduce using rule 257 (expr -> fullselector DOT ID .)


state 94

    (246) expr -> expr DIVIDE expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    PLUS            reduce using rule 246 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 246 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 246 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 246 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 246 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 246 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 246 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 246 (expr -> expr DIVIDE expr .)
    RBRACK          reduce using rule 246 (expr -> expr DIVIDE expr .)
    if              reduce using rule 246 (expr -> expr DIVIDE expr .)
    unless          reduce using rule 246 (expr -> expr DIVIDE expr .)
    as              reduce using rule 246 (expr -> expr DIVIDE expr .)
    rotated         reduce using rule 246 (expr -> expr DIVIDE expr .)
    facing          reduce using rule 246 (expr -> expr DIVIDE expr .)
    align           reduce using rule 246 (expr -> expr DIVIDE expr .)
    at              reduce using rule 246 (expr -> expr DIVIDE expr .)
    in              reduce using rule 246 (expr -> expr DIVIDE expr .)
    do              reduce using rule 246 (expr -> expr DIVIDE expr .)
    then            reduce using rule 246 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 246 (expr -> expr DIVIDE expr .)
    COMMENT         reduce using rule 246 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 246 (expr -> expr DIVIDE expr .)
    to              reduce using rule 246 (expr -> expr DIVIDE expr .)
    by              reduce using rule 246 (expr -> expr DIVIDE expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 246 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 95

    (250) expr -> expr POWER BINARY .

    PLUS            reduce using rule 250 (expr -> expr POWER BINARY .)
    MINUS           reduce using rule 250 (expr -> expr POWER BINARY .)
    TIMES           reduce using rule 250 (expr -> expr POWER BINARY .)
    DIVIDE          reduce using rule 250 (expr -> expr POWER BINARY .)
    MOD             reduce using rule 250 (expr -> expr POWER BINARY .)
    POWER           reduce using rule 250 (expr -> expr POWER BINARY .)
    $end            reduce using rule 250 (expr -> expr POWER BINARY .)
    COMMA           reduce using rule 250 (expr -> expr POWER BINARY .)
    RPAREN          reduce using rule 250 (expr -> expr POWER BINARY .)
    RBRACK          reduce using rule 250 (expr -> expr POWER BINARY .)
    if              reduce using rule 250 (expr -> expr POWER BINARY .)
    unless          reduce using rule 250 (expr -> expr POWER BINARY .)
    as              reduce using rule 250 (expr -> expr POWER BINARY .)
    rotated         reduce using rule 250 (expr -> expr POWER BINARY .)
    facing          reduce using rule 250 (expr -> expr POWER BINARY .)
    align           reduce using rule 250 (expr -> expr POWER BINARY .)
    at              reduce using rule 250 (expr -> expr POWER BINARY .)
    in              reduce using rule 250 (expr -> expr POWER BINARY .)
    do              reduce using rule 250 (expr -> expr POWER BINARY .)
    then            reduce using rule 250 (expr -> expr POWER BINARY .)
    NEWLINE         reduce using rule 250 (expr -> expr POWER BINARY .)
    COMMENT         reduce using rule 250 (expr -> expr POWER BINARY .)
    GT              reduce using rule 250 (expr -> expr POWER BINARY .)
    to              reduce using rule 250 (expr -> expr POWER BINARY .)
    by              reduce using rule 250 (expr -> expr POWER BINARY .)


state 96

    (249) expr -> expr POWER HEX .

    PLUS            reduce using rule 249 (expr -> expr POWER HEX .)
    MINUS           reduce using rule 249 (expr -> expr POWER HEX .)
    TIMES           reduce using rule 249 (expr -> expr POWER HEX .)
    DIVIDE          reduce using rule 249 (expr -> expr POWER HEX .)
    MOD             reduce using rule 249 (expr -> expr POWER HEX .)
    POWER           reduce using rule 249 (expr -> expr POWER HEX .)
    $end            reduce using rule 249 (expr -> expr POWER HEX .)
    COMMA           reduce using rule 249 (expr -> expr POWER HEX .)
    RPAREN          reduce using rule 249 (expr -> expr POWER HEX .)
    RBRACK          reduce using rule 249 (expr -> expr POWER HEX .)
    if              reduce using rule 249 (expr -> expr POWER HEX .)
    unless          reduce using rule 249 (expr -> expr POWER HEX .)
    as              reduce using rule 249 (expr -> expr POWER HEX .)
    rotated         reduce using rule 249 (expr -> expr POWER HEX .)
    facing          reduce using rule 249 (expr -> expr POWER HEX .)
    align           reduce using rule 249 (expr -> expr POWER HEX .)
    at              reduce using rule 249 (expr -> expr POWER HEX .)
    in              reduce using rule 249 (expr -> expr POWER HEX .)
    do              reduce using rule 249 (expr -> expr POWER HEX .)
    then            reduce using rule 249 (expr -> expr POWER HEX .)
    NEWLINE         reduce using rule 249 (expr -> expr POWER HEX .)
    COMMENT         reduce using rule 249 (expr -> expr POWER HEX .)
    GT              reduce using rule 249 (expr -> expr POWER HEX .)
    to              reduce using rule 249 (expr -> expr POWER HEX .)
    by              reduce using rule 249 (expr -> expr POWER HEX .)


state 97

    (248) expr -> expr POWER INTEGER .

    PLUS            reduce using rule 248 (expr -> expr POWER INTEGER .)
    MINUS           reduce using rule 248 (expr -> expr POWER INTEGER .)
    TIMES           reduce using rule 248 (expr -> expr POWER INTEGER .)
    DIVIDE          reduce using rule 248 (expr -> expr POWER INTEGER .)
    MOD             reduce using rule 248 (expr -> expr POWER INTEGER .)
    POWER           reduce using rule 248 (expr -> expr POWER INTEGER .)
    $end            reduce using rule 248 (expr -> expr POWER INTEGER .)
    COMMA           reduce using rule 248 (expr -> expr POWER INTEGER .)
    RPAREN          reduce using rule 248 (expr -> expr POWER INTEGER .)
    RBRACK          reduce using rule 248 (expr -> expr POWER INTEGER .)
    if              reduce using rule 248 (expr -> expr POWER INTEGER .)
    unless          reduce using rule 248 (expr -> expr POWER INTEGER .)
    as              reduce using rule 248 (expr -> expr POWER INTEGER .)
    rotated         reduce using rule 248 (expr -> expr POWER INTEGER .)
    facing          reduce using rule 248 (expr -> expr POWER INTEGER .)
    align           reduce using rule 248 (expr -> expr POWER INTEGER .)
    at              reduce using rule 248 (expr -> expr POWER INTEGER .)
    in              reduce using rule 248 (expr -> expr POWER INTEGER .)
    do              reduce using rule 248 (expr -> expr POWER INTEGER .)
    then            reduce using rule 248 (expr -> expr POWER INTEGER .)
    NEWLINE         reduce using rule 248 (expr -> expr POWER INTEGER .)
    COMMENT         reduce using rule 248 (expr -> expr POWER INTEGER .)
    GT              reduce using rule 248 (expr -> expr POWER INTEGER .)
    to              reduce using rule 248 (expr -> expr POWER INTEGER .)
    by              reduce using rule 248 (expr -> expr POWER INTEGER .)


state 98

    (273) vector_expr -> expr TIMES vector_expr .
    (251) expr -> vector_expr . TIMES vector_expr
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr

    TIMES           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    PLUS            reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    MINUS           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    DIVIDE          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    MOD             reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    POWER           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    $end            reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    COMMA           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    RPAREN          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    RBRACK          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    if              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    unless          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    as              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    rotated         reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    facing          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    align           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    at              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    in              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    do              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    then            reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    NEWLINE         reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    COMMENT         reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    GT              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    to              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    by              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)

  ! TIMES           [ shift and go to state 42 ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 45 ]


state 99

    (245) expr -> expr TIMES expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    PLUS            reduce using rule 245 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 245 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 245 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 245 (expr -> expr TIMES expr .)
    MOD             reduce using rule 245 (expr -> expr TIMES expr .)
    $end            reduce using rule 245 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 245 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 245 (expr -> expr TIMES expr .)
    RBRACK          reduce using rule 245 (expr -> expr TIMES expr .)
    if              reduce using rule 245 (expr -> expr TIMES expr .)
    unless          reduce using rule 245 (expr -> expr TIMES expr .)
    as              reduce using rule 245 (expr -> expr TIMES expr .)
    rotated         reduce using rule 245 (expr -> expr TIMES expr .)
    facing          reduce using rule 245 (expr -> expr TIMES expr .)
    align           reduce using rule 245 (expr -> expr TIMES expr .)
    at              reduce using rule 245 (expr -> expr TIMES expr .)
    in              reduce using rule 245 (expr -> expr TIMES expr .)
    do              reduce using rule 245 (expr -> expr TIMES expr .)
    then            reduce using rule 245 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 245 (expr -> expr TIMES expr .)
    COMMENT         reduce using rule 245 (expr -> expr TIMES expr .)
    GT              reduce using rule 245 (expr -> expr TIMES expr .)
    to              reduce using rule 245 (expr -> expr TIMES expr .)
    by              reduce using rule 245 (expr -> expr TIMES expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 245 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 100

    (272) vector_expr -> expr PLUS vector_expr .
    (251) expr -> vector_expr . TIMES vector_expr
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr

    PLUS            reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    MINUS           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    POWER           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    $end            reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    COMMA           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    RPAREN          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    RBRACK          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    if              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    unless          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    as              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    rotated         reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    facing          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    align           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    at              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    in              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    do              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    then            reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    NEWLINE         reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    COMMENT         reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    GT              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    to              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    by              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45

  ! TIMES           [ reduce using rule 272 (vector_expr -> expr PLUS vector_expr .) ]
  ! DIVIDE          [ reduce using rule 272 (vector_expr -> expr PLUS vector_expr .) ]
  ! MOD             [ reduce using rule 272 (vector_expr -> expr PLUS vector_expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 101

    (243) expr -> expr PLUS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    PLUS            reduce using rule 243 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 243 (expr -> expr PLUS expr .)
    $end            reduce using rule 243 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 243 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 243 (expr -> expr PLUS expr .)
    RBRACK          reduce using rule 243 (expr -> expr PLUS expr .)
    if              reduce using rule 243 (expr -> expr PLUS expr .)
    unless          reduce using rule 243 (expr -> expr PLUS expr .)
    as              reduce using rule 243 (expr -> expr PLUS expr .)
    rotated         reduce using rule 243 (expr -> expr PLUS expr .)
    facing          reduce using rule 243 (expr -> expr PLUS expr .)
    align           reduce using rule 243 (expr -> expr PLUS expr .)
    at              reduce using rule 243 (expr -> expr PLUS expr .)
    in              reduce using rule 243 (expr -> expr PLUS expr .)
    do              reduce using rule 243 (expr -> expr PLUS expr .)
    then            reduce using rule 243 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 243 (expr -> expr PLUS expr .)
    COMMENT         reduce using rule 243 (expr -> expr PLUS expr .)
    GT              reduce using rule 243 (expr -> expr PLUS expr .)
    to              reduce using rule 243 (expr -> expr PLUS expr .)
    by              reduce using rule 243 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48

  ! TIMES           [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]


state 102

    (244) expr -> expr MINUS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    PLUS            reduce using rule 244 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 244 (expr -> expr MINUS expr .)
    $end            reduce using rule 244 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 244 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 244 (expr -> expr MINUS expr .)
    RBRACK          reduce using rule 244 (expr -> expr MINUS expr .)
    if              reduce using rule 244 (expr -> expr MINUS expr .)
    unless          reduce using rule 244 (expr -> expr MINUS expr .)
    as              reduce using rule 244 (expr -> expr MINUS expr .)
    rotated         reduce using rule 244 (expr -> expr MINUS expr .)
    facing          reduce using rule 244 (expr -> expr MINUS expr .)
    align           reduce using rule 244 (expr -> expr MINUS expr .)
    at              reduce using rule 244 (expr -> expr MINUS expr .)
    in              reduce using rule 244 (expr -> expr MINUS expr .)
    do              reduce using rule 244 (expr -> expr MINUS expr .)
    then            reduce using rule 244 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 244 (expr -> expr MINUS expr .)
    COMMENT         reduce using rule 244 (expr -> expr MINUS expr .)
    GT              reduce using rule 244 (expr -> expr MINUS expr .)
    to              reduce using rule 244 (expr -> expr MINUS expr .)
    by              reduce using rule 244 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48

  ! TIMES           [ reduce using rule 244 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 244 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 244 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 244 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]


state 103

    (247) expr -> expr MOD expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    PLUS            reduce using rule 247 (expr -> expr MOD expr .)
    MINUS           reduce using rule 247 (expr -> expr MOD expr .)
    TIMES           reduce using rule 247 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 247 (expr -> expr MOD expr .)
    MOD             reduce using rule 247 (expr -> expr MOD expr .)
    $end            reduce using rule 247 (expr -> expr MOD expr .)
    COMMA           reduce using rule 247 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 247 (expr -> expr MOD expr .)
    RBRACK          reduce using rule 247 (expr -> expr MOD expr .)
    if              reduce using rule 247 (expr -> expr MOD expr .)
    unless          reduce using rule 247 (expr -> expr MOD expr .)
    as              reduce using rule 247 (expr -> expr MOD expr .)
    rotated         reduce using rule 247 (expr -> expr MOD expr .)
    facing          reduce using rule 247 (expr -> expr MOD expr .)
    align           reduce using rule 247 (expr -> expr MOD expr .)
    at              reduce using rule 247 (expr -> expr MOD expr .)
    in              reduce using rule 247 (expr -> expr MOD expr .)
    do              reduce using rule 247 (expr -> expr MOD expr .)
    then            reduce using rule 247 (expr -> expr MOD expr .)
    NEWLINE         reduce using rule 247 (expr -> expr MOD expr .)
    COMMENT         reduce using rule 247 (expr -> expr MOD expr .)
    GT              reduce using rule 247 (expr -> expr MOD expr .)
    to              reduce using rule 247 (expr -> expr MOD expr .)
    by              reduce using rule 247 (expr -> expr MOD expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 247 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 104

    (3) program -> optcomments dir PYTHON newlines . optdesc optscale optassignments sections
    (4) optdesc -> . desc PYTHON newlines
    (5) optdesc -> . empty
    (290) empty -> .

    desc            shift and go to state 139
    scale           reduce using rule 290 (empty -> .)
    COMMENT         reduce using rule 290 (empty -> .)
    DOLLAR          reduce using rule 290 (empty -> .)
    ATID            reduce using rule 290 (empty -> .)
    define          reduce using rule 290 (empty -> .)
    array           reduce using rule 290 (empty -> .)
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

    optdesc                        shift and go to state 140
    empty                          shift and go to state 138

state 105

    (262) vector_expr -> LT expr COMMA expr . COMMA expr GT
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMA           shift and go to state 141
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 106

    (276) vector_expr -> here LPAREN virtualnumber RPAREN .

    TIMES           reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    PLUS            reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    MINUS           reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    DIVIDE          reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    MOD             reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    RPAREN          reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    POWER           reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    $end            reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    COMMA           reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    RBRACK          reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    if              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    unless          reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    as              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    rotated         reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    facing          reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    align           reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    at              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    in              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    do              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    then            reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    NEWLINE         reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    COMMENT         reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    GT              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    to              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)
    by              reduce using rule 276 (vector_expr -> here LPAREN virtualnumber RPAREN .)


state 107

    (154) virtualnumber -> DOLLAR ID .

    RPAREN          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    DOLLAR          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    INTEGER         reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    HEX             reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    BINARY          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    MINUS           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    FLOAT           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    TILDE           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    TILDEEMPTY      reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    COMMA           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    GT              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    NEWLINE         reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    if              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    unless          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    as              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    rotated         reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    facing          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    align           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    at              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    in              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    do              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    then            reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    COMMENT         reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    ID              reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    POWER           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    POWEREMPTY      reduce using rule 154 (virtualnumber -> DOLLAR ID .)


state 108

    (148) number -> MINUS INTEGER .

    DOLLAR          reduce using rule 148 (number -> MINUS INTEGER .)
    INTEGER         reduce using rule 148 (number -> MINUS INTEGER .)
    HEX             reduce using rule 148 (number -> MINUS INTEGER .)
    BINARY          reduce using rule 148 (number -> MINUS INTEGER .)
    MINUS           reduce using rule 148 (number -> MINUS INTEGER .)
    FLOAT           reduce using rule 148 (number -> MINUS INTEGER .)
    TILDE           reduce using rule 148 (number -> MINUS INTEGER .)
    TILDEEMPTY      reduce using rule 148 (number -> MINUS INTEGER .)
    NEWLINE         reduce using rule 148 (number -> MINUS INTEGER .)
    COMMA           reduce using rule 148 (number -> MINUS INTEGER .)
    GT              reduce using rule 148 (number -> MINUS INTEGER .)
    RPAREN          reduce using rule 148 (number -> MINUS INTEGER .)
    if              reduce using rule 148 (number -> MINUS INTEGER .)
    unless          reduce using rule 148 (number -> MINUS INTEGER .)
    as              reduce using rule 148 (number -> MINUS INTEGER .)
    rotated         reduce using rule 148 (number -> MINUS INTEGER .)
    facing          reduce using rule 148 (number -> MINUS INTEGER .)
    align           reduce using rule 148 (number -> MINUS INTEGER .)
    at              reduce using rule 148 (number -> MINUS INTEGER .)
    in              reduce using rule 148 (number -> MINUS INTEGER .)
    do              reduce using rule 148 (number -> MINUS INTEGER .)
    then            reduce using rule 148 (number -> MINUS INTEGER .)
    COMMENT         reduce using rule 148 (number -> MINUS INTEGER .)
    ID              reduce using rule 148 (number -> MINUS INTEGER .)
    POWER           reduce using rule 148 (number -> MINUS INTEGER .)
    POWEREMPTY      reduce using rule 148 (number -> MINUS INTEGER .)


state 109

    (152) number -> MINUS FLOAT .

    DOLLAR          reduce using rule 152 (number -> MINUS FLOAT .)
    INTEGER         reduce using rule 152 (number -> MINUS FLOAT .)
    HEX             reduce using rule 152 (number -> MINUS FLOAT .)
    BINARY          reduce using rule 152 (number -> MINUS FLOAT .)
    MINUS           reduce using rule 152 (number -> MINUS FLOAT .)
    FLOAT           reduce using rule 152 (number -> MINUS FLOAT .)
    TILDE           reduce using rule 152 (number -> MINUS FLOAT .)
    TILDEEMPTY      reduce using rule 152 (number -> MINUS FLOAT .)
    NEWLINE         reduce using rule 152 (number -> MINUS FLOAT .)
    COMMA           reduce using rule 152 (number -> MINUS FLOAT .)
    GT              reduce using rule 152 (number -> MINUS FLOAT .)
    RPAREN          reduce using rule 152 (number -> MINUS FLOAT .)
    if              reduce using rule 152 (number -> MINUS FLOAT .)
    unless          reduce using rule 152 (number -> MINUS FLOAT .)
    as              reduce using rule 152 (number -> MINUS FLOAT .)
    rotated         reduce using rule 152 (number -> MINUS FLOAT .)
    facing          reduce using rule 152 (number -> MINUS FLOAT .)
    align           reduce using rule 152 (number -> MINUS FLOAT .)
    at              reduce using rule 152 (number -> MINUS FLOAT .)
    in              reduce using rule 152 (number -> MINUS FLOAT .)
    do              reduce using rule 152 (number -> MINUS FLOAT .)
    then            reduce using rule 152 (number -> MINUS FLOAT .)
    COMMENT         reduce using rule 152 (number -> MINUS FLOAT .)
    ID              reduce using rule 152 (number -> MINUS FLOAT .)
    POWER           reduce using rule 152 (number -> MINUS FLOAT .)
    POWEREMPTY      reduce using rule 152 (number -> MINUS FLOAT .)


state 110

    (149) number -> MINUS HEX .

    DOLLAR          reduce using rule 149 (number -> MINUS HEX .)
    INTEGER         reduce using rule 149 (number -> MINUS HEX .)
    HEX             reduce using rule 149 (number -> MINUS HEX .)
    BINARY          reduce using rule 149 (number -> MINUS HEX .)
    MINUS           reduce using rule 149 (number -> MINUS HEX .)
    FLOAT           reduce using rule 149 (number -> MINUS HEX .)
    TILDE           reduce using rule 149 (number -> MINUS HEX .)
    TILDEEMPTY      reduce using rule 149 (number -> MINUS HEX .)
    NEWLINE         reduce using rule 149 (number -> MINUS HEX .)
    COMMA           reduce using rule 149 (number -> MINUS HEX .)
    GT              reduce using rule 149 (number -> MINUS HEX .)
    RPAREN          reduce using rule 149 (number -> MINUS HEX .)
    if              reduce using rule 149 (number -> MINUS HEX .)
    unless          reduce using rule 149 (number -> MINUS HEX .)
    as              reduce using rule 149 (number -> MINUS HEX .)
    rotated         reduce using rule 149 (number -> MINUS HEX .)
    facing          reduce using rule 149 (number -> MINUS HEX .)
    align           reduce using rule 149 (number -> MINUS HEX .)
    at              reduce using rule 149 (number -> MINUS HEX .)
    in              reduce using rule 149 (number -> MINUS HEX .)
    do              reduce using rule 149 (number -> MINUS HEX .)
    then            reduce using rule 149 (number -> MINUS HEX .)
    COMMENT         reduce using rule 149 (number -> MINUS HEX .)
    ID              reduce using rule 149 (number -> MINUS HEX .)
    POWER           reduce using rule 149 (number -> MINUS HEX .)
    POWEREMPTY      reduce using rule 149 (number -> MINUS HEX .)


state 111

    (150) number -> MINUS BINARY .

    DOLLAR          reduce using rule 150 (number -> MINUS BINARY .)
    INTEGER         reduce using rule 150 (number -> MINUS BINARY .)
    HEX             reduce using rule 150 (number -> MINUS BINARY .)
    BINARY          reduce using rule 150 (number -> MINUS BINARY .)
    MINUS           reduce using rule 150 (number -> MINUS BINARY .)
    FLOAT           reduce using rule 150 (number -> MINUS BINARY .)
    TILDE           reduce using rule 150 (number -> MINUS BINARY .)
    TILDEEMPTY      reduce using rule 150 (number -> MINUS BINARY .)
    NEWLINE         reduce using rule 150 (number -> MINUS BINARY .)
    COMMA           reduce using rule 150 (number -> MINUS BINARY .)
    GT              reduce using rule 150 (number -> MINUS BINARY .)
    RPAREN          reduce using rule 150 (number -> MINUS BINARY .)
    if              reduce using rule 150 (number -> MINUS BINARY .)
    unless          reduce using rule 150 (number -> MINUS BINARY .)
    as              reduce using rule 150 (number -> MINUS BINARY .)
    rotated         reduce using rule 150 (number -> MINUS BINARY .)
    facing          reduce using rule 150 (number -> MINUS BINARY .)
    align           reduce using rule 150 (number -> MINUS BINARY .)
    at              reduce using rule 150 (number -> MINUS BINARY .)
    in              reduce using rule 150 (number -> MINUS BINARY .)
    do              reduce using rule 150 (number -> MINUS BINARY .)
    then            reduce using rule 150 (number -> MINUS BINARY .)
    COMMENT         reduce using rule 150 (number -> MINUS BINARY .)
    ID              reduce using rule 150 (number -> MINUS BINARY .)
    POWER           reduce using rule 150 (number -> MINUS BINARY .)
    POWEREMPTY      reduce using rule 150 (number -> MINUS BINARY .)


state 112

    (256) expr -> ID LBRACK expr RBRACK .

    PLUS            reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    MINUS           reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    TIMES           reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    DIVIDE          reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    MOD             reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    POWER           reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    $end            reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    COMMA           reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    RPAREN          reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    RBRACK          reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    if              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    unless          reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    as              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    rotated         reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    facing          reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    align           reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    at              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    in              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    do              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    then            reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    NEWLINE         reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    COMMENT         reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    GT              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    to              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)
    by              reduce using rule 256 (expr -> ID LBRACK expr RBRACK .)


state 113

    (255) expr -> ID LBRACK virtualinteger RBRACK .

    PLUS            reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    MINUS           reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    TIMES           reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    DIVIDE          reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    MOD             reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    POWER           reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    $end            reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    COMMA           reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    RPAREN          reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    RBRACK          reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    if              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    unless          reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    as              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    rotated         reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    facing          reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    align           reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    at              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    in              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    do              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    then            reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    NEWLINE         reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    COMMENT         reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    GT              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    to              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)
    by              reduce using rule 255 (expr -> ID LBRACK virtualinteger RBRACK .)


state 114

    (277) function_call -> ID LPAREN exprlist RPAREN .

    PLUS            reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    MOD             reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    POWER           reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    COMMENT         reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    NEWLINE         reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    $end            reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    RBRACK          reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    if              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    unless          reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    as              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    rotated         reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    facing          reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    align           reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    at              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    in              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    do              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    then            reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    to              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)
    by              reduce using rule 277 (function_call -> ID LPAREN exprlist RPAREN .)


state 115

    (279) exprlist -> exprlist COMMA . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 142
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 116

    (190) qualifiers -> qualifiers and . qualifier
    (193) qualifier -> . virtualinteger
    (194) qualifier -> . ID EQUALS virtualinteger
    (195) qualifier -> . ID EQUALS ID
    (196) qualifier -> . ID EQUALEQUAL virtualinteger
    (197) qualifier -> . ID GEQ virtualinteger
    (198) qualifier -> . ID LEQ virtualinteger
    (199) qualifier -> . ID GT virtualinteger
    (200) qualifier -> . ID LT virtualinteger
    (201) qualifier -> . ID EQUALS virtualinteger DOT DOT virtualinteger
    (202) qualifier -> . ID EQUALS DOT DOT virtualinteger
    (203) qualifier -> . ID EQUALS virtualinteger DOT DOT
    (204) qualifier -> . ID EQUALS
    (205) qualifier -> . ID EQUALS NOT ID
    (206) qualifier -> . ID
    (207) qualifier -> . not ID
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    ID              shift and go to state 79
    not             shift and go to state 78
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 80
    qualifier                      shift and go to state 143

state 117

    (209) fullselector -> ATID LBRACK qualifiers RBRACK .

    DOT             reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    EQUALEQUAL      reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    and             reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    if              reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    unless          reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    as              reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    rotated         reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    facing          reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    align           reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    at              reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    in              reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    do              reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    then            reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    NEWLINE         reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    COMMENT         reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    PYTHON          reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    INTEGER         reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    HEX             reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    BINARY          reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    MINUS           reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    DOLLAR          reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    TILDE           reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    TILDEEMPTY      reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    POWER           reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    POWEREMPTY      reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)
    FLOAT           reduce using rule 209 (fullselector -> ATID LBRACK qualifiers RBRACK .)


state 118

    (189) qualifiers -> qualifiers COMMA . qualifier
    (193) qualifier -> . virtualinteger
    (194) qualifier -> . ID EQUALS virtualinteger
    (195) qualifier -> . ID EQUALS ID
    (196) qualifier -> . ID EQUALEQUAL virtualinteger
    (197) qualifier -> . ID GEQ virtualinteger
    (198) qualifier -> . ID LEQ virtualinteger
    (199) qualifier -> . ID GT virtualinteger
    (200) qualifier -> . ID LT virtualinteger
    (201) qualifier -> . ID EQUALS virtualinteger DOT DOT virtualinteger
    (202) qualifier -> . ID EQUALS DOT DOT virtualinteger
    (203) qualifier -> . ID EQUALS virtualinteger DOT DOT
    (204) qualifier -> . ID EQUALS
    (205) qualifier -> . ID EQUALS NOT ID
    (206) qualifier -> . ID
    (207) qualifier -> . not ID
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    ID              shift and go to state 79
    not             shift and go to state 78
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 80
    qualifier                      shift and go to state 144

state 119

    (158) virtualinteger -> MINUS INTEGER .

    RBRACK          reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    COMMA           reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    and             reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    NEWLINE         reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    if              reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    unless          reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    as              reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    rotated         reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    facing          reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    align           reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    at              reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    in              reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    do              reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    then            reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    PYTHON          reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    INTEGER         reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    HEX             reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    BINARY          reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    MINUS           reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    DOLLAR          reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    to              reduce using rule 158 (virtualinteger -> MINUS INTEGER .)
    DOT             reduce using rule 158 (virtualinteger -> MINUS INTEGER .)


state 120

    (159) virtualinteger -> MINUS HEX .

    RBRACK          reduce using rule 159 (virtualinteger -> MINUS HEX .)
    COMMA           reduce using rule 159 (virtualinteger -> MINUS HEX .)
    and             reduce using rule 159 (virtualinteger -> MINUS HEX .)
    NEWLINE         reduce using rule 159 (virtualinteger -> MINUS HEX .)
    if              reduce using rule 159 (virtualinteger -> MINUS HEX .)
    unless          reduce using rule 159 (virtualinteger -> MINUS HEX .)
    as              reduce using rule 159 (virtualinteger -> MINUS HEX .)
    rotated         reduce using rule 159 (virtualinteger -> MINUS HEX .)
    facing          reduce using rule 159 (virtualinteger -> MINUS HEX .)
    align           reduce using rule 159 (virtualinteger -> MINUS HEX .)
    at              reduce using rule 159 (virtualinteger -> MINUS HEX .)
    in              reduce using rule 159 (virtualinteger -> MINUS HEX .)
    do              reduce using rule 159 (virtualinteger -> MINUS HEX .)
    then            reduce using rule 159 (virtualinteger -> MINUS HEX .)
    PYTHON          reduce using rule 159 (virtualinteger -> MINUS HEX .)
    INTEGER         reduce using rule 159 (virtualinteger -> MINUS HEX .)
    HEX             reduce using rule 159 (virtualinteger -> MINUS HEX .)
    BINARY          reduce using rule 159 (virtualinteger -> MINUS HEX .)
    MINUS           reduce using rule 159 (virtualinteger -> MINUS HEX .)
    DOLLAR          reduce using rule 159 (virtualinteger -> MINUS HEX .)
    to              reduce using rule 159 (virtualinteger -> MINUS HEX .)
    DOT             reduce using rule 159 (virtualinteger -> MINUS HEX .)


state 121

    (160) virtualinteger -> MINUS BINARY .

    RBRACK          reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    COMMA           reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    and             reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    NEWLINE         reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    if              reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    unless          reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    as              reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    rotated         reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    facing          reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    align           reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    at              reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    in              reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    do              reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    then            reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    PYTHON          reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    INTEGER         reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    HEX             reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    BINARY          reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    MINUS           reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    DOLLAR          reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    to              reduce using rule 160 (virtualinteger -> MINUS BINARY .)
    DOT             reduce using rule 160 (virtualinteger -> MINUS BINARY .)


state 122

    (207) qualifier -> not ID .

    RBRACK          reduce using rule 207 (qualifier -> not ID .)
    COMMA           reduce using rule 207 (qualifier -> not ID .)
    and             reduce using rule 207 (qualifier -> not ID .)


state 123

    (197) qualifier -> ID GEQ . virtualinteger
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 145

state 124

    (199) qualifier -> ID GT . virtualinteger
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 146

state 125

    (194) qualifier -> ID EQUALS . virtualinteger
    (195) qualifier -> ID EQUALS . ID
    (201) qualifier -> ID EQUALS . virtualinteger DOT DOT virtualinteger
    (202) qualifier -> ID EQUALS . DOT DOT virtualinteger
    (203) qualifier -> ID EQUALS . virtualinteger DOT DOT
    (204) qualifier -> ID EQUALS .
    (205) qualifier -> ID EQUALS . NOT ID
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    ID              shift and go to state 149
    DOT             shift and go to state 150
    RBRACK          reduce using rule 204 (qualifier -> ID EQUALS .)
    COMMA           reduce using rule 204 (qualifier -> ID EQUALS .)
    and             reduce using rule 204 (qualifier -> ID EQUALS .)
    NOT             shift and go to state 148
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 147

state 126

    (198) qualifier -> ID LEQ . virtualinteger
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 151

state 127

    (200) qualifier -> ID LT . virtualinteger
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 152

state 128

    (196) qualifier -> ID EQUALEQUAL . virtualinteger
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 153

state 129

    (274) vector_expr -> MINUS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    RPAREN          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    PLUS            reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    MINUS           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    POWER           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    $end            reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    COMMA           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    RBRACK          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    if              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    unless          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    as              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    rotated         reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    facing          reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    align           reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    at              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    in              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    do              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    then            reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    NEWLINE         reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    COMMENT         reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    GT              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    to              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    by              reduce using rule 274 (vector_expr -> MINUS vector_expr .)
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45

  ! TIMES           [ reduce using rule 274 (vector_expr -> MINUS vector_expr .) ]
  ! DIVIDE          [ reduce using rule 274 (vector_expr -> MINUS vector_expr .) ]
  ! MOD             [ reduce using rule 274 (vector_expr -> MINUS vector_expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 130

    (260) expr -> MINUS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    PLUS            reduce using rule 260 (expr -> MINUS expr .)
    MINUS           reduce using rule 260 (expr -> MINUS expr .)
    TIMES           reduce using rule 260 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 260 (expr -> MINUS expr .)
    MOD             reduce using rule 260 (expr -> MINUS expr .)
    POWER           reduce using rule 260 (expr -> MINUS expr .)
    $end            reduce using rule 260 (expr -> MINUS expr .)
    COMMA           reduce using rule 260 (expr -> MINUS expr .)
    RPAREN          reduce using rule 260 (expr -> MINUS expr .)
    RBRACK          reduce using rule 260 (expr -> MINUS expr .)
    if              reduce using rule 260 (expr -> MINUS expr .)
    unless          reduce using rule 260 (expr -> MINUS expr .)
    as              reduce using rule 260 (expr -> MINUS expr .)
    rotated         reduce using rule 260 (expr -> MINUS expr .)
    facing          reduce using rule 260 (expr -> MINUS expr .)
    align           reduce using rule 260 (expr -> MINUS expr .)
    at              reduce using rule 260 (expr -> MINUS expr .)
    in              reduce using rule 260 (expr -> MINUS expr .)
    do              reduce using rule 260 (expr -> MINUS expr .)
    then            reduce using rule 260 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 260 (expr -> MINUS expr .)
    COMMENT         reduce using rule 260 (expr -> MINUS expr .)
    GT              reduce using rule 260 (expr -> MINUS expr .)
    to              reduce using rule 260 (expr -> MINUS expr .)
    by              reduce using rule 260 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 136 ]
  ! TIMES           [ shift and go to state 135 ]
  ! MINUS           [ shift and go to state 51 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]
  ! POWER           [ shift and go to state 48 ]


state 131

    (269) vector_expr -> vector_expr TIMES . expr
    (251) expr -> vector_expr TIMES . vector_expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 154
    fullselector                   shift and go to state 19
    expr                           shift and go to state 155
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 132

    (261) vector_expr -> LPAREN vector_expr . RPAREN
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 133

    (259) expr -> LPAREN expr . RPAREN
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    RPAREN          shift and go to state 67
    PLUS            shift and go to state 136
    TIMES           shift and go to state 135
    MINUS           shift and go to state 51
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 134

    (264) vector_expr -> fullselector DOT . LT ID GT
    (257) expr -> fullselector DOT . ID

    LT              shift and go to state 92
    ID              shift and go to state 93


state 135

    (273) vector_expr -> expr TIMES . vector_expr
    (245) expr -> expr TIMES . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 156
    fullselector                   shift and go to state 85
    expr                           shift and go to state 157
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 136

    (272) vector_expr -> expr PLUS . vector_expr
    (243) expr -> expr PLUS . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 158
    fullselector                   shift and go to state 85
    expr                           shift and go to state 159
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 137

    (264) vector_expr -> fullselector DOT LT ID . GT

    GT              shift and go to state 160


state 138

    (5) optdesc -> empty .

    scale           reduce using rule 5 (optdesc -> empty .)
    COMMENT         reduce using rule 5 (optdesc -> empty .)
    DOLLAR          reduce using rule 5 (optdesc -> empty .)
    ATID            reduce using rule 5 (optdesc -> empty .)
    define          reduce using rule 5 (optdesc -> empty .)
    array           reduce using rule 5 (optdesc -> empty .)
    clock           reduce using rule 5 (optdesc -> empty .)
    function        reduce using rule 5 (optdesc -> empty .)
    reset           reduce using rule 5 (optdesc -> empty .)
    macro           reduce using rule 5 (optdesc -> empty .)
    $end            reduce using rule 5 (optdesc -> empty .)


state 139

    (4) optdesc -> desc . PYTHON newlines

    PYTHON          shift and go to state 161


state 140

    (3) program -> optcomments dir PYTHON newlines optdesc . optscale optassignments sections
    (6) optscale -> . scale PYTHON newlines
    (7) optscale -> . empty
    (290) empty -> .

    scale           shift and go to state 162
    COMMENT         reduce using rule 290 (empty -> .)
    DOLLAR          reduce using rule 290 (empty -> .)
    ATID            reduce using rule 290 (empty -> .)
    define          reduce using rule 290 (empty -> .)
    array           reduce using rule 290 (empty -> .)
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

    optscale                       shift and go to state 164
    empty                          shift and go to state 163

state 141

    (262) vector_expr -> LT expr COMMA expr COMMA . expr GT
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 165
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 142

    (279) exprlist -> exprlist COMMA expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    RPAREN          reduce using rule 279 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 279 (exprlist -> exprlist COMMA expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 143

    (190) qualifiers -> qualifiers and qualifier .

    RBRACK          reduce using rule 190 (qualifiers -> qualifiers and qualifier .)
    COMMA           reduce using rule 190 (qualifiers -> qualifiers and qualifier .)
    and             reduce using rule 190 (qualifiers -> qualifiers and qualifier .)


state 144

    (189) qualifiers -> qualifiers COMMA qualifier .

    RBRACK          reduce using rule 189 (qualifiers -> qualifiers COMMA qualifier .)
    COMMA           reduce using rule 189 (qualifiers -> qualifiers COMMA qualifier .)
    and             reduce using rule 189 (qualifiers -> qualifiers COMMA qualifier .)


state 145

    (197) qualifier -> ID GEQ virtualinteger .

    RBRACK          reduce using rule 197 (qualifier -> ID GEQ virtualinteger .)
    COMMA           reduce using rule 197 (qualifier -> ID GEQ virtualinteger .)
    and             reduce using rule 197 (qualifier -> ID GEQ virtualinteger .)


state 146

    (199) qualifier -> ID GT virtualinteger .

    RBRACK          reduce using rule 199 (qualifier -> ID GT virtualinteger .)
    COMMA           reduce using rule 199 (qualifier -> ID GT virtualinteger .)
    and             reduce using rule 199 (qualifier -> ID GT virtualinteger .)


state 147

    (194) qualifier -> ID EQUALS virtualinteger .
    (201) qualifier -> ID EQUALS virtualinteger . DOT DOT virtualinteger
    (203) qualifier -> ID EQUALS virtualinteger . DOT DOT

    RBRACK          reduce using rule 194 (qualifier -> ID EQUALS virtualinteger .)
    COMMA           reduce using rule 194 (qualifier -> ID EQUALS virtualinteger .)
    and             reduce using rule 194 (qualifier -> ID EQUALS virtualinteger .)
    DOT             shift and go to state 166


state 148

    (205) qualifier -> ID EQUALS NOT . ID

    ID              shift and go to state 167


state 149

    (195) qualifier -> ID EQUALS ID .

    RBRACK          reduce using rule 195 (qualifier -> ID EQUALS ID .)
    COMMA           reduce using rule 195 (qualifier -> ID EQUALS ID .)
    and             reduce using rule 195 (qualifier -> ID EQUALS ID .)


state 150

    (202) qualifier -> ID EQUALS DOT . DOT virtualinteger

    DOT             shift and go to state 168


state 151

    (198) qualifier -> ID LEQ virtualinteger .

    RBRACK          reduce using rule 198 (qualifier -> ID LEQ virtualinteger .)
    COMMA           reduce using rule 198 (qualifier -> ID LEQ virtualinteger .)
    and             reduce using rule 198 (qualifier -> ID LEQ virtualinteger .)


state 152

    (200) qualifier -> ID LT virtualinteger .

    RBRACK          reduce using rule 200 (qualifier -> ID LT virtualinteger .)
    COMMA           reduce using rule 200 (qualifier -> ID LT virtualinteger .)
    and             reduce using rule 200 (qualifier -> ID LT virtualinteger .)


state 153

    (196) qualifier -> ID EQUALEQUAL virtualinteger .

    RBRACK          reduce using rule 196 (qualifier -> ID EQUALEQUAL virtualinteger .)
    COMMA           reduce using rule 196 (qualifier -> ID EQUALEQUAL virtualinteger .)
    and             reduce using rule 196 (qualifier -> ID EQUALEQUAL virtualinteger .)


state 154

    (251) expr -> vector_expr TIMES vector_expr .
    (251) expr -> vector_expr . TIMES vector_expr
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr

    PLUS            reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    MINUS           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    TIMES           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    DIVIDE          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    MOD             reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    POWER           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    $end            reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    COMMA           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    RPAREN          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    RBRACK          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    if              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    unless          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    as              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    rotated         reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    facing          reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    align           reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    at              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    in              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    do              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    then            reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    NEWLINE         reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    COMMENT         reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    GT              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    to              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)
    by              reduce using rule 251 (expr -> vector_expr TIMES vector_expr .)

  ! TIMES           [ shift and go to state 42 ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 45 ]


state 155

    (269) vector_expr -> vector_expr TIMES expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    RPAREN          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    PLUS            reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    MINUS           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    TIMES           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    DIVIDE          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    MOD             reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    $end            reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    COMMA           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    RBRACK          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    if              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    unless          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    as              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    rotated         reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    facing          reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    align           reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    at              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    in              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    do              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    then            reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    NEWLINE         reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    COMMENT         reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    GT              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    to              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    by              reduce using rule 269 (vector_expr -> vector_expr TIMES expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 269 (vector_expr -> vector_expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 156

    (273) vector_expr -> expr TIMES vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    RPAREN          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    PLUS            reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    MINUS           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    TIMES           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    DIVIDE          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    MOD             reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    POWER           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    $end            reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    COMMA           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    RBRACK          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    if              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    unless          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    as              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    rotated         reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    facing          reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    align           reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    at              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    in              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    do              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    then            reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    NEWLINE         reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    COMMENT         reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    GT              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    to              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)
    by              reduce using rule 273 (vector_expr -> expr TIMES vector_expr .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! TIMES           [ shift and go to state 131 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 45 ]


state 157

    (245) expr -> expr TIMES expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    PLUS            reduce using rule 245 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 245 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 245 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 245 (expr -> expr TIMES expr .)
    MOD             reduce using rule 245 (expr -> expr TIMES expr .)
    $end            reduce using rule 245 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 245 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 245 (expr -> expr TIMES expr .)
    RBRACK          reduce using rule 245 (expr -> expr TIMES expr .)
    if              reduce using rule 245 (expr -> expr TIMES expr .)
    unless          reduce using rule 245 (expr -> expr TIMES expr .)
    as              reduce using rule 245 (expr -> expr TIMES expr .)
    rotated         reduce using rule 245 (expr -> expr TIMES expr .)
    facing          reduce using rule 245 (expr -> expr TIMES expr .)
    align           reduce using rule 245 (expr -> expr TIMES expr .)
    at              reduce using rule 245 (expr -> expr TIMES expr .)
    in              reduce using rule 245 (expr -> expr TIMES expr .)
    do              reduce using rule 245 (expr -> expr TIMES expr .)
    then            reduce using rule 245 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 245 (expr -> expr TIMES expr .)
    COMMENT         reduce using rule 245 (expr -> expr TIMES expr .)
    GT              reduce using rule 245 (expr -> expr TIMES expr .)
    to              reduce using rule 245 (expr -> expr TIMES expr .)
    by              reduce using rule 245 (expr -> expr TIMES expr .)
    POWER           shift and go to state 48

  ! POWER           [ reduce using rule 245 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! TIMES           [ shift and go to state 135 ]
  ! MINUS           [ shift and go to state 51 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 52 ]


state 158

    (272) vector_expr -> expr PLUS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    RPAREN          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    PLUS            reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    MINUS           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    POWER           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    $end            reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    COMMA           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    RBRACK          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    if              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    unless          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    as              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    rotated         reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    facing          reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    align           reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    at              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    in              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    do              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    then            reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    NEWLINE         reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    COMMENT         reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    GT              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    to              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    by              reduce using rule 272 (vector_expr -> expr PLUS vector_expr .)
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45

  ! TIMES           [ reduce using rule 272 (vector_expr -> expr PLUS vector_expr .) ]
  ! DIVIDE          [ reduce using rule 272 (vector_expr -> expr PLUS vector_expr .) ]
  ! MOD             [ reduce using rule 272 (vector_expr -> expr PLUS vector_expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 159

    (243) expr -> expr PLUS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    PLUS            reduce using rule 243 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 243 (expr -> expr PLUS expr .)
    $end            reduce using rule 243 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 243 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 243 (expr -> expr PLUS expr .)
    RBRACK          reduce using rule 243 (expr -> expr PLUS expr .)
    if              reduce using rule 243 (expr -> expr PLUS expr .)
    unless          reduce using rule 243 (expr -> expr PLUS expr .)
    as              reduce using rule 243 (expr -> expr PLUS expr .)
    rotated         reduce using rule 243 (expr -> expr PLUS expr .)
    facing          reduce using rule 243 (expr -> expr PLUS expr .)
    align           reduce using rule 243 (expr -> expr PLUS expr .)
    at              reduce using rule 243 (expr -> expr PLUS expr .)
    in              reduce using rule 243 (expr -> expr PLUS expr .)
    do              reduce using rule 243 (expr -> expr PLUS expr .)
    then            reduce using rule 243 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 243 (expr -> expr PLUS expr .)
    COMMENT         reduce using rule 243 (expr -> expr PLUS expr .)
    GT              reduce using rule 243 (expr -> expr PLUS expr .)
    to              reduce using rule 243 (expr -> expr PLUS expr .)
    by              reduce using rule 243 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 135
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48

  ! TIMES           [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 243 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 51 ]


state 160

    (264) vector_expr -> fullselector DOT LT ID GT .

    TIMES           reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    PLUS            reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    MINUS           reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    DIVIDE          reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    MOD             reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    RPAREN          reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    POWER           reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    $end            reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    COMMA           reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    RBRACK          reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    if              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    unless          reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    as              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    rotated         reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    facing          reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    align           reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    at              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    in              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    do              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    then            reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    NEWLINE         reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    COMMENT         reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    GT              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    to              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)
    by              reduce using rule 264 (vector_expr -> fullselector DOT LT ID GT .)


state 161

    (4) optdesc -> desc PYTHON . newlines
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 169

state 162

    (6) optscale -> scale . PYTHON newlines

    PYTHON          shift and go to state 170


state 163

    (7) optscale -> empty .

    COMMENT         reduce using rule 7 (optscale -> empty .)
    DOLLAR          reduce using rule 7 (optscale -> empty .)
    ATID            reduce using rule 7 (optscale -> empty .)
    define          reduce using rule 7 (optscale -> empty .)
    array           reduce using rule 7 (optscale -> empty .)
    clock           reduce using rule 7 (optscale -> empty .)
    function        reduce using rule 7 (optscale -> empty .)
    reset           reduce using rule 7 (optscale -> empty .)
    macro           reduce using rule 7 (optscale -> empty .)
    $end            reduce using rule 7 (optscale -> empty .)


state 164

    (3) program -> optcomments dir PYTHON newlines optdesc optscale . optassignments sections
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    blocktag                       shift and go to state 174
    array_definition               shift and go to state 179
    selectorassignment             shift and go to state 171
    optassignments                 shift and go to state 182
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 165

    (262) vector_expr -> LT expr COMMA expr COMMA expr . GT
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    GT              shift and go to state 183
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 166

    (201) qualifier -> ID EQUALS virtualinteger DOT . DOT virtualinteger
    (203) qualifier -> ID EQUALS virtualinteger DOT . DOT

    DOT             shift and go to state 184


state 167

    (205) qualifier -> ID EQUALS NOT ID .

    RBRACK          reduce using rule 205 (qualifier -> ID EQUALS NOT ID .)
    COMMA           reduce using rule 205 (qualifier -> ID EQUALS NOT ID .)
    and             reduce using rule 205 (qualifier -> ID EQUALS NOT ID .)


state 168

    (202) qualifier -> ID EQUALS DOT DOT . virtualinteger
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 185

state 169

    (4) optdesc -> desc PYTHON newlines .

    scale           reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    COMMENT         reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    DOLLAR          reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    ATID            reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    define          reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    array           reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    clock           reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    function        reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    reset           reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    macro           reduce using rule 4 (optdesc -> desc PYTHON newlines .)
    $end            reduce using rule 4 (optdesc -> desc PYTHON newlines .)


state 170

    (6) optscale -> scale PYTHON . newlines
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 186

state 171

    (36) optassignments -> selectorassignment . newlines optassignments
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 187

state 172

    (184) array_definition -> array . ID LBRACK virtualinteger RBRACK
    (185) array_definition -> array . ID LBRACK virtualinteger to virtualinteger RBRACK

    ID              shift and go to state 188


state 173

    (37) optassignments -> selector_define_block . newlines optassignments
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 189

state 174

    (38) optassignments -> blocktag . newlines optassignments
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 190

state 175

    (35) optassignments -> pythonassignment . newlines optassignments
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 191

state 176

    (41) optassignments -> empty .

    COMMENT         reduce using rule 41 (optassignments -> empty .)
    clock           reduce using rule 41 (optassignments -> empty .)
    function        reduce using rule 41 (optassignments -> empty .)
    reset           reduce using rule 41 (optassignments -> empty .)
    macro           reduce using rule 41 (optassignments -> empty .)
    $end            reduce using rule 41 (optassignments -> empty .)


state 177

    (166) selector_define_block -> define . ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> define . block ID newlines block_list end

    ATID            shift and go to state 192
    block           shift and go to state 193


state 178

    (40) optassignments -> COMMENT . newlines optassignments
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 194

state 179

    (39) optassignments -> array_definition . newlines optassignments
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 195

state 180

    (188) pythonassignment -> DOLLAR . ID PYTHON

    ID              shift and go to state 196


state 181

    (165) selectorassignment -> ATID . EQUALS fullselector

    EQUALS          shift and go to state 197


state 182

    (3) program -> optcomments dir PYTHON newlines optdesc optscale optassignments . sections
    (8) sections -> . section_commented newlines sections
    (9) sections -> . empty
    (10) section_commented -> . optcomments section
    (290) empty -> .
    (11) optcomments -> . COMMENT optnewlines optcomments
    (12) optcomments -> . empty

    $end            reduce using rule 290 (empty -> .)
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 4

    optcomments                    shift and go to state 198
    section_commented              shift and go to state 199
    sections                       shift and go to state 201
    empty                          shift and go to state 200

state 183

    (262) vector_expr -> LT expr COMMA expr COMMA expr GT .

    TIMES           reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    PLUS            reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    MINUS           reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    DIVIDE          reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    MOD             reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    RPAREN          reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    POWER           reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    $end            reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    COMMA           reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    RBRACK          reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    if              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    unless          reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    as              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    rotated         reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    facing          reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    align           reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    at              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    in              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    do              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    then            reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    NEWLINE         reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    COMMENT         reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    GT              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    to              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)
    by              reduce using rule 262 (vector_expr -> LT expr COMMA expr COMMA expr GT .)


state 184

    (201) qualifier -> ID EQUALS virtualinteger DOT DOT . virtualinteger
    (203) qualifier -> ID EQUALS virtualinteger DOT DOT .
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    RBRACK          reduce using rule 203 (qualifier -> ID EQUALS virtualinteger DOT DOT .)
    COMMA           reduce using rule 203 (qualifier -> ID EQUALS virtualinteger DOT DOT .)
    and             reduce using rule 203 (qualifier -> ID EQUALS virtualinteger DOT DOT .)
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 202

state 185

    (202) qualifier -> ID EQUALS DOT DOT virtualinteger .

    RBRACK          reduce using rule 202 (qualifier -> ID EQUALS DOT DOT virtualinteger .)
    COMMA           reduce using rule 202 (qualifier -> ID EQUALS DOT DOT virtualinteger .)
    and             reduce using rule 202 (qualifier -> ID EQUALS DOT DOT virtualinteger .)


state 186

    (6) optscale -> scale PYTHON newlines .

    COMMENT         reduce using rule 6 (optscale -> scale PYTHON newlines .)
    DOLLAR          reduce using rule 6 (optscale -> scale PYTHON newlines .)
    ATID            reduce using rule 6 (optscale -> scale PYTHON newlines .)
    define          reduce using rule 6 (optscale -> scale PYTHON newlines .)
    array           reduce using rule 6 (optscale -> scale PYTHON newlines .)
    clock           reduce using rule 6 (optscale -> scale PYTHON newlines .)
    function        reduce using rule 6 (optscale -> scale PYTHON newlines .)
    reset           reduce using rule 6 (optscale -> scale PYTHON newlines .)
    macro           reduce using rule 6 (optscale -> scale PYTHON newlines .)
    $end            reduce using rule 6 (optscale -> scale PYTHON newlines .)


state 187

    (36) optassignments -> selectorassignment newlines . optassignments
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    selectorassignment             shift and go to state 171
    blocktag                       shift and go to state 174
    array_definition               shift and go to state 179
    optassignments                 shift and go to state 203
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 188

    (184) array_definition -> array ID . LBRACK virtualinteger RBRACK
    (185) array_definition -> array ID . LBRACK virtualinteger to virtualinteger RBRACK

    LBRACK          shift and go to state 204


state 189

    (37) optassignments -> selector_define_block newlines . optassignments
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    selectorassignment             shift and go to state 171
    blocktag                       shift and go to state 174
    array_definition               shift and go to state 179
    optassignments                 shift and go to state 205
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 190

    (38) optassignments -> blocktag newlines . optassignments
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    selectorassignment             shift and go to state 171
    blocktag                       shift and go to state 174
    array_definition               shift and go to state 179
    optassignments                 shift and go to state 206
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 191

    (35) optassignments -> pythonassignment newlines . optassignments
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    selectorassignment             shift and go to state 171
    blocktag                       shift and go to state 174
    array_definition               shift and go to state 179
    optassignments                 shift and go to state 207
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 192

    (166) selector_define_block -> define ATID . EQUALS fullselector newlines selector_definition end

    EQUALS          shift and go to state 208


state 193

    (162) blocktag -> define block . ID newlines block_list end

    ID              shift and go to state 209


state 194

    (40) optassignments -> COMMENT newlines . optassignments
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    selectorassignment             shift and go to state 171
    blocktag                       shift and go to state 174
    array_definition               shift and go to state 179
    optassignments                 shift and go to state 210
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 195

    (39) optassignments -> array_definition newlines . optassignments
    (35) optassignments -> . pythonassignment newlines optassignments
    (36) optassignments -> . selectorassignment newlines optassignments
    (37) optassignments -> . selector_define_block newlines optassignments
    (38) optassignments -> . blocktag newlines optassignments
    (39) optassignments -> . array_definition newlines optassignments
    (40) optassignments -> . COMMENT newlines optassignments
    (41) optassignments -> . empty
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (165) selectorassignment -> . ATID EQUALS fullselector
    (166) selector_define_block -> . define ATID EQUALS fullselector newlines selector_definition end
    (162) blocktag -> . define block ID newlines block_list end
    (184) array_definition -> . array ID LBRACK virtualinteger RBRACK
    (185) array_definition -> . array ID LBRACK virtualinteger to virtualinteger RBRACK
    (290) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 178
    DOLLAR          shift and go to state 180
    ATID            shift and go to state 181
    define          shift and go to state 177
    array           shift and go to state 172
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    $end            reduce using rule 290 (empty -> .)

  ! COMMENT         [ reduce using rule 290 (empty -> .) ]

    selector_define_block          shift and go to state 173
    selectorassignment             shift and go to state 171
    array_definition               shift and go to state 179
    blocktag                       shift and go to state 174
    optassignments                 shift and go to state 211
    pythonassignment               shift and go to state 175
    empty                          shift and go to state 176

state 196

    (188) pythonassignment -> DOLLAR ID . PYTHON

    PYTHON          shift and go to state 212


state 197

    (165) selectorassignment -> ATID EQUALS . fullselector
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 213

state 198

    (10) section_commented -> optcomments . section
    (13) section -> . clocksection
    (14) section -> . functionsection
    (15) section -> . resetsection
    (16) section -> . macrosection
    (17) section -> . template_function_section
    (19) clocksection -> . clock ID newlines blocklist end
    (20) functionsection -> . function ID LPAREN id_list RPAREN newlines blocklist end
    (18) resetsection -> . reset newlines blocklist end
    (22) macrosection -> . macro DOLLAR ID macro_args newlines blocklist end
    (21) template_function_section -> . function ID LT macro_params GT LPAREN id_list RPAREN newlines blocklist end

    clock           shift and go to state 215
    function        shift and go to state 218
    reset           shift and go to state 221
    macro           shift and go to state 222

    section                        shift and go to state 216
    resetsection                   shift and go to state 219
    template_function_section      shift and go to state 217
    functionsection                shift and go to state 223
    macrosection                   shift and go to state 214
    clocksection                   shift and go to state 220

state 199

    (8) sections -> section_commented . newlines sections
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 224

state 200

    (9) sections -> empty .
    (12) optcomments -> empty .

    $end            reduce using rule 9 (sections -> empty .)
    clock           reduce using rule 12 (optcomments -> empty .)
    function        reduce using rule 12 (optcomments -> empty .)
    reset           reduce using rule 12 (optcomments -> empty .)
    macro           reduce using rule 12 (optcomments -> empty .)


state 201

    (3) program -> optcomments dir PYTHON newlines optdesc optscale optassignments sections .

    $end            reduce using rule 3 (program -> optcomments dir PYTHON newlines optdesc optscale optassignments sections .)


state 202

    (201) qualifier -> ID EQUALS virtualinteger DOT DOT virtualinteger .

    RBRACK          reduce using rule 201 (qualifier -> ID EQUALS virtualinteger DOT DOT virtualinteger .)
    COMMA           reduce using rule 201 (qualifier -> ID EQUALS virtualinteger DOT DOT virtualinteger .)
    and             reduce using rule 201 (qualifier -> ID EQUALS virtualinteger DOT DOT virtualinteger .)


state 203

    (36) optassignments -> selectorassignment newlines optassignments .

    COMMENT         reduce using rule 36 (optassignments -> selectorassignment newlines optassignments .)
    clock           reduce using rule 36 (optassignments -> selectorassignment newlines optassignments .)
    function        reduce using rule 36 (optassignments -> selectorassignment newlines optassignments .)
    reset           reduce using rule 36 (optassignments -> selectorassignment newlines optassignments .)
    macro           reduce using rule 36 (optassignments -> selectorassignment newlines optassignments .)
    $end            reduce using rule 36 (optassignments -> selectorassignment newlines optassignments .)


state 204

    (184) array_definition -> array ID LBRACK . virtualinteger RBRACK
    (185) array_definition -> array ID LBRACK . virtualinteger to virtualinteger RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 225

state 205

    (37) optassignments -> selector_define_block newlines optassignments .

    COMMENT         reduce using rule 37 (optassignments -> selector_define_block newlines optassignments .)
    clock           reduce using rule 37 (optassignments -> selector_define_block newlines optassignments .)
    function        reduce using rule 37 (optassignments -> selector_define_block newlines optassignments .)
    reset           reduce using rule 37 (optassignments -> selector_define_block newlines optassignments .)
    macro           reduce using rule 37 (optassignments -> selector_define_block newlines optassignments .)
    $end            reduce using rule 37 (optassignments -> selector_define_block newlines optassignments .)


state 206

    (38) optassignments -> blocktag newlines optassignments .

    COMMENT         reduce using rule 38 (optassignments -> blocktag newlines optassignments .)
    clock           reduce using rule 38 (optassignments -> blocktag newlines optassignments .)
    function        reduce using rule 38 (optassignments -> blocktag newlines optassignments .)
    reset           reduce using rule 38 (optassignments -> blocktag newlines optassignments .)
    macro           reduce using rule 38 (optassignments -> blocktag newlines optassignments .)
    $end            reduce using rule 38 (optassignments -> blocktag newlines optassignments .)


state 207

    (35) optassignments -> pythonassignment newlines optassignments .

    COMMENT         reduce using rule 35 (optassignments -> pythonassignment newlines optassignments .)
    clock           reduce using rule 35 (optassignments -> pythonassignment newlines optassignments .)
    function        reduce using rule 35 (optassignments -> pythonassignment newlines optassignments .)
    reset           reduce using rule 35 (optassignments -> pythonassignment newlines optassignments .)
    macro           reduce using rule 35 (optassignments -> pythonassignment newlines optassignments .)
    $end            reduce using rule 35 (optassignments -> pythonassignment newlines optassignments .)


state 208

    (166) selector_define_block -> define ATID EQUALS . fullselector newlines selector_definition end
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 226

state 209

    (162) blocktag -> define block ID . newlines block_list end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 227

state 210

    (40) optassignments -> COMMENT newlines optassignments .

    COMMENT         reduce using rule 40 (optassignments -> COMMENT newlines optassignments .)
    clock           reduce using rule 40 (optassignments -> COMMENT newlines optassignments .)
    function        reduce using rule 40 (optassignments -> COMMENT newlines optassignments .)
    reset           reduce using rule 40 (optassignments -> COMMENT newlines optassignments .)
    macro           reduce using rule 40 (optassignments -> COMMENT newlines optassignments .)
    $end            reduce using rule 40 (optassignments -> COMMENT newlines optassignments .)


state 211

    (39) optassignments -> array_definition newlines optassignments .

    COMMENT         reduce using rule 39 (optassignments -> array_definition newlines optassignments .)
    clock           reduce using rule 39 (optassignments -> array_definition newlines optassignments .)
    function        reduce using rule 39 (optassignments -> array_definition newlines optassignments .)
    reset           reduce using rule 39 (optassignments -> array_definition newlines optassignments .)
    macro           reduce using rule 39 (optassignments -> array_definition newlines optassignments .)
    $end            reduce using rule 39 (optassignments -> array_definition newlines optassignments .)


state 212

    (188) pythonassignment -> DOLLAR ID PYTHON .

    COMMENT         reduce using rule 188 (pythonassignment -> DOLLAR ID PYTHON .)
    NEWLINE         reduce using rule 188 (pythonassignment -> DOLLAR ID PYTHON .)


state 213

    (165) selectorassignment -> ATID EQUALS fullselector .

    COMMENT         reduce using rule 165 (selectorassignment -> ATID EQUALS fullselector .)
    NEWLINE         reduce using rule 165 (selectorassignment -> ATID EQUALS fullselector .)


state 214

    (16) section -> macrosection .

    NEWLINE         reduce using rule 16 (section -> macrosection .)


state 215

    (19) clocksection -> clock . ID newlines blocklist end

    ID              shift and go to state 228


state 216

    (10) section_commented -> optcomments section .

    NEWLINE         reduce using rule 10 (section_commented -> optcomments section .)


state 217

    (17) section -> template_function_section .

    NEWLINE         reduce using rule 17 (section -> template_function_section .)


state 218

    (20) functionsection -> function . ID LPAREN id_list RPAREN newlines blocklist end
    (21) template_function_section -> function . ID LT macro_params GT LPAREN id_list RPAREN newlines blocklist end

    ID              shift and go to state 229


state 219

    (15) section -> resetsection .

    NEWLINE         reduce using rule 15 (section -> resetsection .)


state 220

    (13) section -> clocksection .

    NEWLINE         reduce using rule 13 (section -> clocksection .)


state 221

    (18) resetsection -> reset . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 230

state 222

    (22) macrosection -> macro . DOLLAR ID macro_args newlines blocklist end

    DOLLAR          shift and go to state 231


state 223

    (14) section -> functionsection .

    NEWLINE         reduce using rule 14 (section -> functionsection .)


state 224

    (8) sections -> section_commented newlines . sections
    (8) sections -> . section_commented newlines sections
    (9) sections -> . empty
    (10) section_commented -> . optcomments section
    (290) empty -> .
    (11) optcomments -> . COMMENT optnewlines optcomments
    (12) optcomments -> . empty

    $end            reduce using rule 290 (empty -> .)
    clock           reduce using rule 290 (empty -> .)
    function        reduce using rule 290 (empty -> .)
    reset           reduce using rule 290 (empty -> .)
    macro           reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 4

    optcomments                    shift and go to state 198
    section_commented              shift and go to state 199
    sections                       shift and go to state 232
    empty                          shift and go to state 200

state 225

    (184) array_definition -> array ID LBRACK virtualinteger . RBRACK
    (185) array_definition -> array ID LBRACK virtualinteger . to virtualinteger RBRACK

    RBRACK          shift and go to state 233
    to              shift and go to state 234


state 226

    (166) selector_define_block -> define ATID EQUALS fullselector . newlines selector_definition end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 235

state 227

    (162) blocktag -> define block ID newlines . block_list end
    (163) block_list -> . ID newlines block_list
    (164) block_list -> . ID newlines

    ID              shift and go to state 237

    block_list                     shift and go to state 236

state 228

    (19) clocksection -> clock ID . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 238

state 229

    (20) functionsection -> function ID . LPAREN id_list RPAREN newlines blocklist end
    (21) template_function_section -> function ID . LT macro_params GT LPAREN id_list RPAREN newlines blocklist end

    LPAREN          shift and go to state 240
    LT              shift and go to state 239


state 230

    (18) resetsection -> reset newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 297
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 231

    (22) macrosection -> macro DOLLAR . ID macro_args newlines blocklist end

    ID              shift and go to state 302


state 232

    (8) sections -> section_commented newlines sections .

    $end            reduce using rule 8 (sections -> section_commented newlines sections .)


state 233

    (184) array_definition -> array ID LBRACK virtualinteger RBRACK .

    NEWLINE         reduce using rule 184 (array_definition -> array ID LBRACK virtualinteger RBRACK .)


state 234

    (185) array_definition -> array ID LBRACK virtualinteger to . virtualinteger RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 303

state 235

    (166) selector_define_block -> define ATID EQUALS fullselector newlines . selector_definition end
    (167) selector_definition -> . empty
    (168) selector_definition -> . selector_item newlines selector_definition
    (290) empty -> .
    (169) selector_item -> . create PYTHON
    (170) selector_item -> . ID EQUALS data_path data_type virtualnumber
    (171) selector_item -> . ID EQUALS data_path data_type
    (172) selector_item -> . LT ID GT EQUALS data_path data_type virtualnumber
    (173) selector_item -> . LT ID GT EQUALS data_path data_type
    (174) selector_item -> . functionsection
    (20) functionsection -> . function ID LPAREN id_list RPAREN newlines blocklist end

    end             reduce using rule 290 (empty -> .)
    create          shift and go to state 305
    ID              shift and go to state 310
    LT              shift and go to state 306
    function        shift and go to state 308

    selector_item                  shift and go to state 304
    selector_definition            shift and go to state 309
    functionsection                shift and go to state 311
    empty                          shift and go to state 307

state 236

    (162) blocktag -> define block ID newlines block_list . end

    end             shift and go to state 312


state 237

    (163) block_list -> ID . newlines block_list
    (164) block_list -> ID . newlines
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 313

state 238

    (19) clocksection -> clock ID newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 314
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 239

    (21) template_function_section -> function ID LT . macro_params GT LPAREN id_list RPAREN newlines blocklist end
    (25) macro_params -> . DOLLAR ID COMMA macro_params
    (26) macro_params -> . DOLLAR ID
    (27) macro_params -> . empty
    (290) empty -> .

    DOLLAR          shift and go to state 315
    GT              reduce using rule 290 (empty -> .)

    macro_params                   shift and go to state 316
    empty                          shift and go to state 317

state 240

    (20) functionsection -> function ID LPAREN . id_list RPAREN newlines blocklist end
    (32) id_list -> . ID COMMA id_list
    (33) id_list -> . ID
    (34) id_list -> . empty
    (290) empty -> .

    ID              shift and go to state 319
    RPAREN          reduce using rule 290 (empty -> .)

    id_list                        shift and go to state 318
    empty                          shift and go to state 320

state 241

    (72) move_block -> move . fullselector relcoords
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 321

state 242

    (89) execute_item -> rotated . fullselector
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 322

state 243

    (63) codeblock -> method_call_block .

    COMMENT         reduce using rule 63 (codeblock -> method_call_block .)
    NEWLINE         reduce using rule 63 (codeblock -> method_call_block .)


state 244

    (70) comment_block -> COMMENT .

    COMMENT         reduce using rule 70 (comment_block -> COMMENT .)
    NEWLINE         reduce using rule 70 (comment_block -> COMMENT .)


state 245

    (131) codeblock -> title . fullselector PYTHON
    (134) codeblock -> title . fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 323

state 246

    (56) codeblock -> trigger_block .

    COMMENT         reduce using rule 56 (codeblock -> trigger_block .)
    NEWLINE         reduce using rule 56 (codeblock -> trigger_block .)


state 247

    (61) codeblock -> function_call_block .

    COMMENT         reduce using rule 61 (codeblock -> function_call_block .)
    NEWLINE         reduce using rule 61 (codeblock -> function_call_block .)


state 248

    (220) assignment -> return . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 324
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 249

    (57) codeblock -> execute_block .

    COMMENT         reduce using rule 57 (codeblock -> execute_block .)
    NEWLINE         reduce using rule 57 (codeblock -> execute_block .)


state 250

    (165) selectorassignment -> ATID . EQUALS fullselector
    (208) fullselector -> ATID .
    (209) fullselector -> ATID . LBRACK qualifiers RBRACK

    EQUALS          shift and go to state 197
    DOT             reduce using rule 208 (fullselector -> ATID .)
    LBRACK          shift and go to state 40


state 251

    (67) codeblock -> selectorassignment_block .

    COMMENT         reduce using rule 67 (codeblock -> selectorassignment_block .)
    NEWLINE         reduce using rule 67 (codeblock -> selectorassignment_block .)


state 252

    (278) method_call -> fullselector . DOT ID LPAREN exprlist RPAREN
    (42) variable -> fullselector . DOT ID
    (241) vector_var -> fullselector . DOT LT ID GT

    DOT             shift and go to state 325


state 253

    (90) execute_item -> facing . relcoords
    (91) execute_item -> facing . fullselector
    (217) relcoords -> . virtualnumber virtualnumber virtualnumber
    (218) relcoords -> . relcoord relcoord relcoord
    (219) relcoords -> . localcoord localcoord localcoord
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    ATID            shift and go to state 17
    DOLLAR          shift and go to state 62
    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 331
    fullselector                   shift and go to state 333
    localcoord                     shift and go to state 334
    number                         shift and go to state 63
    relcoords                      shift and go to state 332
    relcoord                       shift and go to state 329

state 254

    (54) codeblock -> for_block .

    COMMENT         reduce using rule 54 (codeblock -> for_block .)
    NEWLINE         reduce using rule 54 (codeblock -> for_block .)


state 255

    (60) codeblock -> tell_block .

    COMMENT         reduce using rule 60 (codeblock -> tell_block .)
    NEWLINE         reduce using rule 60 (codeblock -> tell_block .)


state 256

    (137) function_call_block -> function_call .

    COMMENT         reduce using rule 137 (function_call_block -> function_call .)
    NEWLINE         reduce using rule 137 (function_call_block -> function_call .)


state 257

    (101) codeblock -> for . ATID in fullselector newlines blocklist end
    (73) for_block -> for . DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> for . ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> for . ID EQUALS expr to expr newlines blocklist end

    ATID            shift and go to state 335
    DOLLAR          shift and go to state 336
    ID              shift and go to state 337


state 258

    (68) codeblock -> vector_assignment_block .

    COMMENT         reduce using rule 68 (codeblock -> vector_assignment_block .)
    NEWLINE         reduce using rule 68 (codeblock -> vector_assignment_block .)


state 259

    (133) codeblock -> actionbar . fullselector PYTHON
    (136) codeblock -> actionbar . fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 338

state 260

    (71) command_block -> COMMAND .

    COMMENT         reduce using rule 71 (command_block -> COMMAND .)
    NEWLINE         reduce using rule 71 (command_block -> COMMAND .)


state 261

    (50) codeblock -> comment_block .

    COMMENT         reduce using rule 50 (codeblock -> comment_block .)
    NEWLINE         reduce using rule 50 (codeblock -> comment_block .)


state 262

    (58) codeblock -> while_block .

    COMMENT         reduce using rule 58 (codeblock -> while_block .)
    NEWLINE         reduce using rule 58 (codeblock -> while_block .)


state 263

    (143) vector_assignment_scalar_block -> vector_assignment_scalar .

    COMMENT         reduce using rule 143 (vector_assignment_scalar_block -> vector_assignment_scalar .)
    NEWLINE         reduce using rule 143 (vector_assignment_scalar_block -> vector_assignment_scalar .)


state 264

    (132) codeblock -> subtitle . fullselector PYTHON
    (135) codeblock -> subtitle . fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 339

state 265

    (142) vector_assignment_block -> vector_assignment .

    COMMENT         reduce using rule 142 (vector_assignment_block -> vector_assignment .)
    NEWLINE         reduce using rule 142 (vector_assignment_block -> vector_assignment .)


state 266

    (186) create_block -> create . ATID relcoords
    (187) create_block -> create . ATID

    ATID            shift and go to state 340


state 267

    (282) template_function_call -> ID . LT macro_call_params GT LPAREN exprlist RPAREN
    (277) function_call -> ID . LPAREN exprlist RPAREN
    (43) variable -> ID .
    (44) variable -> ID . LBRACK virtualinteger RBRACK
    (45) variable -> ID . LBRACK expr RBRACK

    LT              shift and go to state 342
    LPAREN          shift and go to state 39
    EQUALS          reduce using rule 43 (variable -> ID .)
    PLUSEQUALS      reduce using rule 43 (variable -> ID .)
    MINUSEQUALS     reduce using rule 43 (variable -> ID .)
    TIMESEQUALS     reduce using rule 43 (variable -> ID .)
    DIVIDEEQUALS    reduce using rule 43 (variable -> ID .)
    MODEQUALS       reduce using rule 43 (variable -> ID .)
    PLUSPLUS        reduce using rule 43 (variable -> ID .)
    MINUSMINUS      reduce using rule 43 (variable -> ID .)
    LBRACK          shift and go to state 341


state 268

    (74) trigger_block -> trigger . fullselector DOT ID newlines blocklist end
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 343

state 269

    (130) tell_block -> tell . fullselector PYTHON
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 344

state 270

    (49) blocklist -> empty .

    end             reduce using rule 49 (blocklist -> empty .)
    else            reduce using rule 49 (blocklist -> empty .)


state 271

    (84) execute_items -> execute_item .
    (85) execute_items -> execute_item . execute_items
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether

    do              reduce using rule 84 (execute_items -> execute_item .)
    then            reduce using rule 84 (execute_items -> execute_item .)
    NEWLINE         reduce using rule 84 (execute_items -> execute_item .)
    if              shift and go to state 347
    unless          shift and go to state 292
    as              shift and go to state 346
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286

    execute_item                   shift and go to state 271
    execute_items                  shift and go to state 345

state 272

    (48) blocklist -> codeblock . optcomment newlines blocklist
    (46) optcomment -> . COMMENT
    (47) optcomment -> . empty
    (290) empty -> .

    COMMENT         shift and go to state 348
    NEWLINE         reduce using rule 290 (empty -> .)

    optcomment                     shift and go to state 349
    empty                          shift and go to state 350

state 273

    (65) codeblock -> pythonassignment_block .

    COMMENT         reduce using rule 65 (codeblock -> pythonassignment_block .)
    NEWLINE         reduce using rule 65 (codeblock -> pythonassignment_block .)


state 274

    (92) execute_item -> align . ID

    ID              shift and go to state 351


state 275

    (55) codeblock -> if_block .

    COMMENT         reduce using rule 55 (codeblock -> if_block .)
    NEWLINE         reduce using rule 55 (codeblock -> if_block .)


state 276

    (139) macro_call_block -> macro_call .

    COMMENT         reduce using rule 139 (macro_call_block -> macro_call .)
    NEWLINE         reduce using rule 139 (macro_call_block -> macro_call .)


state 277

    (81) execute_block -> execute_items . newlines blocklist end
    (82) execute_block -> execute_items . do codeblock
    (83) execute_block -> execute_items . then codeblock
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    do              shift and go to state 352
    then            shift and go to state 353
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 354

state 278

    (120) while_block -> while . conditions newlines blocklist end
    (121) while_block -> while . conditions execute_items newlines blocklist end
    (102) conditions -> . condition
    (103) conditions -> . condition and conditions
    (104) condition -> . variable EQUALEQUAL fullselector
    (105) condition -> . fullselector EQUALEQUAL variable
    (106) condition -> . fullselector
    (107) condition -> . variable LT comparison
    (108) condition -> . variable LEQ comparison
    (109) condition -> . variable EQUALEQUAL comparison
    (110) condition -> . variable GT comparison
    (111) condition -> . variable GEQ comparison
    (112) condition -> . vector_var EQUALEQUAL vector_var
    (113) condition -> . variable
    (114) condition -> . not variable
    (115) condition -> . block relcoords ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    not             shift and go to state 358
    block           shift and go to state 362
    ID              shift and go to state 359
    ATID            shift and go to state 17
    LT              shift and go to state 291

    vector_var                     shift and go to state 356
    fullselector                   shift and go to state 361
    variable                       shift and go to state 355
    conditions                     shift and go to state 357
    condition                      shift and go to state 360

state 279

    (66) codeblock -> assignment_block .

    COMMENT         reduce using rule 66 (codeblock -> assignment_block .)
    NEWLINE         reduce using rule 66 (codeblock -> assignment_block .)


state 280

    (53) codeblock -> create_block .

    COMMENT         reduce using rule 53 (codeblock -> create_block .)
    NEWLINE         reduce using rule 53 (codeblock -> create_block .)


state 281

    (138) method_call_block -> method_call .

    COMMENT         reduce using rule 138 (method_call_block -> method_call .)
    NEWLINE         reduce using rule 138 (method_call_block -> method_call .)


state 282

    (144) selectorassignment_block -> selectorassignment .

    COMMENT         reduce using rule 144 (selectorassignment_block -> selectorassignment .)
    NEWLINE         reduce using rule 144 (selectorassignment_block -> selectorassignment .)


state 283

    (69) codeblock -> vector_assignment_scalar_block .

    COMMENT         reduce using rule 69 (codeblock -> vector_assignment_scalar_block .)
    NEWLINE         reduce using rule 69 (codeblock -> vector_assignment_scalar_block .)


state 284

    (75) codeblock -> as . variable newlines blocklist end
    (76) codeblock -> as . variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> as . variable do codeblock
    (78) codeblock -> as . variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> as . create_block newlines blocklist end
    (80) codeblock -> as . create_block do codeblock
    (88) execute_item -> as . fullselector
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ID              shift and go to state 359
    create          shift and go to state 266
    ATID            shift and go to state 17

    fullselector                   shift and go to state 363
    variable                       shift and go to state 364
    create_block                   shift and go to state 365

state 285

    (93) execute_item -> at . fullselector
    (94) execute_item -> at . relcoords
    (95) execute_item -> at . fullselector relcoords
    (96) execute_item -> at . vector_expr
    (97) execute_item -> at . LPAREN virtualnumber RPAREN vector_expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (217) relcoords -> . virtualnumber virtualnumber virtualnumber
    (218) relcoords -> . relcoord relcoord relcoord
    (219) relcoords -> . localcoord localcoord localcoord
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 371
    ATID            shift and go to state 17
    LT              shift and go to state 7
    MINUS           shift and go to state 366
    here            shift and go to state 13
    DOLLAR          shift and go to state 369
    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327
    scale           shift and go to state 5
    ID              shift and go to state 15
    INTEGER         shift and go to state 372
    HEX             shift and go to state 368
    BINARY          shift and go to state 373
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 331
    vector_expr                    shift and go to state 367
    fullselector                   shift and go to state 374
    expr                           shift and go to state 375
    localcoord                     shift and go to state 334
    number                         shift and go to state 63
    relcoords                      shift and go to state 370
    relcoord                       shift and go to state 329
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 286

    (98) execute_item -> in . overworld
    (99) execute_item -> in . the_end
    (100) execute_item -> in . the_nether

    overworld       shift and go to state 377
    the_end         shift and go to state 378
    the_nether      shift and go to state 376


state 287

    (118) if_block -> if . PYTHON newlines blocklist end
    (119) if_block -> if . PYTHON newlines blocklist else newlines blocklist end
    (86) execute_item -> if . conditions
    (102) conditions -> . condition
    (103) conditions -> . condition and conditions
    (104) condition -> . variable EQUALEQUAL fullselector
    (105) condition -> . fullselector EQUALEQUAL variable
    (106) condition -> . fullselector
    (107) condition -> . variable LT comparison
    (108) condition -> . variable LEQ comparison
    (109) condition -> . variable EQUALEQUAL comparison
    (110) condition -> . variable GT comparison
    (111) condition -> . variable GEQ comparison
    (112) condition -> . vector_var EQUALEQUAL vector_var
    (113) condition -> . variable
    (114) condition -> . not variable
    (115) condition -> . block relcoords ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    PYTHON          shift and go to state 379
    not             shift and go to state 358
    block           shift and go to state 362
    ID              shift and go to state 359
    ATID            shift and go to state 17
    LT              shift and go to state 291

    fullselector                   shift and go to state 361
    vector_var                     shift and go to state 356
    variable                       shift and go to state 355
    conditions                     shift and go to state 380
    condition                      shift and go to state 360

state 288

    (62) codeblock -> template_function_call .

    COMMENT         reduce using rule 62 (codeblock -> template_function_call .)
    NEWLINE         reduce using rule 62 (codeblock -> template_function_call .)


state 289

    (64) codeblock -> macro_call_block .

    COMMENT         reduce using rule 64 (codeblock -> macro_call_block .)
    NEWLINE         reduce using rule 64 (codeblock -> macro_call_block .)


state 290

    (51) codeblock -> command_block .

    COMMENT         reduce using rule 51 (codeblock -> command_block .)
    NEWLINE         reduce using rule 51 (codeblock -> command_block .)


state 291

    (240) vector_var -> LT . ID GT
    (242) vector_var -> LT . variable COMMA variable COMMA variable GT
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ID              shift and go to state 383
    ATID            shift and go to state 17

    variable                       shift and go to state 382
    fullselector                   shift and go to state 381

state 292

    (87) execute_item -> unless . conditions
    (102) conditions -> . condition
    (103) conditions -> . condition and conditions
    (104) condition -> . variable EQUALEQUAL fullselector
    (105) condition -> . fullselector EQUALEQUAL variable
    (106) condition -> . fullselector
    (107) condition -> . variable LT comparison
    (108) condition -> . variable LEQ comparison
    (109) condition -> . variable EQUALEQUAL comparison
    (110) condition -> . variable GT comparison
    (111) condition -> . variable GEQ comparison
    (112) condition -> . vector_var EQUALEQUAL vector_var
    (113) condition -> . variable
    (114) condition -> . not variable
    (115) condition -> . block relcoords ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    not             shift and go to state 358
    block           shift and go to state 362
    ID              shift and go to state 359
    ATID            shift and go to state 17
    LT              shift and go to state 291

    fullselector                   shift and go to state 361
    vector_var                     shift and go to state 356
    variable                       shift and go to state 355
    conditions                     shift and go to state 384
    condition                      shift and go to state 360

state 293

    (141) assignment_block -> assignment .

    COMMENT         reduce using rule 141 (assignment_block -> assignment .)
    NEWLINE         reduce using rule 141 (assignment_block -> assignment .)


state 294

    (283) macro_call -> DOLLAR . ID macro_call_args
    (188) pythonassignment -> DOLLAR . ID PYTHON

    ID              shift and go to state 385


state 295

    (221) assignment -> variable . EQUALS expr
    (222) assignment -> variable . PLUSEQUALS expr
    (223) assignment -> variable . MINUSEQUALS expr
    (224) assignment -> variable . TIMESEQUALS expr
    (225) assignment -> variable . DIVIDEEQUALS expr
    (226) assignment -> variable . MODEQUALS expr
    (227) assignment -> variable . PLUSPLUS
    (228) assignment -> variable . MINUSMINUS
    (229) assignment -> variable . EQUALS fullselector
    (230) assignment -> variable . EQUALS create_block

    EQUALS          shift and go to state 389
    PLUSEQUALS      shift and go to state 386
    MINUSEQUALS     shift and go to state 390
    TIMESEQUALS     shift and go to state 392
    DIVIDEEQUALS    shift and go to state 388
    MODEQUALS       shift and go to state 391
    PLUSPLUS        shift and go to state 387
    MINUSMINUS      shift and go to state 393


state 296

    (140) pythonassignment_block -> pythonassignment .

    COMMENT         reduce using rule 140 (pythonassignment_block -> pythonassignment .)
    NEWLINE         reduce using rule 140 (pythonassignment_block -> pythonassignment .)


state 297

    (18) resetsection -> reset newlines blocklist . end

    end             shift and go to state 394


state 298

    (231) vector_assignment -> vector_var . EQUALS vector_expr
    (232) vector_assignment -> vector_var . PLUSEQUALS vector_expr
    (233) vector_assignment -> vector_var . MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> vector_var . EQUALS expr
    (235) vector_assignment_scalar -> vector_var . PLUSEQUALS expr
    (236) vector_assignment_scalar -> vector_var . MINUSEQUALS expr
    (237) vector_assignment_scalar -> vector_var . TIMESEQUALS expr
    (238) vector_assignment_scalar -> vector_var . DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> vector_var . MODEQUALS expr

    EQUALS          shift and go to state 397
    PLUSEQUALS      shift and go to state 395
    MINUSEQUALS     shift and go to state 399
    TIMESEQUALS     shift and go to state 400
    DIVIDEEQUALS    shift and go to state 396
    MODEQUALS       shift and go to state 398


state 299

    (124) switch_block -> switch . expr newlines cases end
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 401
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 300

    (59) codeblock -> switch_block .

    COMMENT         reduce using rule 59 (codeblock -> switch_block .)
    NEWLINE         reduce using rule 59 (codeblock -> switch_block .)


state 301

    (52) codeblock -> move_block .

    COMMENT         reduce using rule 52 (codeblock -> move_block .)
    NEWLINE         reduce using rule 52 (codeblock -> move_block .)


state 302

    (22) macrosection -> macro DOLLAR ID . macro_args newlines blocklist end
    (23) macro_args -> . LPAREN macro_params RPAREN
    (24) macro_args -> . empty
    (290) empty -> .

    LPAREN          shift and go to state 402
    NEWLINE         reduce using rule 290 (empty -> .)

    macro_args                     shift and go to state 403
    empty                          shift and go to state 404

state 303

    (185) array_definition -> array ID LBRACK virtualinteger to virtualinteger . RBRACK

    RBRACK          shift and go to state 405


state 304

    (168) selector_definition -> selector_item . newlines selector_definition
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 406

state 305

    (169) selector_item -> create . PYTHON

    PYTHON          shift and go to state 407


state 306

    (172) selector_item -> LT . ID GT EQUALS data_path data_type virtualnumber
    (173) selector_item -> LT . ID GT EQUALS data_path data_type

    ID              shift and go to state 408


state 307

    (167) selector_definition -> empty .

    end             reduce using rule 167 (selector_definition -> empty .)


state 308

    (20) functionsection -> function . ID LPAREN id_list RPAREN newlines blocklist end

    ID              shift and go to state 409


state 309

    (166) selector_define_block -> define ATID EQUALS fullselector newlines selector_definition . end

    end             shift and go to state 410


state 310

    (170) selector_item -> ID . EQUALS data_path data_type virtualnumber
    (171) selector_item -> ID . EQUALS data_path data_type

    EQUALS          shift and go to state 411


state 311

    (174) selector_item -> functionsection .

    NEWLINE         reduce using rule 174 (selector_item -> functionsection .)


state 312

    (162) blocktag -> define block ID newlines block_list end .

    NEWLINE         reduce using rule 162 (blocktag -> define block ID newlines block_list end .)


state 313

    (163) block_list -> ID newlines . block_list
    (164) block_list -> ID newlines .
    (163) block_list -> . ID newlines block_list
    (164) block_list -> . ID newlines

    end             reduce using rule 164 (block_list -> ID newlines .)
    ID              shift and go to state 237

    block_list                     shift and go to state 412

state 314

    (19) clocksection -> clock ID newlines blocklist . end

    end             shift and go to state 413


state 315

    (25) macro_params -> DOLLAR . ID COMMA macro_params
    (26) macro_params -> DOLLAR . ID

    ID              shift and go to state 414


state 316

    (21) template_function_section -> function ID LT macro_params . GT LPAREN id_list RPAREN newlines blocklist end

    GT              shift and go to state 415


state 317

    (27) macro_params -> empty .

    GT              reduce using rule 27 (macro_params -> empty .)
    RPAREN          reduce using rule 27 (macro_params -> empty .)


state 318

    (20) functionsection -> function ID LPAREN id_list . RPAREN newlines blocklist end

    RPAREN          shift and go to state 416


state 319

    (32) id_list -> ID . COMMA id_list
    (33) id_list -> ID .

    COMMA           shift and go to state 417
    RPAREN          reduce using rule 33 (id_list -> ID .)


state 320

    (34) id_list -> empty .

    RPAREN          reduce using rule 34 (id_list -> empty .)


state 321

    (72) move_block -> move fullselector . relcoords
    (217) relcoords -> . virtualnumber virtualnumber virtualnumber
    (218) relcoords -> . relcoord relcoord relcoord
    (219) relcoords -> . localcoord localcoord localcoord
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    DOLLAR          shift and go to state 62
    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 331
    localcoord                     shift and go to state 334
    number                         shift and go to state 63
    relcoords                      shift and go to state 418
    relcoord                       shift and go to state 329

state 322

    (89) execute_item -> rotated fullselector .

    if              reduce using rule 89 (execute_item -> rotated fullselector .)
    unless          reduce using rule 89 (execute_item -> rotated fullselector .)
    as              reduce using rule 89 (execute_item -> rotated fullselector .)
    rotated         reduce using rule 89 (execute_item -> rotated fullselector .)
    facing          reduce using rule 89 (execute_item -> rotated fullselector .)
    align           reduce using rule 89 (execute_item -> rotated fullselector .)
    at              reduce using rule 89 (execute_item -> rotated fullselector .)
    in              reduce using rule 89 (execute_item -> rotated fullselector .)
    do              reduce using rule 89 (execute_item -> rotated fullselector .)
    then            reduce using rule 89 (execute_item -> rotated fullselector .)
    NEWLINE         reduce using rule 89 (execute_item -> rotated fullselector .)


state 323

    (131) codeblock -> title fullselector . PYTHON
    (134) codeblock -> title fullselector . virtualinteger virtualinteger virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    PYTHON          shift and go to state 419
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 420

state 324

    (220) assignment -> return expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 220 (assignment -> return expr .)
    NEWLINE         reduce using rule 220 (assignment -> return expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 325

    (278) method_call -> fullselector DOT . ID LPAREN exprlist RPAREN
    (42) variable -> fullselector DOT . ID
    (241) vector_var -> fullselector DOT . LT ID GT

    ID              shift and go to state 422
    LT              shift and go to state 421


state 326

    (212) relcoord -> TILDEEMPTY .

    TILDE           reduce using rule 212 (relcoord -> TILDEEMPTY .)
    TILDEEMPTY      reduce using rule 212 (relcoord -> TILDEEMPTY .)
    DOLLAR          reduce using rule 212 (relcoord -> TILDEEMPTY .)
    INTEGER         reduce using rule 212 (relcoord -> TILDEEMPTY .)
    HEX             reduce using rule 212 (relcoord -> TILDEEMPTY .)
    BINARY          reduce using rule 212 (relcoord -> TILDEEMPTY .)
    MINUS           reduce using rule 212 (relcoord -> TILDEEMPTY .)
    FLOAT           reduce using rule 212 (relcoord -> TILDEEMPTY .)
    if              reduce using rule 212 (relcoord -> TILDEEMPTY .)
    unless          reduce using rule 212 (relcoord -> TILDEEMPTY .)
    as              reduce using rule 212 (relcoord -> TILDEEMPTY .)
    rotated         reduce using rule 212 (relcoord -> TILDEEMPTY .)
    facing          reduce using rule 212 (relcoord -> TILDEEMPTY .)
    align           reduce using rule 212 (relcoord -> TILDEEMPTY .)
    at              reduce using rule 212 (relcoord -> TILDEEMPTY .)
    in              reduce using rule 212 (relcoord -> TILDEEMPTY .)
    do              reduce using rule 212 (relcoord -> TILDEEMPTY .)
    then            reduce using rule 212 (relcoord -> TILDEEMPTY .)
    NEWLINE         reduce using rule 212 (relcoord -> TILDEEMPTY .)
    COMMENT         reduce using rule 212 (relcoord -> TILDEEMPTY .)
    ID              reduce using rule 212 (relcoord -> TILDEEMPTY .)


state 327

    (215) localcoord -> POWEREMPTY .

    if              reduce using rule 215 (localcoord -> POWEREMPTY .)
    unless          reduce using rule 215 (localcoord -> POWEREMPTY .)
    as              reduce using rule 215 (localcoord -> POWEREMPTY .)
    rotated         reduce using rule 215 (localcoord -> POWEREMPTY .)
    facing          reduce using rule 215 (localcoord -> POWEREMPTY .)
    align           reduce using rule 215 (localcoord -> POWEREMPTY .)
    at              reduce using rule 215 (localcoord -> POWEREMPTY .)
    in              reduce using rule 215 (localcoord -> POWEREMPTY .)
    do              reduce using rule 215 (localcoord -> POWEREMPTY .)
    then            reduce using rule 215 (localcoord -> POWEREMPTY .)
    NEWLINE         reduce using rule 215 (localcoord -> POWEREMPTY .)
    COMMENT         reduce using rule 215 (localcoord -> POWEREMPTY .)
    ID              reduce using rule 215 (localcoord -> POWEREMPTY .)
    POWER           reduce using rule 215 (localcoord -> POWEREMPTY .)
    POWEREMPTY      reduce using rule 215 (localcoord -> POWEREMPTY .)


state 328

    (214) localcoord -> POWER . virtualnumber
    (216) localcoord -> POWER .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    if              reduce using rule 216 (localcoord -> POWER .)
    unless          reduce using rule 216 (localcoord -> POWER .)
    as              reduce using rule 216 (localcoord -> POWER .)
    rotated         reduce using rule 216 (localcoord -> POWER .)
    facing          reduce using rule 216 (localcoord -> POWER .)
    align           reduce using rule 216 (localcoord -> POWER .)
    at              reduce using rule 216 (localcoord -> POWER .)
    in              reduce using rule 216 (localcoord -> POWER .)
    do              reduce using rule 216 (localcoord -> POWER .)
    then            reduce using rule 216 (localcoord -> POWER .)
    NEWLINE         reduce using rule 216 (localcoord -> POWER .)
    COMMENT         reduce using rule 216 (localcoord -> POWER .)
    ID              reduce using rule 216 (localcoord -> POWER .)
    POWER           reduce using rule 216 (localcoord -> POWER .)
    POWEREMPTY      reduce using rule 216 (localcoord -> POWER .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 423
    number                         shift and go to state 63

state 329

    (218) relcoords -> relcoord . relcoord relcoord
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 424
    relcoord                       shift and go to state 425
    number                         shift and go to state 63

state 330

    (211) relcoord -> TILDE . virtualnumber
    (213) relcoord -> TILDE .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for HEX resolved as shift
  ! shift/reduce conflict for BINARY resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    TILDE           reduce using rule 213 (relcoord -> TILDE .)
    TILDEEMPTY      reduce using rule 213 (relcoord -> TILDE .)
    if              reduce using rule 213 (relcoord -> TILDE .)
    unless          reduce using rule 213 (relcoord -> TILDE .)
    as              reduce using rule 213 (relcoord -> TILDE .)
    rotated         reduce using rule 213 (relcoord -> TILDE .)
    facing          reduce using rule 213 (relcoord -> TILDE .)
    align           reduce using rule 213 (relcoord -> TILDE .)
    at              reduce using rule 213 (relcoord -> TILDE .)
    in              reduce using rule 213 (relcoord -> TILDE .)
    do              reduce using rule 213 (relcoord -> TILDE .)
    then            reduce using rule 213 (relcoord -> TILDE .)
    NEWLINE         reduce using rule 213 (relcoord -> TILDE .)
    COMMENT         reduce using rule 213 (relcoord -> TILDE .)
    ID              reduce using rule 213 (relcoord -> TILDE .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

  ! DOLLAR          [ reduce using rule 213 (relcoord -> TILDE .) ]
  ! INTEGER         [ reduce using rule 213 (relcoord -> TILDE .) ]
  ! HEX             [ reduce using rule 213 (relcoord -> TILDE .) ]
  ! BINARY          [ reduce using rule 213 (relcoord -> TILDE .) ]
  ! MINUS           [ reduce using rule 213 (relcoord -> TILDE .) ]
  ! FLOAT           [ reduce using rule 213 (relcoord -> TILDE .) ]

    virtualnumber                  shift and go to state 426
    number                         shift and go to state 63

state 331

    (217) relcoords -> virtualnumber . virtualnumber virtualnumber
    (210) relcoord -> virtualnumber .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for HEX resolved as shift
  ! shift/reduce conflict for BINARY resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    TILDE           reduce using rule 210 (relcoord -> virtualnumber .)
    TILDEEMPTY      reduce using rule 210 (relcoord -> virtualnumber .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

  ! DOLLAR          [ reduce using rule 210 (relcoord -> virtualnumber .) ]
  ! INTEGER         [ reduce using rule 210 (relcoord -> virtualnumber .) ]
  ! HEX             [ reduce using rule 210 (relcoord -> virtualnumber .) ]
  ! BINARY          [ reduce using rule 210 (relcoord -> virtualnumber .) ]
  ! MINUS           [ reduce using rule 210 (relcoord -> virtualnumber .) ]
  ! FLOAT           [ reduce using rule 210 (relcoord -> virtualnumber .) ]

    virtualnumber                  shift and go to state 427
    number                         shift and go to state 63

state 332

    (90) execute_item -> facing relcoords .

    if              reduce using rule 90 (execute_item -> facing relcoords .)
    unless          reduce using rule 90 (execute_item -> facing relcoords .)
    as              reduce using rule 90 (execute_item -> facing relcoords .)
    rotated         reduce using rule 90 (execute_item -> facing relcoords .)
    facing          reduce using rule 90 (execute_item -> facing relcoords .)
    align           reduce using rule 90 (execute_item -> facing relcoords .)
    at              reduce using rule 90 (execute_item -> facing relcoords .)
    in              reduce using rule 90 (execute_item -> facing relcoords .)
    do              reduce using rule 90 (execute_item -> facing relcoords .)
    then            reduce using rule 90 (execute_item -> facing relcoords .)
    NEWLINE         reduce using rule 90 (execute_item -> facing relcoords .)


state 333

    (91) execute_item -> facing fullselector .

    if              reduce using rule 91 (execute_item -> facing fullselector .)
    unless          reduce using rule 91 (execute_item -> facing fullselector .)
    as              reduce using rule 91 (execute_item -> facing fullselector .)
    rotated         reduce using rule 91 (execute_item -> facing fullselector .)
    facing          reduce using rule 91 (execute_item -> facing fullselector .)
    align           reduce using rule 91 (execute_item -> facing fullselector .)
    at              reduce using rule 91 (execute_item -> facing fullselector .)
    in              reduce using rule 91 (execute_item -> facing fullselector .)
    do              reduce using rule 91 (execute_item -> facing fullselector .)
    then            reduce using rule 91 (execute_item -> facing fullselector .)
    NEWLINE         reduce using rule 91 (execute_item -> facing fullselector .)


state 334

    (219) relcoords -> localcoord . localcoord localcoord
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER

    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327

    localcoord                     shift and go to state 428

state 335

    (101) codeblock -> for ATID . in fullselector newlines blocklist end

    in              shift and go to state 429


state 336

    (73) for_block -> for DOLLAR . ID in PYTHON newlines blocklist end

    ID              shift and go to state 430


state 337

    (122) for_block -> for ID . EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> for ID . EQUALS expr to expr newlines blocklist end

    EQUALS          shift and go to state 431


state 338

    (133) codeblock -> actionbar fullselector . PYTHON
    (136) codeblock -> actionbar fullselector . virtualinteger virtualinteger virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    PYTHON          shift and go to state 432
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 433

state 339

    (132) codeblock -> subtitle fullselector . PYTHON
    (135) codeblock -> subtitle fullselector . virtualinteger virtualinteger virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    PYTHON          shift and go to state 434
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 435

state 340

    (186) create_block -> create ATID . relcoords
    (187) create_block -> create ATID .
    (217) relcoords -> . virtualnumber virtualnumber virtualnumber
    (218) relcoords -> . relcoord relcoord relcoord
    (219) relcoords -> . localcoord localcoord localcoord
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    COMMENT         reduce using rule 187 (create_block -> create ATID .)
    NEWLINE         reduce using rule 187 (create_block -> create ATID .)
    do              reduce using rule 187 (create_block -> create ATID .)
    DOLLAR          shift and go to state 62
    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    localcoord                     shift and go to state 334
    virtualnumber                  shift and go to state 331
    relcoord                       shift and go to state 329
    number                         shift and go to state 63
    relcoords                      shift and go to state 436

state 341

    (44) variable -> ID LBRACK . virtualinteger RBRACK
    (45) variable -> ID LBRACK . expr RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 68
    DOLLAR          shift and go to state 11
    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    LT              shift and go to state 7
    here            shift and go to state 13
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 437
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 438

state 342

    (282) template_function_call -> ID LT . macro_call_params GT LPAREN exprlist RPAREN
    (286) macro_call_params -> . macro_call_param COMMA macro_call_params
    (287) macro_call_params -> . macro_call_param
    (288) macro_call_params -> . empty
    (289) macro_call_param -> . virtualnumber
    (290) empty -> .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    GT              reduce using rule 290 (empty -> .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 441
    macro_call_param               shift and go to state 439
    number                         shift and go to state 63
    macro_call_params              shift and go to state 440
    empty                          shift and go to state 442

state 343

    (74) trigger_block -> trigger fullselector . DOT ID newlines blocklist end

    DOT             shift and go to state 443


state 344

    (130) tell_block -> tell fullselector . PYTHON

    PYTHON          shift and go to state 444


state 345

    (85) execute_items -> execute_item execute_items .

    do              reduce using rule 85 (execute_items -> execute_item execute_items .)
    then            reduce using rule 85 (execute_items -> execute_item execute_items .)
    NEWLINE         reduce using rule 85 (execute_items -> execute_item execute_items .)


state 346

    (88) execute_item -> as . fullselector
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 445

state 347

    (86) execute_item -> if . conditions
    (102) conditions -> . condition
    (103) conditions -> . condition and conditions
    (104) condition -> . variable EQUALEQUAL fullselector
    (105) condition -> . fullselector EQUALEQUAL variable
    (106) condition -> . fullselector
    (107) condition -> . variable LT comparison
    (108) condition -> . variable LEQ comparison
    (109) condition -> . variable EQUALEQUAL comparison
    (110) condition -> . variable GT comparison
    (111) condition -> . variable GEQ comparison
    (112) condition -> . vector_var EQUALEQUAL vector_var
    (113) condition -> . variable
    (114) condition -> . not variable
    (115) condition -> . block relcoords ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    not             shift and go to state 358
    block           shift and go to state 362
    ID              shift and go to state 359
    ATID            shift and go to state 17
    LT              shift and go to state 291

    fullselector                   shift and go to state 361
    vector_var                     shift and go to state 356
    variable                       shift and go to state 355
    conditions                     shift and go to state 380
    condition                      shift and go to state 360

state 348

    (46) optcomment -> COMMENT .

    NEWLINE         reduce using rule 46 (optcomment -> COMMENT .)


state 349

    (48) blocklist -> codeblock optcomment . newlines blocklist
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 446

state 350

    (47) optcomment -> empty .

    NEWLINE         reduce using rule 47 (optcomment -> empty .)


state 351

    (92) execute_item -> align ID .

    if              reduce using rule 92 (execute_item -> align ID .)
    unless          reduce using rule 92 (execute_item -> align ID .)
    as              reduce using rule 92 (execute_item -> align ID .)
    rotated         reduce using rule 92 (execute_item -> align ID .)
    facing          reduce using rule 92 (execute_item -> align ID .)
    align           reduce using rule 92 (execute_item -> align ID .)
    at              reduce using rule 92 (execute_item -> align ID .)
    in              reduce using rule 92 (execute_item -> align ID .)
    do              reduce using rule 92 (execute_item -> align ID .)
    then            reduce using rule 92 (execute_item -> align ID .)
    NEWLINE         reduce using rule 92 (execute_item -> align ID .)


state 352

    (82) execute_block -> execute_items do . codeblock
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    variable                       shift and go to state 295
    codeblock                      shift and go to state 447
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    selectorassignment_block       shift and go to state 251
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    vector_assignment_scalar       shift and go to state 263
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 353

    (83) execute_block -> execute_items then . codeblock
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    variable                       shift and go to state 295
    codeblock                      shift and go to state 448
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    selectorassignment_block       shift and go to state 251
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    vector_assignment_scalar       shift and go to state 263
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 354

    (81) execute_block -> execute_items newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 449
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 355

    (104) condition -> variable . EQUALEQUAL fullselector
    (107) condition -> variable . LT comparison
    (108) condition -> variable . LEQ comparison
    (109) condition -> variable . EQUALEQUAL comparison
    (110) condition -> variable . GT comparison
    (111) condition -> variable . GEQ comparison
    (113) condition -> variable .

    EQUALEQUAL      shift and go to state 454
    LT              shift and go to state 453
    LEQ             shift and go to state 452
    GT              shift and go to state 451
    GEQ             shift and go to state 450
    and             reduce using rule 113 (condition -> variable .)
    NEWLINE         reduce using rule 113 (condition -> variable .)
    if              reduce using rule 113 (condition -> variable .)
    unless          reduce using rule 113 (condition -> variable .)
    as              reduce using rule 113 (condition -> variable .)
    rotated         reduce using rule 113 (condition -> variable .)
    facing          reduce using rule 113 (condition -> variable .)
    align           reduce using rule 113 (condition -> variable .)
    at              reduce using rule 113 (condition -> variable .)
    in              reduce using rule 113 (condition -> variable .)
    do              reduce using rule 113 (condition -> variable .)
    then            reduce using rule 113 (condition -> variable .)


state 356

    (112) condition -> vector_var . EQUALEQUAL vector_var

    EQUALEQUAL      shift and go to state 455


state 357

    (120) while_block -> while conditions . newlines blocklist end
    (121) while_block -> while conditions . execute_items newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether

    NEWLINE         shift and go to state 28
    if              shift and go to state 347
    unless          shift and go to state 292
    as              shift and go to state 346
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286

    execute_item                   shift and go to state 271
    execute_items                  shift and go to state 457
    newlines                       shift and go to state 456

state 358

    (114) condition -> not . variable
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ID              shift and go to state 359
    ATID            shift and go to state 17

    variable                       shift and go to state 458
    fullselector                   shift and go to state 381

state 359

    (43) variable -> ID .
    (44) variable -> ID . LBRACK virtualinteger RBRACK
    (45) variable -> ID . LBRACK expr RBRACK

    EQUALEQUAL      reduce using rule 43 (variable -> ID .)
    LT              reduce using rule 43 (variable -> ID .)
    LEQ             reduce using rule 43 (variable -> ID .)
    GT              reduce using rule 43 (variable -> ID .)
    GEQ             reduce using rule 43 (variable -> ID .)
    and             reduce using rule 43 (variable -> ID .)
    NEWLINE         reduce using rule 43 (variable -> ID .)
    if              reduce using rule 43 (variable -> ID .)
    unless          reduce using rule 43 (variable -> ID .)
    as              reduce using rule 43 (variable -> ID .)
    rotated         reduce using rule 43 (variable -> ID .)
    facing          reduce using rule 43 (variable -> ID .)
    align           reduce using rule 43 (variable -> ID .)
    at              reduce using rule 43 (variable -> ID .)
    in              reduce using rule 43 (variable -> ID .)
    do              reduce using rule 43 (variable -> ID .)
    then            reduce using rule 43 (variable -> ID .)
    LPAREN          reduce using rule 43 (variable -> ID .)
    COMMA           reduce using rule 43 (variable -> ID .)
    LBRACK          shift and go to state 341


state 360

    (102) conditions -> condition .
    (103) conditions -> condition . and conditions

    if              reduce using rule 102 (conditions -> condition .)
    unless          reduce using rule 102 (conditions -> condition .)
    as              reduce using rule 102 (conditions -> condition .)
    rotated         reduce using rule 102 (conditions -> condition .)
    facing          reduce using rule 102 (conditions -> condition .)
    align           reduce using rule 102 (conditions -> condition .)
    at              reduce using rule 102 (conditions -> condition .)
    in              reduce using rule 102 (conditions -> condition .)
    do              reduce using rule 102 (conditions -> condition .)
    then            reduce using rule 102 (conditions -> condition .)
    NEWLINE         reduce using rule 102 (conditions -> condition .)
    and             shift and go to state 459


state 361

    (105) condition -> fullselector . EQUALEQUAL variable
    (106) condition -> fullselector .
    (42) variable -> fullselector . DOT ID
    (241) vector_var -> fullselector . DOT LT ID GT

    EQUALEQUAL      shift and go to state 460
    and             reduce using rule 106 (condition -> fullselector .)
    NEWLINE         reduce using rule 106 (condition -> fullselector .)
    if              reduce using rule 106 (condition -> fullselector .)
    unless          reduce using rule 106 (condition -> fullselector .)
    as              reduce using rule 106 (condition -> fullselector .)
    rotated         reduce using rule 106 (condition -> fullselector .)
    facing          reduce using rule 106 (condition -> fullselector .)
    align           reduce using rule 106 (condition -> fullselector .)
    at              reduce using rule 106 (condition -> fullselector .)
    in              reduce using rule 106 (condition -> fullselector .)
    do              reduce using rule 106 (condition -> fullselector .)
    then            reduce using rule 106 (condition -> fullselector .)
    DOT             shift and go to state 461


state 362

    (115) condition -> block . relcoords ID
    (217) relcoords -> . virtualnumber virtualnumber virtualnumber
    (218) relcoords -> . relcoord relcoord relcoord
    (219) relcoords -> . localcoord localcoord localcoord
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    DOLLAR          shift and go to state 62
    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    localcoord                     shift and go to state 334
    virtualnumber                  shift and go to state 331
    relcoord                       shift and go to state 329
    number                         shift and go to state 63
    relcoords                      shift and go to state 462

state 363

    (88) execute_item -> as fullselector .
    (42) variable -> fullselector . DOT ID

    if              reduce using rule 88 (execute_item -> as fullselector .)
    unless          reduce using rule 88 (execute_item -> as fullselector .)
    as              reduce using rule 88 (execute_item -> as fullselector .)
    rotated         reduce using rule 88 (execute_item -> as fullselector .)
    facing          reduce using rule 88 (execute_item -> as fullselector .)
    align           reduce using rule 88 (execute_item -> as fullselector .)
    at              reduce using rule 88 (execute_item -> as fullselector .)
    in              reduce using rule 88 (execute_item -> as fullselector .)
    do              reduce using rule 88 (execute_item -> as fullselector .)
    then            reduce using rule 88 (execute_item -> as fullselector .)
    NEWLINE         reduce using rule 88 (execute_item -> as fullselector .)
    DOT             shift and go to state 463


state 364

    (75) codeblock -> as variable . newlines blocklist end
    (76) codeblock -> as variable . LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> as variable . do codeblock
    (78) codeblock -> as variable . LPAREN ATID RPAREN do codeblock
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    LPAREN          shift and go to state 465
    do              shift and go to state 464
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 466

state 365

    (79) codeblock -> as create_block . newlines blocklist end
    (80) codeblock -> as create_block . do codeblock
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    do              shift and go to state 467
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 468

state 366

    (274) vector_expr -> MINUS . vector_expr
    (260) expr -> MINUS . expr
    (148) number -> MINUS . INTEGER
    (149) number -> MINUS . HEX
    (150) number -> MINUS . BINARY
    (152) number -> MINUS . FLOAT
    (158) virtualinteger -> MINUS . INTEGER
    (159) virtualinteger -> MINUS . HEX
    (160) virtualinteger -> MINUS . BINARY
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    INTEGER         shift and go to state 470
    HEX             shift and go to state 469
    BINARY          shift and go to state 471
    FLOAT           shift and go to state 109
    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 129
    fullselector                   shift and go to state 85
    expr                           shift and go to state 130
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 367

    (96) execute_item -> at vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    if              reduce using rule 96 (execute_item -> at vector_expr .)
    unless          reduce using rule 96 (execute_item -> at vector_expr .)
    as              reduce using rule 96 (execute_item -> at vector_expr .)
    rotated         reduce using rule 96 (execute_item -> at vector_expr .)
    facing          reduce using rule 96 (execute_item -> at vector_expr .)
    align           reduce using rule 96 (execute_item -> at vector_expr .)
    at              reduce using rule 96 (execute_item -> at vector_expr .)
    in              reduce using rule 96 (execute_item -> at vector_expr .)
    do              reduce using rule 96 (execute_item -> at vector_expr .)
    then            reduce using rule 96 (execute_item -> at vector_expr .)
    NEWLINE         reduce using rule 96 (execute_item -> at vector_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 368

    (146) number -> HEX .
    (156) virtualinteger -> HEX .

  ! reduce/reduce conflict for MINUS resolved using rule 146 (number -> HEX .)
  ! reduce/reduce conflict for RPAREN resolved using rule 146 (number -> HEX .)
    DOLLAR          reduce using rule 146 (number -> HEX .)
    INTEGER         reduce using rule 146 (number -> HEX .)
    HEX             reduce using rule 146 (number -> HEX .)
    BINARY          reduce using rule 146 (number -> HEX .)
    MINUS           reduce using rule 146 (number -> HEX .)
    FLOAT           reduce using rule 146 (number -> HEX .)
    TILDE           reduce using rule 146 (number -> HEX .)
    TILDEEMPTY      reduce using rule 146 (number -> HEX .)
    RPAREN          reduce using rule 146 (number -> HEX .)
    PLUS            reduce using rule 156 (virtualinteger -> HEX .)
    TIMES           reduce using rule 156 (virtualinteger -> HEX .)
    DIVIDE          reduce using rule 156 (virtualinteger -> HEX .)
    MOD             reduce using rule 156 (virtualinteger -> HEX .)
    POWER           reduce using rule 156 (virtualinteger -> HEX .)

  ! MINUS           [ reduce using rule 156 (virtualinteger -> HEX .) ]
  ! RPAREN          [ reduce using rule 156 (virtualinteger -> HEX .) ]


state 369

    (154) virtualnumber -> DOLLAR . ID
    (161) virtualinteger -> DOLLAR . ID

    ID              shift and go to state 472


state 370

    (94) execute_item -> at relcoords .

    if              reduce using rule 94 (execute_item -> at relcoords .)
    unless          reduce using rule 94 (execute_item -> at relcoords .)
    as              reduce using rule 94 (execute_item -> at relcoords .)
    rotated         reduce using rule 94 (execute_item -> at relcoords .)
    facing          reduce using rule 94 (execute_item -> at relcoords .)
    align           reduce using rule 94 (execute_item -> at relcoords .)
    at              reduce using rule 94 (execute_item -> at relcoords .)
    in              reduce using rule 94 (execute_item -> at relcoords .)
    do              reduce using rule 94 (execute_item -> at relcoords .)
    then            reduce using rule 94 (execute_item -> at relcoords .)
    NEWLINE         reduce using rule 94 (execute_item -> at relcoords .)


state 371

    (97) execute_item -> at LPAREN . virtualnumber RPAREN vector_expr
    (261) vector_expr -> LPAREN . vector_expr RPAREN
    (259) expr -> LPAREN . expr RPAREN
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    DOLLAR          shift and go to state 369
    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 366
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    INTEGER         shift and go to state 372
    HEX             shift and go to state 368
    BINARY          shift and go to state 373
    FLOAT           shift and go to state 61
    ATID            shift and go to state 17

    virtualnumber                  shift and go to state 473
    vector_expr                    shift and go to state 132
    fullselector                   shift and go to state 85
    expr                           shift and go to state 133
    number                         shift and go to state 63
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 372

    (145) number -> INTEGER .
    (155) virtualinteger -> INTEGER .

  ! reduce/reduce conflict for MINUS resolved using rule 145 (number -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 145 (number -> INTEGER .)
    DOLLAR          reduce using rule 145 (number -> INTEGER .)
    INTEGER         reduce using rule 145 (number -> INTEGER .)
    HEX             reduce using rule 145 (number -> INTEGER .)
    BINARY          reduce using rule 145 (number -> INTEGER .)
    MINUS           reduce using rule 145 (number -> INTEGER .)
    FLOAT           reduce using rule 145 (number -> INTEGER .)
    TILDE           reduce using rule 145 (number -> INTEGER .)
    TILDEEMPTY      reduce using rule 145 (number -> INTEGER .)
    RPAREN          reduce using rule 145 (number -> INTEGER .)
    PLUS            reduce using rule 155 (virtualinteger -> INTEGER .)
    TIMES           reduce using rule 155 (virtualinteger -> INTEGER .)
    DIVIDE          reduce using rule 155 (virtualinteger -> INTEGER .)
    MOD             reduce using rule 155 (virtualinteger -> INTEGER .)
    POWER           reduce using rule 155 (virtualinteger -> INTEGER .)

  ! MINUS           [ reduce using rule 155 (virtualinteger -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 155 (virtualinteger -> INTEGER .) ]


state 373

    (147) number -> BINARY .
    (157) virtualinteger -> BINARY .

  ! reduce/reduce conflict for MINUS resolved using rule 147 (number -> BINARY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 147 (number -> BINARY .)
    DOLLAR          reduce using rule 147 (number -> BINARY .)
    INTEGER         reduce using rule 147 (number -> BINARY .)
    HEX             reduce using rule 147 (number -> BINARY .)
    BINARY          reduce using rule 147 (number -> BINARY .)
    MINUS           reduce using rule 147 (number -> BINARY .)
    FLOAT           reduce using rule 147 (number -> BINARY .)
    TILDE           reduce using rule 147 (number -> BINARY .)
    TILDEEMPTY      reduce using rule 147 (number -> BINARY .)
    RPAREN          reduce using rule 147 (number -> BINARY .)
    PLUS            reduce using rule 157 (virtualinteger -> BINARY .)
    TIMES           reduce using rule 157 (virtualinteger -> BINARY .)
    DIVIDE          reduce using rule 157 (virtualinteger -> BINARY .)
    MOD             reduce using rule 157 (virtualinteger -> BINARY .)
    POWER           reduce using rule 157 (virtualinteger -> BINARY .)

  ! MINUS           [ reduce using rule 157 (virtualinteger -> BINARY .) ]
  ! RPAREN          [ reduce using rule 157 (virtualinteger -> BINARY .) ]


state 374

    (93) execute_item -> at fullselector .
    (95) execute_item -> at fullselector . relcoords
    (264) vector_expr -> fullselector . DOT LT ID GT
    (257) expr -> fullselector . DOT ID
    (217) relcoords -> . virtualnumber virtualnumber virtualnumber
    (218) relcoords -> . relcoord relcoord relcoord
    (219) relcoords -> . localcoord localcoord localcoord
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    if              reduce using rule 93 (execute_item -> at fullselector .)
    unless          reduce using rule 93 (execute_item -> at fullselector .)
    as              reduce using rule 93 (execute_item -> at fullselector .)
    rotated         reduce using rule 93 (execute_item -> at fullselector .)
    facing          reduce using rule 93 (execute_item -> at fullselector .)
    align           reduce using rule 93 (execute_item -> at fullselector .)
    at              reduce using rule 93 (execute_item -> at fullselector .)
    in              reduce using rule 93 (execute_item -> at fullselector .)
    do              reduce using rule 93 (execute_item -> at fullselector .)
    then            reduce using rule 93 (execute_item -> at fullselector .)
    NEWLINE         reduce using rule 93 (execute_item -> at fullselector .)
    DOT             shift and go to state 134
    DOLLAR          shift and go to state 62
    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 331
    localcoord                     shift and go to state 334
    number                         shift and go to state 63
    relcoords                      shift and go to state 474
    relcoord                       shift and go to state 329

state 375

    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    PLUS            shift and go to state 136
    TIMES           shift and go to state 135
    MINUS           shift and go to state 51
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 376

    (100) execute_item -> in the_nether .

    if              reduce using rule 100 (execute_item -> in the_nether .)
    unless          reduce using rule 100 (execute_item -> in the_nether .)
    as              reduce using rule 100 (execute_item -> in the_nether .)
    rotated         reduce using rule 100 (execute_item -> in the_nether .)
    facing          reduce using rule 100 (execute_item -> in the_nether .)
    align           reduce using rule 100 (execute_item -> in the_nether .)
    at              reduce using rule 100 (execute_item -> in the_nether .)
    in              reduce using rule 100 (execute_item -> in the_nether .)
    do              reduce using rule 100 (execute_item -> in the_nether .)
    then            reduce using rule 100 (execute_item -> in the_nether .)
    NEWLINE         reduce using rule 100 (execute_item -> in the_nether .)


state 377

    (98) execute_item -> in overworld .

    if              reduce using rule 98 (execute_item -> in overworld .)
    unless          reduce using rule 98 (execute_item -> in overworld .)
    as              reduce using rule 98 (execute_item -> in overworld .)
    rotated         reduce using rule 98 (execute_item -> in overworld .)
    facing          reduce using rule 98 (execute_item -> in overworld .)
    align           reduce using rule 98 (execute_item -> in overworld .)
    at              reduce using rule 98 (execute_item -> in overworld .)
    in              reduce using rule 98 (execute_item -> in overworld .)
    do              reduce using rule 98 (execute_item -> in overworld .)
    then            reduce using rule 98 (execute_item -> in overworld .)
    NEWLINE         reduce using rule 98 (execute_item -> in overworld .)


state 378

    (99) execute_item -> in the_end .

    if              reduce using rule 99 (execute_item -> in the_end .)
    unless          reduce using rule 99 (execute_item -> in the_end .)
    as              reduce using rule 99 (execute_item -> in the_end .)
    rotated         reduce using rule 99 (execute_item -> in the_end .)
    facing          reduce using rule 99 (execute_item -> in the_end .)
    align           reduce using rule 99 (execute_item -> in the_end .)
    at              reduce using rule 99 (execute_item -> in the_end .)
    in              reduce using rule 99 (execute_item -> in the_end .)
    do              reduce using rule 99 (execute_item -> in the_end .)
    then            reduce using rule 99 (execute_item -> in the_end .)
    NEWLINE         reduce using rule 99 (execute_item -> in the_end .)


state 379

    (118) if_block -> if PYTHON . newlines blocklist end
    (119) if_block -> if PYTHON . newlines blocklist else newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 475

state 380

    (86) execute_item -> if conditions .

    if              reduce using rule 86 (execute_item -> if conditions .)
    unless          reduce using rule 86 (execute_item -> if conditions .)
    as              reduce using rule 86 (execute_item -> if conditions .)
    rotated         reduce using rule 86 (execute_item -> if conditions .)
    facing          reduce using rule 86 (execute_item -> if conditions .)
    align           reduce using rule 86 (execute_item -> if conditions .)
    at              reduce using rule 86 (execute_item -> if conditions .)
    in              reduce using rule 86 (execute_item -> if conditions .)
    do              reduce using rule 86 (execute_item -> if conditions .)
    then            reduce using rule 86 (execute_item -> if conditions .)
    NEWLINE         reduce using rule 86 (execute_item -> if conditions .)


state 381

    (42) variable -> fullselector . DOT ID

    DOT             shift and go to state 463


state 382

    (242) vector_var -> LT variable . COMMA variable COMMA variable GT

    COMMA           shift and go to state 476


state 383

    (240) vector_var -> LT ID . GT
    (43) variable -> ID .
    (44) variable -> ID . LBRACK virtualinteger RBRACK
    (45) variable -> ID . LBRACK expr RBRACK

    GT              shift and go to state 477
    COMMA           reduce using rule 43 (variable -> ID .)
    LBRACK          shift and go to state 341


state 384

    (87) execute_item -> unless conditions .

    if              reduce using rule 87 (execute_item -> unless conditions .)
    unless          reduce using rule 87 (execute_item -> unless conditions .)
    as              reduce using rule 87 (execute_item -> unless conditions .)
    rotated         reduce using rule 87 (execute_item -> unless conditions .)
    facing          reduce using rule 87 (execute_item -> unless conditions .)
    align           reduce using rule 87 (execute_item -> unless conditions .)
    at              reduce using rule 87 (execute_item -> unless conditions .)
    in              reduce using rule 87 (execute_item -> unless conditions .)
    do              reduce using rule 87 (execute_item -> unless conditions .)
    then            reduce using rule 87 (execute_item -> unless conditions .)
    NEWLINE         reduce using rule 87 (execute_item -> unless conditions .)


state 385

    (283) macro_call -> DOLLAR ID . macro_call_args
    (188) pythonassignment -> DOLLAR ID . PYTHON
    (284) macro_call_args -> . LPAREN macro_call_params RPAREN
    (285) macro_call_args -> . empty
    (290) empty -> .

    PYTHON          shift and go to state 212
    LPAREN          shift and go to state 479
    COMMENT         reduce using rule 290 (empty -> .)
    NEWLINE         reduce using rule 290 (empty -> .)

    macro_call_args                shift and go to state 478
    empty                          shift and go to state 480

state 386

    (222) assignment -> variable PLUSEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 481
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 387

    (227) assignment -> variable PLUSPLUS .

    COMMENT         reduce using rule 227 (assignment -> variable PLUSPLUS .)
    NEWLINE         reduce using rule 227 (assignment -> variable PLUSPLUS .)


state 388

    (225) assignment -> variable DIVIDEEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 482
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 389

    (221) assignment -> variable EQUALS . expr
    (229) assignment -> variable EQUALS . fullselector
    (230) assignment -> variable EQUALS . create_block
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    ATID            shift and go to state 17
    create          shift and go to state 266
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 483
    expr                           shift and go to state 484
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21
    create_block                   shift and go to state 485

state 390

    (223) assignment -> variable MINUSEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 486
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 391

    (226) assignment -> variable MODEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 487
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 392

    (224) assignment -> variable TIMESEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 488
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 393

    (228) assignment -> variable MINUSMINUS .

    COMMENT         reduce using rule 228 (assignment -> variable MINUSMINUS .)
    NEWLINE         reduce using rule 228 (assignment -> variable MINUSMINUS .)


state 394

    (18) resetsection -> reset newlines blocklist end .

    NEWLINE         reduce using rule 18 (resetsection -> reset newlines blocklist end .)


state 395

    (232) vector_assignment -> vector_var PLUSEQUALS . vector_expr
    (235) vector_assignment_scalar -> vector_var PLUSEQUALS . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 489
    fullselector                   shift and go to state 85
    expr                           shift and go to state 490
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 396

    (238) vector_assignment_scalar -> vector_var DIVIDEEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 491
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 397

    (231) vector_assignment -> vector_var EQUALS . vector_expr
    (234) vector_assignment_scalar -> vector_var EQUALS . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 492
    fullselector                   shift and go to state 85
    expr                           shift and go to state 493
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 398

    (239) vector_assignment_scalar -> vector_var MODEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 494
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 399

    (233) vector_assignment -> vector_var MINUSEQUALS . vector_expr
    (236) vector_assignment_scalar -> vector_var MINUSEQUALS . expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    scale           shift and go to state 5
    ID              shift and go to state 15
    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 495
    fullselector                   shift and go to state 85
    expr                           shift and go to state 496
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 400

    (237) vector_assignment_scalar -> vector_var TIMESEQUALS . expr
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 497
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 401

    (124) switch_block -> switch expr . newlines cases end
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 498

state 402

    (23) macro_args -> LPAREN . macro_params RPAREN
    (25) macro_params -> . DOLLAR ID COMMA macro_params
    (26) macro_params -> . DOLLAR ID
    (27) macro_params -> . empty
    (290) empty -> .

    DOLLAR          shift and go to state 315
    RPAREN          reduce using rule 290 (empty -> .)

    macro_params                   shift and go to state 499
    empty                          shift and go to state 317

state 403

    (22) macrosection -> macro DOLLAR ID macro_args . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 500

state 404

    (24) macro_args -> empty .

    NEWLINE         reduce using rule 24 (macro_args -> empty .)


state 405

    (185) array_definition -> array ID LBRACK virtualinteger to virtualinteger RBRACK .

    NEWLINE         reduce using rule 185 (array_definition -> array ID LBRACK virtualinteger to virtualinteger RBRACK .)


state 406

    (168) selector_definition -> selector_item newlines . selector_definition
    (167) selector_definition -> . empty
    (168) selector_definition -> . selector_item newlines selector_definition
    (290) empty -> .
    (169) selector_item -> . create PYTHON
    (170) selector_item -> . ID EQUALS data_path data_type virtualnumber
    (171) selector_item -> . ID EQUALS data_path data_type
    (172) selector_item -> . LT ID GT EQUALS data_path data_type virtualnumber
    (173) selector_item -> . LT ID GT EQUALS data_path data_type
    (174) selector_item -> . functionsection
    (20) functionsection -> . function ID LPAREN id_list RPAREN newlines blocklist end

    end             reduce using rule 290 (empty -> .)
    create          shift and go to state 305
    ID              shift and go to state 310
    LT              shift and go to state 306
    function        shift and go to state 308

    selector_item                  shift and go to state 304
    selector_definition            shift and go to state 501
    functionsection                shift and go to state 311
    empty                          shift and go to state 307

state 407

    (169) selector_item -> create PYTHON .

    NEWLINE         reduce using rule 169 (selector_item -> create PYTHON .)


state 408

    (172) selector_item -> LT ID . GT EQUALS data_path data_type virtualnumber
    (173) selector_item -> LT ID . GT EQUALS data_path data_type

    GT              shift and go to state 502


state 409

    (20) functionsection -> function ID . LPAREN id_list RPAREN newlines blocklist end

    LPAREN          shift and go to state 240


state 410

    (166) selector_define_block -> define ATID EQUALS fullselector newlines selector_definition end .

    NEWLINE         reduce using rule 166 (selector_define_block -> define ATID EQUALS fullselector newlines selector_definition end .)


state 411

    (170) selector_item -> ID EQUALS . data_path data_type virtualnumber
    (171) selector_item -> ID EQUALS . data_path data_type
    (175) data_path -> . ID
    (176) data_path -> . ID LBRACK virtualinteger RBRACK
    (177) data_path -> . data_path DOT data_path

    ID              shift and go to state 504

    data_path                      shift and go to state 503

state 412

    (163) block_list -> ID newlines block_list .

    end             reduce using rule 163 (block_list -> ID newlines block_list .)


state 413

    (19) clocksection -> clock ID newlines blocklist end .

    NEWLINE         reduce using rule 19 (clocksection -> clock ID newlines blocklist end .)


state 414

    (25) macro_params -> DOLLAR ID . COMMA macro_params
    (26) macro_params -> DOLLAR ID .

    COMMA           shift and go to state 505
    GT              reduce using rule 26 (macro_params -> DOLLAR ID .)
    RPAREN          reduce using rule 26 (macro_params -> DOLLAR ID .)


state 415

    (21) template_function_section -> function ID LT macro_params GT . LPAREN id_list RPAREN newlines blocklist end

    LPAREN          shift and go to state 506


state 416

    (20) functionsection -> function ID LPAREN id_list RPAREN . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 507

state 417

    (32) id_list -> ID COMMA . id_list
    (32) id_list -> . ID COMMA id_list
    (33) id_list -> . ID
    (34) id_list -> . empty
    (290) empty -> .

    ID              shift and go to state 319
    RPAREN          reduce using rule 290 (empty -> .)

    id_list                        shift and go to state 508
    empty                          shift and go to state 320

state 418

    (72) move_block -> move fullselector relcoords .

    COMMENT         reduce using rule 72 (move_block -> move fullselector relcoords .)
    NEWLINE         reduce using rule 72 (move_block -> move fullselector relcoords .)


state 419

    (131) codeblock -> title fullselector PYTHON .

    COMMENT         reduce using rule 131 (codeblock -> title fullselector PYTHON .)
    NEWLINE         reduce using rule 131 (codeblock -> title fullselector PYTHON .)


state 420

    (134) codeblock -> title fullselector virtualinteger . virtualinteger virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 509

state 421

    (241) vector_var -> fullselector DOT LT . ID GT

    ID              shift and go to state 510


state 422

    (278) method_call -> fullselector DOT ID . LPAREN exprlist RPAREN
    (42) variable -> fullselector DOT ID .

    LPAREN          shift and go to state 511
    EQUALS          reduce using rule 42 (variable -> fullselector DOT ID .)
    PLUSEQUALS      reduce using rule 42 (variable -> fullselector DOT ID .)
    MINUSEQUALS     reduce using rule 42 (variable -> fullselector DOT ID .)
    TIMESEQUALS     reduce using rule 42 (variable -> fullselector DOT ID .)
    DIVIDEEQUALS    reduce using rule 42 (variable -> fullselector DOT ID .)
    MODEQUALS       reduce using rule 42 (variable -> fullselector DOT ID .)
    PLUSPLUS        reduce using rule 42 (variable -> fullselector DOT ID .)
    MINUSMINUS      reduce using rule 42 (variable -> fullselector DOT ID .)


state 423

    (214) localcoord -> POWER virtualnumber .

    if              reduce using rule 214 (localcoord -> POWER virtualnumber .)
    unless          reduce using rule 214 (localcoord -> POWER virtualnumber .)
    as              reduce using rule 214 (localcoord -> POWER virtualnumber .)
    rotated         reduce using rule 214 (localcoord -> POWER virtualnumber .)
    facing          reduce using rule 214 (localcoord -> POWER virtualnumber .)
    align           reduce using rule 214 (localcoord -> POWER virtualnumber .)
    at              reduce using rule 214 (localcoord -> POWER virtualnumber .)
    in              reduce using rule 214 (localcoord -> POWER virtualnumber .)
    do              reduce using rule 214 (localcoord -> POWER virtualnumber .)
    then            reduce using rule 214 (localcoord -> POWER virtualnumber .)
    NEWLINE         reduce using rule 214 (localcoord -> POWER virtualnumber .)
    COMMENT         reduce using rule 214 (localcoord -> POWER virtualnumber .)
    ID              reduce using rule 214 (localcoord -> POWER virtualnumber .)
    POWER           reduce using rule 214 (localcoord -> POWER virtualnumber .)
    POWEREMPTY      reduce using rule 214 (localcoord -> POWER virtualnumber .)


state 424

    (210) relcoord -> virtualnumber .

    TILDE           reduce using rule 210 (relcoord -> virtualnumber .)
    TILDEEMPTY      reduce using rule 210 (relcoord -> virtualnumber .)
    DOLLAR          reduce using rule 210 (relcoord -> virtualnumber .)
    INTEGER         reduce using rule 210 (relcoord -> virtualnumber .)
    HEX             reduce using rule 210 (relcoord -> virtualnumber .)
    BINARY          reduce using rule 210 (relcoord -> virtualnumber .)
    MINUS           reduce using rule 210 (relcoord -> virtualnumber .)
    FLOAT           reduce using rule 210 (relcoord -> virtualnumber .)
    if              reduce using rule 210 (relcoord -> virtualnumber .)
    unless          reduce using rule 210 (relcoord -> virtualnumber .)
    as              reduce using rule 210 (relcoord -> virtualnumber .)
    rotated         reduce using rule 210 (relcoord -> virtualnumber .)
    facing          reduce using rule 210 (relcoord -> virtualnumber .)
    align           reduce using rule 210 (relcoord -> virtualnumber .)
    at              reduce using rule 210 (relcoord -> virtualnumber .)
    in              reduce using rule 210 (relcoord -> virtualnumber .)
    do              reduce using rule 210 (relcoord -> virtualnumber .)
    then            reduce using rule 210 (relcoord -> virtualnumber .)
    NEWLINE         reduce using rule 210 (relcoord -> virtualnumber .)
    COMMENT         reduce using rule 210 (relcoord -> virtualnumber .)
    ID              reduce using rule 210 (relcoord -> virtualnumber .)


state 425

    (218) relcoords -> relcoord relcoord . relcoord
    (210) relcoord -> . virtualnumber
    (211) relcoord -> . TILDE virtualnumber
    (212) relcoord -> . TILDEEMPTY
    (213) relcoord -> . TILDE
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    TILDE           shift and go to state 330
    TILDEEMPTY      shift and go to state 326
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 424
    relcoord                       shift and go to state 512
    number                         shift and go to state 63

state 426

    (211) relcoord -> TILDE virtualnumber .

    TILDE           reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    TILDEEMPTY      reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    DOLLAR          reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    INTEGER         reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    HEX             reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    BINARY          reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    MINUS           reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    FLOAT           reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    if              reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    unless          reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    as              reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    rotated         reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    facing          reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    align           reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    at              reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    in              reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    do              reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    then            reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    NEWLINE         reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    COMMENT         reduce using rule 211 (relcoord -> TILDE virtualnumber .)
    ID              reduce using rule 211 (relcoord -> TILDE virtualnumber .)


state 427

    (217) relcoords -> virtualnumber virtualnumber . virtualnumber
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 513
    number                         shift and go to state 63

state 428

    (219) relcoords -> localcoord localcoord . localcoord
    (214) localcoord -> . POWER virtualnumber
    (215) localcoord -> . POWEREMPTY
    (216) localcoord -> . POWER

    POWER           shift and go to state 328
    POWEREMPTY      shift and go to state 327

    localcoord                     shift and go to state 514

state 429

    (101) codeblock -> for ATID in . fullselector newlines blocklist end
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ATID            shift and go to state 17

    fullselector                   shift and go to state 515

state 430

    (73) for_block -> for DOLLAR ID . in PYTHON newlines blocklist end

    in              shift and go to state 516


state 431

    (122) for_block -> for ID EQUALS . expr to expr by expr newlines blocklist end
    (123) for_block -> for ID EQUALS . expr to expr newlines blocklist end
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 517
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 432

    (133) codeblock -> actionbar fullselector PYTHON .

    COMMENT         reduce using rule 133 (codeblock -> actionbar fullselector PYTHON .)
    NEWLINE         reduce using rule 133 (codeblock -> actionbar fullselector PYTHON .)


state 433

    (136) codeblock -> actionbar fullselector virtualinteger . virtualinteger virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 518

state 434

    (132) codeblock -> subtitle fullselector PYTHON .

    COMMENT         reduce using rule 132 (codeblock -> subtitle fullselector PYTHON .)
    NEWLINE         reduce using rule 132 (codeblock -> subtitle fullselector PYTHON .)


state 435

    (135) codeblock -> subtitle fullselector virtualinteger . virtualinteger virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 519

state 436

    (186) create_block -> create ATID relcoords .

    COMMENT         reduce using rule 186 (create_block -> create ATID relcoords .)
    NEWLINE         reduce using rule 186 (create_block -> create ATID relcoords .)
    do              reduce using rule 186 (create_block -> create ATID relcoords .)


state 437

    (45) variable -> ID LBRACK expr . RBRACK
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    RBRACK          shift and go to state 520
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 438

    (44) variable -> ID LBRACK virtualinteger . RBRACK
    (252) expr -> virtualinteger .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 521
    PLUS            reduce using rule 252 (expr -> virtualinteger .)
    MINUS           reduce using rule 252 (expr -> virtualinteger .)
    TIMES           reduce using rule 252 (expr -> virtualinteger .)
    DIVIDE          reduce using rule 252 (expr -> virtualinteger .)
    MOD             reduce using rule 252 (expr -> virtualinteger .)
    POWER           reduce using rule 252 (expr -> virtualinteger .)

  ! RBRACK          [ reduce using rule 252 (expr -> virtualinteger .) ]


state 439

    (286) macro_call_params -> macro_call_param . COMMA macro_call_params
    (287) macro_call_params -> macro_call_param .

    COMMA           shift and go to state 522
    GT              reduce using rule 287 (macro_call_params -> macro_call_param .)
    RPAREN          reduce using rule 287 (macro_call_params -> macro_call_param .)


state 440

    (282) template_function_call -> ID LT macro_call_params . GT LPAREN exprlist RPAREN

    GT              shift and go to state 523


state 441

    (289) macro_call_param -> virtualnumber .

    COMMA           reduce using rule 289 (macro_call_param -> virtualnumber .)
    GT              reduce using rule 289 (macro_call_param -> virtualnumber .)
    RPAREN          reduce using rule 289 (macro_call_param -> virtualnumber .)


state 442

    (288) macro_call_params -> empty .

    GT              reduce using rule 288 (macro_call_params -> empty .)
    RPAREN          reduce using rule 288 (macro_call_params -> empty .)


state 443

    (74) trigger_block -> trigger fullselector DOT . ID newlines blocklist end

    ID              shift and go to state 524


state 444

    (130) tell_block -> tell fullselector PYTHON .

    COMMENT         reduce using rule 130 (tell_block -> tell fullselector PYTHON .)
    NEWLINE         reduce using rule 130 (tell_block -> tell fullselector PYTHON .)


state 445

    (88) execute_item -> as fullselector .

    if              reduce using rule 88 (execute_item -> as fullselector .)
    unless          reduce using rule 88 (execute_item -> as fullselector .)
    as              reduce using rule 88 (execute_item -> as fullselector .)
    rotated         reduce using rule 88 (execute_item -> as fullselector .)
    facing          reduce using rule 88 (execute_item -> as fullselector .)
    align           reduce using rule 88 (execute_item -> as fullselector .)
    at              reduce using rule 88 (execute_item -> as fullselector .)
    in              reduce using rule 88 (execute_item -> as fullselector .)
    do              reduce using rule 88 (execute_item -> as fullselector .)
    then            reduce using rule 88 (execute_item -> as fullselector .)
    NEWLINE         reduce using rule 88 (execute_item -> as fullselector .)


state 446

    (48) blocklist -> codeblock optcomment newlines . blocklist
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    else            reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 525
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 447

    (82) execute_block -> execute_items do codeblock .

    COMMENT         reduce using rule 82 (execute_block -> execute_items do codeblock .)
    NEWLINE         reduce using rule 82 (execute_block -> execute_items do codeblock .)


state 448

    (83) execute_block -> execute_items then codeblock .

    COMMENT         reduce using rule 83 (execute_block -> execute_items then codeblock .)
    NEWLINE         reduce using rule 83 (execute_block -> execute_items then codeblock .)


state 449

    (81) execute_block -> execute_items newlines blocklist . end

    end             shift and go to state 526


state 450

    (111) condition -> variable GEQ . comparison
    (116) comparison -> . virtualinteger
    (117) comparison -> . variable
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11
    ID              shift and go to state 359
    ATID            shift and go to state 17

    comparison                     shift and go to state 527
    fullselector                   shift and go to state 381
    virtualinteger                 shift and go to state 528
    variable                       shift and go to state 529

state 451

    (110) condition -> variable GT . comparison
    (116) comparison -> . virtualinteger
    (117) comparison -> . variable
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11
    ID              shift and go to state 359
    ATID            shift and go to state 17

    comparison                     shift and go to state 530
    fullselector                   shift and go to state 381
    virtualinteger                 shift and go to state 528
    variable                       shift and go to state 529

state 452

    (108) condition -> variable LEQ . comparison
    (116) comparison -> . virtualinteger
    (117) comparison -> . variable
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11
    ID              shift and go to state 359
    ATID            shift and go to state 17

    comparison                     shift and go to state 531
    fullselector                   shift and go to state 381
    virtualinteger                 shift and go to state 528
    variable                       shift and go to state 529

state 453

    (107) condition -> variable LT . comparison
    (116) comparison -> . virtualinteger
    (117) comparison -> . variable
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11
    ID              shift and go to state 359
    ATID            shift and go to state 17

    comparison                     shift and go to state 532
    fullselector                   shift and go to state 381
    virtualinteger                 shift and go to state 528
    variable                       shift and go to state 529

state 454

    (104) condition -> variable EQUALEQUAL . fullselector
    (109) condition -> variable EQUALEQUAL . comparison
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (116) comparison -> . virtualinteger
    (117) comparison -> . variable
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK

    ATID            shift and go to state 17
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11
    ID              shift and go to state 359

    comparison                     shift and go to state 533
    fullselector                   shift and go to state 534
    virtualinteger                 shift and go to state 528
    variable                       shift and go to state 529

state 455

    (112) condition -> vector_var EQUALEQUAL . vector_var
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    LT              shift and go to state 291
    ATID            shift and go to state 17

    fullselector                   shift and go to state 535
    vector_var                     shift and go to state 536

state 456

    (120) while_block -> while conditions newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 537
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 457

    (121) while_block -> while conditions execute_items . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 538

state 458

    (114) condition -> not variable .

    and             reduce using rule 114 (condition -> not variable .)
    NEWLINE         reduce using rule 114 (condition -> not variable .)
    if              reduce using rule 114 (condition -> not variable .)
    unless          reduce using rule 114 (condition -> not variable .)
    as              reduce using rule 114 (condition -> not variable .)
    rotated         reduce using rule 114 (condition -> not variable .)
    facing          reduce using rule 114 (condition -> not variable .)
    align           reduce using rule 114 (condition -> not variable .)
    at              reduce using rule 114 (condition -> not variable .)
    in              reduce using rule 114 (condition -> not variable .)
    do              reduce using rule 114 (condition -> not variable .)
    then            reduce using rule 114 (condition -> not variable .)


state 459

    (103) conditions -> condition and . conditions
    (102) conditions -> . condition
    (103) conditions -> . condition and conditions
    (104) condition -> . variable EQUALEQUAL fullselector
    (105) condition -> . fullselector EQUALEQUAL variable
    (106) condition -> . fullselector
    (107) condition -> . variable LT comparison
    (108) condition -> . variable LEQ comparison
    (109) condition -> . variable EQUALEQUAL comparison
    (110) condition -> . variable GT comparison
    (111) condition -> . variable GEQ comparison
    (112) condition -> . vector_var EQUALEQUAL vector_var
    (113) condition -> . variable
    (114) condition -> . not variable
    (115) condition -> . block relcoords ID
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    not             shift and go to state 358
    block           shift and go to state 362
    ID              shift and go to state 359
    ATID            shift and go to state 17
    LT              shift and go to state 291

    fullselector                   shift and go to state 361
    vector_var                     shift and go to state 356
    variable                       shift and go to state 355
    conditions                     shift and go to state 539
    condition                      shift and go to state 360

state 460

    (105) condition -> fullselector EQUALEQUAL . variable
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ID              shift and go to state 359
    ATID            shift and go to state 17

    fullselector                   shift and go to state 381
    variable                       shift and go to state 540

state 461

    (42) variable -> fullselector DOT . ID
    (241) vector_var -> fullselector DOT . LT ID GT

    ID              shift and go to state 541
    LT              shift and go to state 421


state 462

    (115) condition -> block relcoords . ID

    ID              shift and go to state 542


state 463

    (42) variable -> fullselector DOT . ID

    ID              shift and go to state 541


state 464

    (77) codeblock -> as variable do . codeblock
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    variable                       shift and go to state 295
    codeblock                      shift and go to state 543
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    selectorassignment_block       shift and go to state 251
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    vector_assignment_scalar       shift and go to state 263
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 465

    (76) codeblock -> as variable LPAREN . ATID RPAREN newlines blocklist end
    (78) codeblock -> as variable LPAREN . ATID RPAREN do codeblock

    ATID            shift and go to state 544


state 466

    (75) codeblock -> as variable newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 545
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 467

    (80) codeblock -> as create_block do . codeblock
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    variable                       shift and go to state 295
    codeblock                      shift and go to state 546
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    selectorassignment_block       shift and go to state 251
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    vector_assignment_scalar       shift and go to state 263
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 468

    (79) codeblock -> as create_block newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 547
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 469

    (149) number -> MINUS HEX .
    (159) virtualinteger -> MINUS HEX .
    (156) virtualinteger -> HEX .

  ! reduce/reduce conflict for MINUS resolved using rule 149 (number -> MINUS HEX .)
  ! reduce/reduce conflict for RPAREN resolved using rule 149 (number -> MINUS HEX .)
  ! reduce/reduce conflict for PLUS resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for TIMES resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for MINUS resolved using rule 149 (number -> MINUS HEX .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for MOD resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for POWER resolved using rule 156 (virtualinteger -> HEX .)
  ! reduce/reduce conflict for RPAREN resolved using rule 149 (number -> MINUS HEX .)
    DOLLAR          reduce using rule 149 (number -> MINUS HEX .)
    INTEGER         reduce using rule 149 (number -> MINUS HEX .)
    HEX             reduce using rule 149 (number -> MINUS HEX .)
    BINARY          reduce using rule 149 (number -> MINUS HEX .)
    MINUS           reduce using rule 149 (number -> MINUS HEX .)
    FLOAT           reduce using rule 149 (number -> MINUS HEX .)
    TILDE           reduce using rule 149 (number -> MINUS HEX .)
    TILDEEMPTY      reduce using rule 149 (number -> MINUS HEX .)
    RPAREN          reduce using rule 149 (number -> MINUS HEX .)
    PLUS            reduce using rule 156 (virtualinteger -> HEX .)
    TIMES           reduce using rule 156 (virtualinteger -> HEX .)
    DIVIDE          reduce using rule 156 (virtualinteger -> HEX .)
    MOD             reduce using rule 156 (virtualinteger -> HEX .)
    POWER           reduce using rule 156 (virtualinteger -> HEX .)

  ! PLUS            [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! TIMES           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! MINUS           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! DIVIDE          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! MOD             [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! POWER           [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! RPAREN          [ reduce using rule 159 (virtualinteger -> MINUS HEX .) ]
  ! MINUS           [ reduce using rule 156 (virtualinteger -> HEX .) ]
  ! RPAREN          [ reduce using rule 156 (virtualinteger -> HEX .) ]


state 470

    (148) number -> MINUS INTEGER .
    (158) virtualinteger -> MINUS INTEGER .
    (155) virtualinteger -> INTEGER .

  ! reduce/reduce conflict for MINUS resolved using rule 148 (number -> MINUS INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 148 (number -> MINUS INTEGER .)
  ! reduce/reduce conflict for PLUS resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for TIMES resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for MINUS resolved using rule 148 (number -> MINUS INTEGER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for MOD resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for POWER resolved using rule 155 (virtualinteger -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 148 (number -> MINUS INTEGER .)
    DOLLAR          reduce using rule 148 (number -> MINUS INTEGER .)
    INTEGER         reduce using rule 148 (number -> MINUS INTEGER .)
    HEX             reduce using rule 148 (number -> MINUS INTEGER .)
    BINARY          reduce using rule 148 (number -> MINUS INTEGER .)
    MINUS           reduce using rule 148 (number -> MINUS INTEGER .)
    FLOAT           reduce using rule 148 (number -> MINUS INTEGER .)
    TILDE           reduce using rule 148 (number -> MINUS INTEGER .)
    TILDEEMPTY      reduce using rule 148 (number -> MINUS INTEGER .)
    RPAREN          reduce using rule 148 (number -> MINUS INTEGER .)
    PLUS            reduce using rule 155 (virtualinteger -> INTEGER .)
    TIMES           reduce using rule 155 (virtualinteger -> INTEGER .)
    DIVIDE          reduce using rule 155 (virtualinteger -> INTEGER .)
    MOD             reduce using rule 155 (virtualinteger -> INTEGER .)
    POWER           reduce using rule 155 (virtualinteger -> INTEGER .)

  ! PLUS            [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! TIMES           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! MINUS           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! DIVIDE          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! MOD             [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! POWER           [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! RPAREN          [ reduce using rule 158 (virtualinteger -> MINUS INTEGER .) ]
  ! MINUS           [ reduce using rule 155 (virtualinteger -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 155 (virtualinteger -> INTEGER .) ]


state 471

    (150) number -> MINUS BINARY .
    (160) virtualinteger -> MINUS BINARY .
    (157) virtualinteger -> BINARY .

  ! reduce/reduce conflict for MINUS resolved using rule 150 (number -> MINUS BINARY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 150 (number -> MINUS BINARY .)
  ! reduce/reduce conflict for PLUS resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for TIMES resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for MINUS resolved using rule 150 (number -> MINUS BINARY .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for MOD resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for POWER resolved using rule 157 (virtualinteger -> BINARY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 150 (number -> MINUS BINARY .)
    DOLLAR          reduce using rule 150 (number -> MINUS BINARY .)
    INTEGER         reduce using rule 150 (number -> MINUS BINARY .)
    HEX             reduce using rule 150 (number -> MINUS BINARY .)
    BINARY          reduce using rule 150 (number -> MINUS BINARY .)
    MINUS           reduce using rule 150 (number -> MINUS BINARY .)
    FLOAT           reduce using rule 150 (number -> MINUS BINARY .)
    TILDE           reduce using rule 150 (number -> MINUS BINARY .)
    TILDEEMPTY      reduce using rule 150 (number -> MINUS BINARY .)
    RPAREN          reduce using rule 150 (number -> MINUS BINARY .)
    PLUS            reduce using rule 157 (virtualinteger -> BINARY .)
    TIMES           reduce using rule 157 (virtualinteger -> BINARY .)
    DIVIDE          reduce using rule 157 (virtualinteger -> BINARY .)
    MOD             reduce using rule 157 (virtualinteger -> BINARY .)
    POWER           reduce using rule 157 (virtualinteger -> BINARY .)

  ! PLUS            [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! TIMES           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! MINUS           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! DIVIDE          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! MOD             [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! POWER           [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! RPAREN          [ reduce using rule 160 (virtualinteger -> MINUS BINARY .) ]
  ! MINUS           [ reduce using rule 157 (virtualinteger -> BINARY .) ]
  ! RPAREN          [ reduce using rule 157 (virtualinteger -> BINARY .) ]


state 472

    (154) virtualnumber -> DOLLAR ID .
    (161) virtualinteger -> DOLLAR ID .

  ! reduce/reduce conflict for MINUS resolved using rule 154 (virtualnumber -> DOLLAR ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 154 (virtualnumber -> DOLLAR ID .)
    RPAREN          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    DOLLAR          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    INTEGER         reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    HEX             reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    BINARY          reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    MINUS           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    FLOAT           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    TILDE           reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    TILDEEMPTY      reduce using rule 154 (virtualnumber -> DOLLAR ID .)
    PLUS            reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    TIMES           reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    DIVIDE          reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    MOD             reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    POWER           reduce using rule 161 (virtualinteger -> DOLLAR ID .)

  ! MINUS           [ reduce using rule 161 (virtualinteger -> DOLLAR ID .) ]
  ! RPAREN          [ reduce using rule 161 (virtualinteger -> DOLLAR ID .) ]


state 473

    (97) execute_item -> at LPAREN virtualnumber . RPAREN vector_expr

    RPAREN          shift and go to state 548


state 474

    (95) execute_item -> at fullselector relcoords .

    if              reduce using rule 95 (execute_item -> at fullselector relcoords .)
    unless          reduce using rule 95 (execute_item -> at fullselector relcoords .)
    as              reduce using rule 95 (execute_item -> at fullselector relcoords .)
    rotated         reduce using rule 95 (execute_item -> at fullselector relcoords .)
    facing          reduce using rule 95 (execute_item -> at fullselector relcoords .)
    align           reduce using rule 95 (execute_item -> at fullselector relcoords .)
    at              reduce using rule 95 (execute_item -> at fullselector relcoords .)
    in              reduce using rule 95 (execute_item -> at fullselector relcoords .)
    do              reduce using rule 95 (execute_item -> at fullselector relcoords .)
    then            reduce using rule 95 (execute_item -> at fullselector relcoords .)
    NEWLINE         reduce using rule 95 (execute_item -> at fullselector relcoords .)


state 475

    (118) if_block -> if PYTHON newlines . blocklist end
    (119) if_block -> if PYTHON newlines . blocklist else newlines blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    else            reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 549
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 476

    (242) vector_var -> LT variable COMMA . variable COMMA variable GT
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ID              shift and go to state 359
    ATID            shift and go to state 17

    variable                       shift and go to state 550
    fullselector                   shift and go to state 381

state 477

    (240) vector_var -> LT ID GT .

    EQUALEQUAL      reduce using rule 240 (vector_var -> LT ID GT .)
    EQUALS          reduce using rule 240 (vector_var -> LT ID GT .)
    PLUSEQUALS      reduce using rule 240 (vector_var -> LT ID GT .)
    MINUSEQUALS     reduce using rule 240 (vector_var -> LT ID GT .)
    TIMESEQUALS     reduce using rule 240 (vector_var -> LT ID GT .)
    DIVIDEEQUALS    reduce using rule 240 (vector_var -> LT ID GT .)
    MODEQUALS       reduce using rule 240 (vector_var -> LT ID GT .)
    and             reduce using rule 240 (vector_var -> LT ID GT .)
    NEWLINE         reduce using rule 240 (vector_var -> LT ID GT .)
    if              reduce using rule 240 (vector_var -> LT ID GT .)
    unless          reduce using rule 240 (vector_var -> LT ID GT .)
    as              reduce using rule 240 (vector_var -> LT ID GT .)
    rotated         reduce using rule 240 (vector_var -> LT ID GT .)
    facing          reduce using rule 240 (vector_var -> LT ID GT .)
    align           reduce using rule 240 (vector_var -> LT ID GT .)
    at              reduce using rule 240 (vector_var -> LT ID GT .)
    in              reduce using rule 240 (vector_var -> LT ID GT .)
    do              reduce using rule 240 (vector_var -> LT ID GT .)
    then            reduce using rule 240 (vector_var -> LT ID GT .)


state 478

    (283) macro_call -> DOLLAR ID macro_call_args .

    COMMENT         reduce using rule 283 (macro_call -> DOLLAR ID macro_call_args .)
    NEWLINE         reduce using rule 283 (macro_call -> DOLLAR ID macro_call_args .)


state 479

    (284) macro_call_args -> LPAREN . macro_call_params RPAREN
    (286) macro_call_params -> . macro_call_param COMMA macro_call_params
    (287) macro_call_params -> . macro_call_param
    (288) macro_call_params -> . empty
    (289) macro_call_param -> . virtualnumber
    (290) empty -> .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    RPAREN          reduce using rule 290 (empty -> .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 441
    number                         shift and go to state 63
    macro_call_params              shift and go to state 551
    empty                          shift and go to state 442
    macro_call_param               shift and go to state 439

state 480

    (285) macro_call_args -> empty .

    COMMENT         reduce using rule 285 (macro_call_args -> empty .)
    NEWLINE         reduce using rule 285 (macro_call_args -> empty .)


state 481

    (222) assignment -> variable PLUSEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 222 (assignment -> variable PLUSEQUALS expr .)
    NEWLINE         reduce using rule 222 (assignment -> variable PLUSEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 482

    (225) assignment -> variable DIVIDEEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 225 (assignment -> variable DIVIDEEQUALS expr .)
    NEWLINE         reduce using rule 225 (assignment -> variable DIVIDEEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 483

    (229) assignment -> variable EQUALS fullselector .
    (257) expr -> fullselector . DOT ID
    (264) vector_expr -> fullselector . DOT LT ID GT

    COMMENT         reduce using rule 229 (assignment -> variable EQUALS fullselector .)
    NEWLINE         reduce using rule 229 (assignment -> variable EQUALS fullselector .)
    DOT             shift and go to state 46


state 484

    (221) assignment -> variable EQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 221 (assignment -> variable EQUALS expr .)
    NEWLINE         reduce using rule 221 (assignment -> variable EQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 485

    (230) assignment -> variable EQUALS create_block .

    COMMENT         reduce using rule 230 (assignment -> variable EQUALS create_block .)
    NEWLINE         reduce using rule 230 (assignment -> variable EQUALS create_block .)


state 486

    (223) assignment -> variable MINUSEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 223 (assignment -> variable MINUSEQUALS expr .)
    NEWLINE         reduce using rule 223 (assignment -> variable MINUSEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 487

    (226) assignment -> variable MODEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 226 (assignment -> variable MODEQUALS expr .)
    NEWLINE         reduce using rule 226 (assignment -> variable MODEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 488

    (224) assignment -> variable TIMESEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 224 (assignment -> variable TIMESEQUALS expr .)
    NEWLINE         reduce using rule 224 (assignment -> variable TIMESEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 489

    (232) vector_assignment -> vector_var PLUSEQUALS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    COMMENT         reduce using rule 232 (vector_assignment -> vector_var PLUSEQUALS vector_expr .)
    NEWLINE         reduce using rule 232 (vector_assignment -> vector_var PLUSEQUALS vector_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 490

    (235) vector_assignment_scalar -> vector_var PLUSEQUALS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    COMMENT         reduce using rule 235 (vector_assignment_scalar -> vector_var PLUSEQUALS expr .)
    NEWLINE         reduce using rule 235 (vector_assignment_scalar -> vector_var PLUSEQUALS expr .)
    PLUS            shift and go to state 136
    TIMES           shift and go to state 135
    MINUS           shift and go to state 51
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 491

    (238) vector_assignment_scalar -> vector_var DIVIDEEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 238 (vector_assignment_scalar -> vector_var DIVIDEEQUALS expr .)
    NEWLINE         reduce using rule 238 (vector_assignment_scalar -> vector_var DIVIDEEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 492

    (231) vector_assignment -> vector_var EQUALS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    COMMENT         reduce using rule 231 (vector_assignment -> vector_var EQUALS vector_expr .)
    NEWLINE         reduce using rule 231 (vector_assignment -> vector_var EQUALS vector_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 493

    (234) vector_assignment_scalar -> vector_var EQUALS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    COMMENT         reduce using rule 234 (vector_assignment_scalar -> vector_var EQUALS expr .)
    NEWLINE         reduce using rule 234 (vector_assignment_scalar -> vector_var EQUALS expr .)
    PLUS            shift and go to state 136
    TIMES           shift and go to state 135
    MINUS           shift and go to state 51
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 494

    (239) vector_assignment_scalar -> vector_var MODEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 239 (vector_assignment_scalar -> vector_var MODEQUALS expr .)
    NEWLINE         reduce using rule 239 (vector_assignment_scalar -> vector_var MODEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 495

    (233) vector_assignment -> vector_var MINUSEQUALS vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    COMMENT         reduce using rule 233 (vector_assignment -> vector_var MINUSEQUALS vector_expr .)
    NEWLINE         reduce using rule 233 (vector_assignment -> vector_var MINUSEQUALS vector_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 496

    (236) vector_assignment_scalar -> vector_var MINUSEQUALS expr .
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY

    COMMENT         reduce using rule 236 (vector_assignment_scalar -> vector_var MINUSEQUALS expr .)
    NEWLINE         reduce using rule 236 (vector_assignment_scalar -> vector_var MINUSEQUALS expr .)
    PLUS            shift and go to state 136
    TIMES           shift and go to state 135
    MINUS           shift and go to state 51
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 497

    (237) vector_assignment_scalar -> vector_var TIMESEQUALS expr .
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    COMMENT         reduce using rule 237 (vector_assignment_scalar -> vector_var TIMESEQUALS expr .)
    NEWLINE         reduce using rule 237 (vector_assignment_scalar -> vector_var TIMESEQUALS expr .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 498

    (124) switch_block -> switch expr newlines . cases end
    (125) cases -> . switch_case newlines
    (126) cases -> . switch_case newlines cases
    (127) switch_case -> . case virtualinteger newlines blocklist end
    (128) switch_case -> . case virtualinteger to virtualinteger newlines blocklist end
    (129) switch_case -> . case DOLLAR ID in PYTHON newlines blocklist end

    case            shift and go to state 552

    switch_case                    shift and go to state 553
    cases                          shift and go to state 554

state 499

    (23) macro_args -> LPAREN macro_params . RPAREN

    RPAREN          shift and go to state 555


state 500

    (22) macrosection -> macro DOLLAR ID macro_args newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    vector_assignment_block        shift and go to state 258
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 556
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 501

    (168) selector_definition -> selector_item newlines selector_definition .

    end             reduce using rule 168 (selector_definition -> selector_item newlines selector_definition .)


state 502

    (172) selector_item -> LT ID GT . EQUALS data_path data_type virtualnumber
    (173) selector_item -> LT ID GT . EQUALS data_path data_type

    EQUALS          shift and go to state 557


state 503

    (170) selector_item -> ID EQUALS data_path . data_type virtualnumber
    (171) selector_item -> ID EQUALS data_path . data_type
    (177) data_path -> data_path . DOT data_path
    (178) data_type -> . byte
    (179) data_type -> . double
    (180) data_type -> . float
    (181) data_type -> . int
    (182) data_type -> . long
    (183) data_type -> . short

    DOT             shift and go to state 565
    byte            shift and go to state 564
    double          shift and go to state 560
    float           shift and go to state 559
    int             shift and go to state 562
    long            shift and go to state 561
    short           shift and go to state 563

    data_type                      shift and go to state 558

state 504

    (175) data_path -> ID .
    (176) data_path -> ID . LBRACK virtualinteger RBRACK

    DOT             reduce using rule 175 (data_path -> ID .)
    byte            reduce using rule 175 (data_path -> ID .)
    double          reduce using rule 175 (data_path -> ID .)
    float           reduce using rule 175 (data_path -> ID .)
    int             reduce using rule 175 (data_path -> ID .)
    long            reduce using rule 175 (data_path -> ID .)
    short           reduce using rule 175 (data_path -> ID .)
    LBRACK          shift and go to state 566


state 505

    (25) macro_params -> DOLLAR ID COMMA . macro_params
    (25) macro_params -> . DOLLAR ID COMMA macro_params
    (26) macro_params -> . DOLLAR ID
    (27) macro_params -> . empty
    (290) empty -> .

    DOLLAR          shift and go to state 315
    GT              reduce using rule 290 (empty -> .)
    RPAREN          reduce using rule 290 (empty -> .)

    macro_params                   shift and go to state 567
    empty                          shift and go to state 317

state 506

    (21) template_function_section -> function ID LT macro_params GT LPAREN . id_list RPAREN newlines blocklist end
    (32) id_list -> . ID COMMA id_list
    (33) id_list -> . ID
    (34) id_list -> . empty
    (290) empty -> .

    ID              shift and go to state 319
    RPAREN          reduce using rule 290 (empty -> .)

    empty                          shift and go to state 320
    id_list                        shift and go to state 568

state 507

    (20) functionsection -> function ID LPAREN id_list RPAREN newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 569
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 508

    (32) id_list -> ID COMMA id_list .

    RPAREN          reduce using rule 32 (id_list -> ID COMMA id_list .)


state 509

    (134) codeblock -> title fullselector virtualinteger virtualinteger . virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 570

state 510

    (241) vector_var -> fullselector DOT LT ID . GT

    GT              shift and go to state 571


state 511

    (278) method_call -> fullselector DOT ID LPAREN . exprlist RPAREN
    (279) exprlist -> . exprlist COMMA expr
    (280) exprlist -> . expr
    (281) exprlist -> . empty
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (290) empty -> .
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    RPAREN          reduce using rule 290 (empty -> .)
    COMMA           reduce using rule 290 (empty -> .)
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 73
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21
    exprlist                       shift and go to state 572
    empty                          shift and go to state 71

state 512

    (218) relcoords -> relcoord relcoord relcoord .

    if              reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    unless          reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    as              reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    rotated         reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    facing          reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    align           reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    at              reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    in              reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    do              reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    then            reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    NEWLINE         reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    ID              reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)
    COMMENT         reduce using rule 218 (relcoords -> relcoord relcoord relcoord .)


state 513

    (217) relcoords -> virtualnumber virtualnumber virtualnumber .

    if              reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    unless          reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    as              reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    rotated         reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    facing          reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    align           reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    at              reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    in              reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    do              reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    then            reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    NEWLINE         reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    ID              reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)
    COMMENT         reduce using rule 217 (relcoords -> virtualnumber virtualnumber virtualnumber .)


state 514

    (219) relcoords -> localcoord localcoord localcoord .

    if              reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    unless          reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    as              reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    rotated         reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    facing          reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    align           reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    at              reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    in              reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    do              reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    then            reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    NEWLINE         reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    ID              reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)
    COMMENT         reduce using rule 219 (relcoords -> localcoord localcoord localcoord .)


state 515

    (101) codeblock -> for ATID in fullselector . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 573

state 516

    (73) for_block -> for DOLLAR ID in . PYTHON newlines blocklist end

    PYTHON          shift and go to state 574


state 517

    (122) for_block -> for ID EQUALS expr . to expr by expr newlines blocklist end
    (123) for_block -> for ID EQUALS expr . to expr newlines blocklist end
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr

    to              shift and go to state 575
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48


state 518

    (136) codeblock -> actionbar fullselector virtualinteger virtualinteger . virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 576

state 519

    (135) codeblock -> subtitle fullselector virtualinteger virtualinteger . virtualinteger PYTHON
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 577

state 520

    (45) variable -> ID LBRACK expr RBRACK .

    EQUALS          reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    PLUSEQUALS      reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    MINUSEQUALS     reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    TIMESEQUALS     reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    DIVIDEEQUALS    reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    MODEQUALS       reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    PLUSPLUS        reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    MINUSMINUS      reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    EQUALEQUAL      reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    LT              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    LEQ             reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    GT              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    GEQ             reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    and             reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    NEWLINE         reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    if              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    unless          reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    as              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    rotated         reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    facing          reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    align           reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    at              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    in              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    do              reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    then            reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    LPAREN          reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)
    COMMA           reduce using rule 45 (variable -> ID LBRACK expr RBRACK .)


state 521

    (44) variable -> ID LBRACK virtualinteger RBRACK .

    EQUALS          reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    PLUSEQUALS      reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    MINUSEQUALS     reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    TIMESEQUALS     reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    DIVIDEEQUALS    reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    MODEQUALS       reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    PLUSPLUS        reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    MINUSMINUS      reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    EQUALEQUAL      reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    LT              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    LEQ             reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    GT              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    GEQ             reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    and             reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    NEWLINE         reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    if              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    unless          reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    as              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    rotated         reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    facing          reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    align           reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    at              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    in              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    do              reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    then            reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    LPAREN          reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)
    COMMA           reduce using rule 44 (variable -> ID LBRACK virtualinteger RBRACK .)


state 522

    (286) macro_call_params -> macro_call_param COMMA . macro_call_params
    (286) macro_call_params -> . macro_call_param COMMA macro_call_params
    (287) macro_call_params -> . macro_call_param
    (288) macro_call_params -> . empty
    (289) macro_call_param -> . virtualnumber
    (290) empty -> .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    GT              reduce using rule 290 (empty -> .)
    RPAREN          reduce using rule 290 (empty -> .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 441
    number                         shift and go to state 63
    macro_call_param               shift and go to state 439
    empty                          shift and go to state 442
    macro_call_params              shift and go to state 578

state 523

    (282) template_function_call -> ID LT macro_call_params GT . LPAREN exprlist RPAREN

    LPAREN          shift and go to state 579


state 524

    (74) trigger_block -> trigger fullselector DOT ID . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 580

state 525

    (48) blocklist -> codeblock optcomment newlines blocklist .

    end             reduce using rule 48 (blocklist -> codeblock optcomment newlines blocklist .)
    else            reduce using rule 48 (blocklist -> codeblock optcomment newlines blocklist .)


state 526

    (81) execute_block -> execute_items newlines blocklist end .

    COMMENT         reduce using rule 81 (execute_block -> execute_items newlines blocklist end .)
    NEWLINE         reduce using rule 81 (execute_block -> execute_items newlines blocklist end .)


state 527

    (111) condition -> variable GEQ comparison .

    and             reduce using rule 111 (condition -> variable GEQ comparison .)
    NEWLINE         reduce using rule 111 (condition -> variable GEQ comparison .)
    if              reduce using rule 111 (condition -> variable GEQ comparison .)
    unless          reduce using rule 111 (condition -> variable GEQ comparison .)
    as              reduce using rule 111 (condition -> variable GEQ comparison .)
    rotated         reduce using rule 111 (condition -> variable GEQ comparison .)
    facing          reduce using rule 111 (condition -> variable GEQ comparison .)
    align           reduce using rule 111 (condition -> variable GEQ comparison .)
    at              reduce using rule 111 (condition -> variable GEQ comparison .)
    in              reduce using rule 111 (condition -> variable GEQ comparison .)
    do              reduce using rule 111 (condition -> variable GEQ comparison .)
    then            reduce using rule 111 (condition -> variable GEQ comparison .)


state 528

    (116) comparison -> virtualinteger .

    and             reduce using rule 116 (comparison -> virtualinteger .)
    NEWLINE         reduce using rule 116 (comparison -> virtualinteger .)
    if              reduce using rule 116 (comparison -> virtualinteger .)
    unless          reduce using rule 116 (comparison -> virtualinteger .)
    as              reduce using rule 116 (comparison -> virtualinteger .)
    rotated         reduce using rule 116 (comparison -> virtualinteger .)
    facing          reduce using rule 116 (comparison -> virtualinteger .)
    align           reduce using rule 116 (comparison -> virtualinteger .)
    at              reduce using rule 116 (comparison -> virtualinteger .)
    in              reduce using rule 116 (comparison -> virtualinteger .)
    do              reduce using rule 116 (comparison -> virtualinteger .)
    then            reduce using rule 116 (comparison -> virtualinteger .)


state 529

    (117) comparison -> variable .

    and             reduce using rule 117 (comparison -> variable .)
    NEWLINE         reduce using rule 117 (comparison -> variable .)
    if              reduce using rule 117 (comparison -> variable .)
    unless          reduce using rule 117 (comparison -> variable .)
    as              reduce using rule 117 (comparison -> variable .)
    rotated         reduce using rule 117 (comparison -> variable .)
    facing          reduce using rule 117 (comparison -> variable .)
    align           reduce using rule 117 (comparison -> variable .)
    at              reduce using rule 117 (comparison -> variable .)
    in              reduce using rule 117 (comparison -> variable .)
    do              reduce using rule 117 (comparison -> variable .)
    then            reduce using rule 117 (comparison -> variable .)


state 530

    (110) condition -> variable GT comparison .

    and             reduce using rule 110 (condition -> variable GT comparison .)
    NEWLINE         reduce using rule 110 (condition -> variable GT comparison .)
    if              reduce using rule 110 (condition -> variable GT comparison .)
    unless          reduce using rule 110 (condition -> variable GT comparison .)
    as              reduce using rule 110 (condition -> variable GT comparison .)
    rotated         reduce using rule 110 (condition -> variable GT comparison .)
    facing          reduce using rule 110 (condition -> variable GT comparison .)
    align           reduce using rule 110 (condition -> variable GT comparison .)
    at              reduce using rule 110 (condition -> variable GT comparison .)
    in              reduce using rule 110 (condition -> variable GT comparison .)
    do              reduce using rule 110 (condition -> variable GT comparison .)
    then            reduce using rule 110 (condition -> variable GT comparison .)


state 531

    (108) condition -> variable LEQ comparison .

    and             reduce using rule 108 (condition -> variable LEQ comparison .)
    NEWLINE         reduce using rule 108 (condition -> variable LEQ comparison .)
    if              reduce using rule 108 (condition -> variable LEQ comparison .)
    unless          reduce using rule 108 (condition -> variable LEQ comparison .)
    as              reduce using rule 108 (condition -> variable LEQ comparison .)
    rotated         reduce using rule 108 (condition -> variable LEQ comparison .)
    facing          reduce using rule 108 (condition -> variable LEQ comparison .)
    align           reduce using rule 108 (condition -> variable LEQ comparison .)
    at              reduce using rule 108 (condition -> variable LEQ comparison .)
    in              reduce using rule 108 (condition -> variable LEQ comparison .)
    do              reduce using rule 108 (condition -> variable LEQ comparison .)
    then            reduce using rule 108 (condition -> variable LEQ comparison .)


state 532

    (107) condition -> variable LT comparison .

    and             reduce using rule 107 (condition -> variable LT comparison .)
    NEWLINE         reduce using rule 107 (condition -> variable LT comparison .)
    if              reduce using rule 107 (condition -> variable LT comparison .)
    unless          reduce using rule 107 (condition -> variable LT comparison .)
    as              reduce using rule 107 (condition -> variable LT comparison .)
    rotated         reduce using rule 107 (condition -> variable LT comparison .)
    facing          reduce using rule 107 (condition -> variable LT comparison .)
    align           reduce using rule 107 (condition -> variable LT comparison .)
    at              reduce using rule 107 (condition -> variable LT comparison .)
    in              reduce using rule 107 (condition -> variable LT comparison .)
    do              reduce using rule 107 (condition -> variable LT comparison .)
    then            reduce using rule 107 (condition -> variable LT comparison .)


state 533

    (109) condition -> variable EQUALEQUAL comparison .

    and             reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    NEWLINE         reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    if              reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    unless          reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    as              reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    rotated         reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    facing          reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    align           reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    at              reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    in              reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    do              reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)
    then            reduce using rule 109 (condition -> variable EQUALEQUAL comparison .)


state 534

    (104) condition -> variable EQUALEQUAL fullselector .
    (42) variable -> fullselector . DOT ID

    and             reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    NEWLINE         reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    if              reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    unless          reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    as              reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    rotated         reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    facing          reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    align           reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    at              reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    in              reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    do              reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    then            reduce using rule 104 (condition -> variable EQUALEQUAL fullselector .)
    DOT             shift and go to state 463


state 535

    (241) vector_var -> fullselector . DOT LT ID GT

    DOT             shift and go to state 581


state 536

    (112) condition -> vector_var EQUALEQUAL vector_var .

    and             reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    NEWLINE         reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    if              reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    unless          reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    as              reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    rotated         reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    facing          reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    align           reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    at              reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    in              reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    do              reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)
    then            reduce using rule 112 (condition -> vector_var EQUALEQUAL vector_var .)


state 537

    (120) while_block -> while conditions newlines blocklist . end

    end             shift and go to state 582


state 538

    (121) while_block -> while conditions execute_items newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 583
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 539

    (103) conditions -> condition and conditions .

    if              reduce using rule 103 (conditions -> condition and conditions .)
    unless          reduce using rule 103 (conditions -> condition and conditions .)
    as              reduce using rule 103 (conditions -> condition and conditions .)
    rotated         reduce using rule 103 (conditions -> condition and conditions .)
    facing          reduce using rule 103 (conditions -> condition and conditions .)
    align           reduce using rule 103 (conditions -> condition and conditions .)
    at              reduce using rule 103 (conditions -> condition and conditions .)
    in              reduce using rule 103 (conditions -> condition and conditions .)
    do              reduce using rule 103 (conditions -> condition and conditions .)
    then            reduce using rule 103 (conditions -> condition and conditions .)
    NEWLINE         reduce using rule 103 (conditions -> condition and conditions .)


state 540

    (105) condition -> fullselector EQUALEQUAL variable .

    and             reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    NEWLINE         reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    if              reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    unless          reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    as              reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    rotated         reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    facing          reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    align           reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    at              reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    in              reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    do              reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)
    then            reduce using rule 105 (condition -> fullselector EQUALEQUAL variable .)


state 541

    (42) variable -> fullselector DOT ID .

    EQUALEQUAL      reduce using rule 42 (variable -> fullselector DOT ID .)
    LT              reduce using rule 42 (variable -> fullselector DOT ID .)
    LEQ             reduce using rule 42 (variable -> fullselector DOT ID .)
    GT              reduce using rule 42 (variable -> fullselector DOT ID .)
    GEQ             reduce using rule 42 (variable -> fullselector DOT ID .)
    and             reduce using rule 42 (variable -> fullselector DOT ID .)
    NEWLINE         reduce using rule 42 (variable -> fullselector DOT ID .)
    if              reduce using rule 42 (variable -> fullselector DOT ID .)
    unless          reduce using rule 42 (variable -> fullselector DOT ID .)
    as              reduce using rule 42 (variable -> fullselector DOT ID .)
    rotated         reduce using rule 42 (variable -> fullselector DOT ID .)
    facing          reduce using rule 42 (variable -> fullselector DOT ID .)
    align           reduce using rule 42 (variable -> fullselector DOT ID .)
    at              reduce using rule 42 (variable -> fullselector DOT ID .)
    in              reduce using rule 42 (variable -> fullselector DOT ID .)
    do              reduce using rule 42 (variable -> fullselector DOT ID .)
    then            reduce using rule 42 (variable -> fullselector DOT ID .)
    LPAREN          reduce using rule 42 (variable -> fullselector DOT ID .)
    COMMA           reduce using rule 42 (variable -> fullselector DOT ID .)


state 542

    (115) condition -> block relcoords ID .

    and             reduce using rule 115 (condition -> block relcoords ID .)
    NEWLINE         reduce using rule 115 (condition -> block relcoords ID .)
    if              reduce using rule 115 (condition -> block relcoords ID .)
    unless          reduce using rule 115 (condition -> block relcoords ID .)
    as              reduce using rule 115 (condition -> block relcoords ID .)
    rotated         reduce using rule 115 (condition -> block relcoords ID .)
    facing          reduce using rule 115 (condition -> block relcoords ID .)
    align           reduce using rule 115 (condition -> block relcoords ID .)
    at              reduce using rule 115 (condition -> block relcoords ID .)
    in              reduce using rule 115 (condition -> block relcoords ID .)
    do              reduce using rule 115 (condition -> block relcoords ID .)
    then            reduce using rule 115 (condition -> block relcoords ID .)


state 543

    (77) codeblock -> as variable do codeblock .

    COMMENT         reduce using rule 77 (codeblock -> as variable do codeblock .)
    NEWLINE         reduce using rule 77 (codeblock -> as variable do codeblock .)


state 544

    (76) codeblock -> as variable LPAREN ATID . RPAREN newlines blocklist end
    (78) codeblock -> as variable LPAREN ATID . RPAREN do codeblock

    RPAREN          shift and go to state 584


state 545

    (75) codeblock -> as variable newlines blocklist . end

    end             shift and go to state 585


state 546

    (80) codeblock -> as create_block do codeblock .

    COMMENT         reduce using rule 80 (codeblock -> as create_block do codeblock .)
    NEWLINE         reduce using rule 80 (codeblock -> as create_block do codeblock .)


state 547

    (79) codeblock -> as create_block newlines blocklist . end

    end             shift and go to state 586


state 548

    (97) execute_item -> at LPAREN virtualnumber RPAREN . vector_expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (277) function_call -> . ID LPAREN exprlist RPAREN

    LPAREN          shift and go to state 84
    LT              shift and go to state 7
    MINUS           shift and go to state 82
    here            shift and go to state 13
    ATID            shift and go to state 17
    scale           shift and go to state 5
    ID              shift and go to state 15
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11

    vector_expr                    shift and go to state 587
    fullselector                   shift and go to state 85
    expr                           shift and go to state 375
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 549

    (118) if_block -> if PYTHON newlines blocklist . end
    (119) if_block -> if PYTHON newlines blocklist . else newlines blocklist end

    end             shift and go to state 588
    else            shift and go to state 589


state 550

    (242) vector_var -> LT variable COMMA variable . COMMA variable GT

    COMMA           shift and go to state 590


state 551

    (284) macro_call_args -> LPAREN macro_call_params . RPAREN

    RPAREN          shift and go to state 591


state 552

    (127) switch_case -> case . virtualinteger newlines blocklist end
    (128) switch_case -> case . virtualinteger to virtualinteger newlines blocklist end
    (129) switch_case -> case . DOLLAR ID in PYTHON newlines blocklist end
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    DOLLAR          shift and go to state 592
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75

    virtualinteger                 shift and go to state 593

state 553

    (125) cases -> switch_case . newlines
    (126) cases -> switch_case . newlines cases
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 594

state 554

    (124) switch_block -> switch expr newlines cases . end

    end             shift and go to state 595


state 555

    (23) macro_args -> LPAREN macro_params RPAREN .

    NEWLINE         reduce using rule 23 (macro_args -> LPAREN macro_params RPAREN .)


state 556

    (22) macrosection -> macro DOLLAR ID macro_args newlines blocklist . end

    end             shift and go to state 596


state 557

    (172) selector_item -> LT ID GT EQUALS . data_path data_type virtualnumber
    (173) selector_item -> LT ID GT EQUALS . data_path data_type
    (175) data_path -> . ID
    (176) data_path -> . ID LBRACK virtualinteger RBRACK
    (177) data_path -> . data_path DOT data_path

    ID              shift and go to state 504

    data_path                      shift and go to state 597

state 558

    (170) selector_item -> ID EQUALS data_path data_type . virtualnumber
    (171) selector_item -> ID EQUALS data_path data_type .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    NEWLINE         reduce using rule 171 (selector_item -> ID EQUALS data_path data_type .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 598
    number                         shift and go to state 63

state 559

    (180) data_type -> float .

    DOLLAR          reduce using rule 180 (data_type -> float .)
    INTEGER         reduce using rule 180 (data_type -> float .)
    HEX             reduce using rule 180 (data_type -> float .)
    BINARY          reduce using rule 180 (data_type -> float .)
    MINUS           reduce using rule 180 (data_type -> float .)
    FLOAT           reduce using rule 180 (data_type -> float .)
    NEWLINE         reduce using rule 180 (data_type -> float .)


state 560

    (179) data_type -> double .

    DOLLAR          reduce using rule 179 (data_type -> double .)
    INTEGER         reduce using rule 179 (data_type -> double .)
    HEX             reduce using rule 179 (data_type -> double .)
    BINARY          reduce using rule 179 (data_type -> double .)
    MINUS           reduce using rule 179 (data_type -> double .)
    FLOAT           reduce using rule 179 (data_type -> double .)
    NEWLINE         reduce using rule 179 (data_type -> double .)


state 561

    (182) data_type -> long .

    DOLLAR          reduce using rule 182 (data_type -> long .)
    INTEGER         reduce using rule 182 (data_type -> long .)
    HEX             reduce using rule 182 (data_type -> long .)
    BINARY          reduce using rule 182 (data_type -> long .)
    MINUS           reduce using rule 182 (data_type -> long .)
    FLOAT           reduce using rule 182 (data_type -> long .)
    NEWLINE         reduce using rule 182 (data_type -> long .)


state 562

    (181) data_type -> int .

    DOLLAR          reduce using rule 181 (data_type -> int .)
    INTEGER         reduce using rule 181 (data_type -> int .)
    HEX             reduce using rule 181 (data_type -> int .)
    BINARY          reduce using rule 181 (data_type -> int .)
    MINUS           reduce using rule 181 (data_type -> int .)
    FLOAT           reduce using rule 181 (data_type -> int .)
    NEWLINE         reduce using rule 181 (data_type -> int .)


state 563

    (183) data_type -> short .

    DOLLAR          reduce using rule 183 (data_type -> short .)
    INTEGER         reduce using rule 183 (data_type -> short .)
    HEX             reduce using rule 183 (data_type -> short .)
    BINARY          reduce using rule 183 (data_type -> short .)
    MINUS           reduce using rule 183 (data_type -> short .)
    FLOAT           reduce using rule 183 (data_type -> short .)
    NEWLINE         reduce using rule 183 (data_type -> short .)


state 564

    (178) data_type -> byte .

    DOLLAR          reduce using rule 178 (data_type -> byte .)
    INTEGER         reduce using rule 178 (data_type -> byte .)
    HEX             reduce using rule 178 (data_type -> byte .)
    BINARY          reduce using rule 178 (data_type -> byte .)
    MINUS           reduce using rule 178 (data_type -> byte .)
    FLOAT           reduce using rule 178 (data_type -> byte .)
    NEWLINE         reduce using rule 178 (data_type -> byte .)


state 565

    (177) data_path -> data_path DOT . data_path
    (175) data_path -> . ID
    (176) data_path -> . ID LBRACK virtualinteger RBRACK
    (177) data_path -> . data_path DOT data_path

    ID              shift and go to state 504

    data_path                      shift and go to state 599

state 566

    (176) data_path -> ID LBRACK . virtualinteger RBRACK
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 600

state 567

    (25) macro_params -> DOLLAR ID COMMA macro_params .

    GT              reduce using rule 25 (macro_params -> DOLLAR ID COMMA macro_params .)
    RPAREN          reduce using rule 25 (macro_params -> DOLLAR ID COMMA macro_params .)


state 568

    (21) template_function_section -> function ID LT macro_params GT LPAREN id_list . RPAREN newlines blocklist end

    RPAREN          shift and go to state 601


state 569

    (20) functionsection -> function ID LPAREN id_list RPAREN newlines blocklist . end

    end             shift and go to state 602


state 570

    (134) codeblock -> title fullselector virtualinteger virtualinteger virtualinteger . PYTHON

    PYTHON          shift and go to state 603


state 571

    (241) vector_var -> fullselector DOT LT ID GT .

    EQUALEQUAL      reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    EQUALS          reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    PLUSEQUALS      reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    MINUSEQUALS     reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    TIMESEQUALS     reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    DIVIDEEQUALS    reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    MODEQUALS       reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    and             reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    NEWLINE         reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    if              reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    unless          reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    as              reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    rotated         reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    facing          reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    align           reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    at              reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    in              reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    do              reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)
    then            reduce using rule 241 (vector_var -> fullselector DOT LT ID GT .)


state 572

    (278) method_call -> fullselector DOT ID LPAREN exprlist . RPAREN
    (279) exprlist -> exprlist . COMMA expr

    RPAREN          shift and go to state 604
    COMMA           shift and go to state 115


state 573

    (101) codeblock -> for ATID in fullselector newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 605
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 574

    (73) for_block -> for DOLLAR ID in PYTHON . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 606

state 575

    (122) for_block -> for ID EQUALS expr to . expr by expr newlines blocklist end
    (123) for_block -> for ID EQUALS expr to . expr newlines blocklist end
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 607
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 576

    (136) codeblock -> actionbar fullselector virtualinteger virtualinteger virtualinteger . PYTHON

    PYTHON          shift and go to state 608


state 577

    (135) codeblock -> subtitle fullselector virtualinteger virtualinteger virtualinteger . PYTHON

    PYTHON          shift and go to state 609


state 578

    (286) macro_call_params -> macro_call_param COMMA macro_call_params .

    GT              reduce using rule 286 (macro_call_params -> macro_call_param COMMA macro_call_params .)
    RPAREN          reduce using rule 286 (macro_call_params -> macro_call_param COMMA macro_call_params .)


state 579

    (282) template_function_call -> ID LT macro_call_params GT LPAREN . exprlist RPAREN
    (279) exprlist -> . exprlist COMMA expr
    (280) exprlist -> . expr
    (281) exprlist -> . empty
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (290) empty -> .
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    RPAREN          reduce using rule 290 (empty -> .)
    COMMA           reduce using rule 290 (empty -> .)
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 73
    function_call                  shift and go to state 2
    exprlist                       shift and go to state 610
    virtualinteger                 shift and go to state 21
    empty                          shift and go to state 71

state 580

    (74) trigger_block -> trigger fullselector DOT ID newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 611
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 581

    (241) vector_var -> fullselector DOT . LT ID GT

    LT              shift and go to state 421


state 582

    (120) while_block -> while conditions newlines blocklist end .

    COMMENT         reduce using rule 120 (while_block -> while conditions newlines blocklist end .)
    NEWLINE         reduce using rule 120 (while_block -> while conditions newlines blocklist end .)


state 583

    (121) while_block -> while conditions execute_items newlines blocklist . end

    end             shift and go to state 612


state 584

    (76) codeblock -> as variable LPAREN ATID RPAREN . newlines blocklist end
    (78) codeblock -> as variable LPAREN ATID RPAREN . do codeblock
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    do              shift and go to state 613
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 614

state 585

    (75) codeblock -> as variable newlines blocklist end .

    COMMENT         reduce using rule 75 (codeblock -> as variable newlines blocklist end .)
    NEWLINE         reduce using rule 75 (codeblock -> as variable newlines blocklist end .)


state 586

    (79) codeblock -> as create_block newlines blocklist end .

    COMMENT         reduce using rule 79 (codeblock -> as create_block newlines blocklist end .)
    NEWLINE         reduce using rule 79 (codeblock -> as create_block newlines blocklist end .)


state 587

    (97) execute_item -> at LPAREN virtualnumber RPAREN vector_expr .
    (265) vector_expr -> vector_expr . PLUS vector_expr
    (266) vector_expr -> vector_expr . MINUS vector_expr
    (267) vector_expr -> vector_expr . PLUS expr
    (268) vector_expr -> vector_expr . MINUS expr
    (269) vector_expr -> vector_expr . TIMES expr
    (270) vector_expr -> vector_expr . DIVIDE expr
    (271) vector_expr -> vector_expr . MOD expr
    (251) expr -> vector_expr . TIMES vector_expr

    if              reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    unless          reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    as              reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    rotated         reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    facing          reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    align           reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    at              reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    in              reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    do              reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    then            reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    NEWLINE         reduce using rule 97 (execute_item -> at LPAREN virtualnumber RPAREN vector_expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 45


state 588

    (118) if_block -> if PYTHON newlines blocklist end .

    COMMENT         reduce using rule 118 (if_block -> if PYTHON newlines blocklist end .)
    NEWLINE         reduce using rule 118 (if_block -> if PYTHON newlines blocklist end .)


state 589

    (119) if_block -> if PYTHON newlines blocklist else . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 615

state 590

    (242) vector_var -> LT variable COMMA variable COMMA . variable GT
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK

    ID              shift and go to state 359
    ATID            shift and go to state 17

    variable                       shift and go to state 616
    fullselector                   shift and go to state 381

state 591

    (284) macro_call_args -> LPAREN macro_call_params RPAREN .

    COMMENT         reduce using rule 284 (macro_call_args -> LPAREN macro_call_params RPAREN .)
    NEWLINE         reduce using rule 284 (macro_call_args -> LPAREN macro_call_params RPAREN .)


state 592

    (129) switch_case -> case DOLLAR . ID in PYTHON newlines blocklist end
    (161) virtualinteger -> DOLLAR . ID

    ID              shift and go to state 617


state 593

    (127) switch_case -> case virtualinteger . newlines blocklist end
    (128) switch_case -> case virtualinteger . to virtualinteger newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    to              shift and go to state 618
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 619

state 594

    (125) cases -> switch_case newlines .
    (126) cases -> switch_case newlines . cases
    (125) cases -> . switch_case newlines
    (126) cases -> . switch_case newlines cases
    (127) switch_case -> . case virtualinteger newlines blocklist end
    (128) switch_case -> . case virtualinteger to virtualinteger newlines blocklist end
    (129) switch_case -> . case DOLLAR ID in PYTHON newlines blocklist end

    end             reduce using rule 125 (cases -> switch_case newlines .)
    case            shift and go to state 552

    cases                          shift and go to state 620
    switch_case                    shift and go to state 553

state 595

    (124) switch_block -> switch expr newlines cases end .

    COMMENT         reduce using rule 124 (switch_block -> switch expr newlines cases end .)
    NEWLINE         reduce using rule 124 (switch_block -> switch expr newlines cases end .)


state 596

    (22) macrosection -> macro DOLLAR ID macro_args newlines blocklist end .

    NEWLINE         reduce using rule 22 (macrosection -> macro DOLLAR ID macro_args newlines blocklist end .)


state 597

    (172) selector_item -> LT ID GT EQUALS data_path . data_type virtualnumber
    (173) selector_item -> LT ID GT EQUALS data_path . data_type
    (177) data_path -> data_path . DOT data_path
    (178) data_type -> . byte
    (179) data_type -> . double
    (180) data_type -> . float
    (181) data_type -> . int
    (182) data_type -> . long
    (183) data_type -> . short

    DOT             shift and go to state 565
    byte            shift and go to state 564
    double          shift and go to state 560
    float           shift and go to state 559
    int             shift and go to state 562
    long            shift and go to state 561
    short           shift and go to state 563

    data_type                      shift and go to state 621

state 598

    (170) selector_item -> ID EQUALS data_path data_type virtualnumber .

    NEWLINE         reduce using rule 170 (selector_item -> ID EQUALS data_path data_type virtualnumber .)


state 599

    (177) data_path -> data_path DOT data_path .
    (177) data_path -> data_path . DOT data_path

  ! shift/reduce conflict for DOT resolved as shift
    byte            reduce using rule 177 (data_path -> data_path DOT data_path .)
    double          reduce using rule 177 (data_path -> data_path DOT data_path .)
    float           reduce using rule 177 (data_path -> data_path DOT data_path .)
    int             reduce using rule 177 (data_path -> data_path DOT data_path .)
    long            reduce using rule 177 (data_path -> data_path DOT data_path .)
    short           reduce using rule 177 (data_path -> data_path DOT data_path .)
    DOT             shift and go to state 565

  ! DOT             [ reduce using rule 177 (data_path -> data_path DOT data_path .) ]


state 600

    (176) data_path -> ID LBRACK virtualinteger . RBRACK

    RBRACK          shift and go to state 622


state 601

    (21) template_function_section -> function ID LT macro_params GT LPAREN id_list RPAREN . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 623

state 602

    (20) functionsection -> function ID LPAREN id_list RPAREN newlines blocklist end .

    NEWLINE         reduce using rule 20 (functionsection -> function ID LPAREN id_list RPAREN newlines blocklist end .)


state 603

    (134) codeblock -> title fullselector virtualinteger virtualinteger virtualinteger PYTHON .

    COMMENT         reduce using rule 134 (codeblock -> title fullselector virtualinteger virtualinteger virtualinteger PYTHON .)
    NEWLINE         reduce using rule 134 (codeblock -> title fullselector virtualinteger virtualinteger virtualinteger PYTHON .)


state 604

    (278) method_call -> fullselector DOT ID LPAREN exprlist RPAREN .

    COMMENT         reduce using rule 278 (method_call -> fullselector DOT ID LPAREN exprlist RPAREN .)
    NEWLINE         reduce using rule 278 (method_call -> fullselector DOT ID LPAREN exprlist RPAREN .)


state 605

    (101) codeblock -> for ATID in fullselector newlines blocklist . end

    end             shift and go to state 624


state 606

    (73) for_block -> for DOLLAR ID in PYTHON newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 625
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 607

    (122) for_block -> for ID EQUALS expr to expr . by expr newlines blocklist end
    (123) for_block -> for ID EQUALS expr to expr . newlines blocklist end
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    by              shift and go to state 626
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 627

state 608

    (136) codeblock -> actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON .

    COMMENT         reduce using rule 136 (codeblock -> actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON .)
    NEWLINE         reduce using rule 136 (codeblock -> actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON .)


state 609

    (135) codeblock -> subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON .

    COMMENT         reduce using rule 135 (codeblock -> subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON .)
    NEWLINE         reduce using rule 135 (codeblock -> subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON .)


state 610

    (282) template_function_call -> ID LT macro_call_params GT LPAREN exprlist . RPAREN
    (279) exprlist -> exprlist . COMMA expr

    RPAREN          shift and go to state 628
    COMMA           shift and go to state 115


state 611

    (74) trigger_block -> trigger fullselector DOT ID newlines blocklist . end

    end             shift and go to state 629


state 612

    (121) while_block -> while conditions execute_items newlines blocklist end .

    COMMENT         reduce using rule 121 (while_block -> while conditions execute_items newlines blocklist end .)
    NEWLINE         reduce using rule 121 (while_block -> while conditions execute_items newlines blocklist end .)


state 613

    (78) codeblock -> as variable LPAREN ATID RPAREN do . codeblock
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    variable                       shift and go to state 295
    codeblock                      shift and go to state 630
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    selectorassignment_block       shift and go to state 251
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    vector_assignment_scalar       shift and go to state 263
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 614

    (76) codeblock -> as variable LPAREN ATID RPAREN newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 631
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 615

    (119) if_block -> if PYTHON newlines blocklist else newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 632
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 616

    (242) vector_var -> LT variable COMMA variable COMMA variable . GT

    GT              shift and go to state 633


state 617

    (129) switch_case -> case DOLLAR ID . in PYTHON newlines blocklist end
    (161) virtualinteger -> DOLLAR ID .

    in              shift and go to state 634
    to              reduce using rule 161 (virtualinteger -> DOLLAR ID .)
    NEWLINE         reduce using rule 161 (virtualinteger -> DOLLAR ID .)


state 618

    (128) switch_case -> case virtualinteger to . virtualinteger newlines blocklist end
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID

    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    MINUS           shift and go to state 75
    DOLLAR          shift and go to state 11

    virtualinteger                 shift and go to state 635

state 619

    (127) switch_case -> case virtualinteger newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 636
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 620

    (126) cases -> switch_case newlines cases .

    end             reduce using rule 126 (cases -> switch_case newlines cases .)


state 621

    (172) selector_item -> LT ID GT EQUALS data_path data_type . virtualnumber
    (173) selector_item -> LT ID GT EQUALS data_path data_type .
    (153) virtualnumber -> . number
    (154) virtualnumber -> . DOLLAR ID
    (145) number -> . INTEGER
    (146) number -> . HEX
    (147) number -> . BINARY
    (148) number -> . MINUS INTEGER
    (149) number -> . MINUS HEX
    (150) number -> . MINUS BINARY
    (151) number -> . FLOAT
    (152) number -> . MINUS FLOAT

    NEWLINE         reduce using rule 173 (selector_item -> LT ID GT EQUALS data_path data_type .)
    DOLLAR          shift and go to state 62
    INTEGER         shift and go to state 65
    HEX             shift and go to state 60
    BINARY          shift and go to state 58
    MINUS           shift and go to state 64
    FLOAT           shift and go to state 61

    virtualnumber                  shift and go to state 637
    number                         shift and go to state 63

state 622

    (176) data_path -> ID LBRACK virtualinteger RBRACK .

    DOT             reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)
    byte            reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)
    double          reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)
    float           reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)
    int             reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)
    long            reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)
    short           reduce using rule 176 (data_path -> ID LBRACK virtualinteger RBRACK .)


state 623

    (21) template_function_section -> function ID LT macro_params GT LPAREN id_list RPAREN newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 638
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 624

    (101) codeblock -> for ATID in fullselector newlines blocklist end .

    COMMENT         reduce using rule 101 (codeblock -> for ATID in fullselector newlines blocklist end .)
    NEWLINE         reduce using rule 101 (codeblock -> for ATID in fullselector newlines blocklist end .)


state 625

    (73) for_block -> for DOLLAR ID in PYTHON newlines blocklist . end

    end             shift and go to state 639


state 626

    (122) for_block -> for ID EQUALS expr to expr by . expr newlines blocklist end
    (243) expr -> . expr PLUS expr
    (244) expr -> . expr MINUS expr
    (245) expr -> . expr TIMES expr
    (246) expr -> . expr DIVIDE expr
    (247) expr -> . expr MOD expr
    (248) expr -> . expr POWER INTEGER
    (249) expr -> . expr POWER HEX
    (250) expr -> . expr POWER BINARY
    (251) expr -> . vector_expr TIMES vector_expr
    (252) expr -> . virtualinteger
    (253) expr -> . scale
    (254) expr -> . ID
    (255) expr -> . ID LBRACK virtualinteger RBRACK
    (256) expr -> . ID LBRACK expr RBRACK
    (257) expr -> . fullselector DOT ID
    (258) expr -> . function_call
    (259) expr -> . LPAREN expr RPAREN
    (260) expr -> . MINUS expr
    (261) vector_expr -> . LPAREN vector_expr RPAREN
    (262) vector_expr -> . LT expr COMMA expr COMMA expr GT
    (263) vector_expr -> . LT ID GT
    (264) vector_expr -> . fullselector DOT LT ID GT
    (265) vector_expr -> . vector_expr PLUS vector_expr
    (266) vector_expr -> . vector_expr MINUS vector_expr
    (267) vector_expr -> . vector_expr PLUS expr
    (268) vector_expr -> . vector_expr MINUS expr
    (269) vector_expr -> . vector_expr TIMES expr
    (270) vector_expr -> . vector_expr DIVIDE expr
    (271) vector_expr -> . vector_expr MOD expr
    (272) vector_expr -> . expr PLUS vector_expr
    (273) vector_expr -> . expr TIMES vector_expr
    (274) vector_expr -> . MINUS vector_expr
    (275) vector_expr -> . here
    (276) vector_expr -> . here LPAREN virtualnumber RPAREN
    (155) virtualinteger -> . INTEGER
    (156) virtualinteger -> . HEX
    (157) virtualinteger -> . BINARY
    (158) virtualinteger -> . MINUS INTEGER
    (159) virtualinteger -> . MINUS HEX
    (160) virtualinteger -> . MINUS BINARY
    (161) virtualinteger -> . DOLLAR ID
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (277) function_call -> . ID LPAREN exprlist RPAREN

    scale           shift and go to state 5
    ID              shift and go to state 15
    LPAREN          shift and go to state 14
    MINUS           shift and go to state 3
    LT              shift and go to state 7
    here            shift and go to state 13
    INTEGER         shift and go to state 9
    HEX             shift and go to state 12
    BINARY          shift and go to state 16
    DOLLAR          shift and go to state 11
    ATID            shift and go to state 17

    vector_expr                    shift and go to state 18
    fullselector                   shift and go to state 19
    expr                           shift and go to state 640
    function_call                  shift and go to state 2
    virtualinteger                 shift and go to state 21

state 627

    (123) for_block -> for ID EQUALS expr to expr newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 641
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 628

    (282) template_function_call -> ID LT macro_call_params GT LPAREN exprlist RPAREN .

    COMMENT         reduce using rule 282 (template_function_call -> ID LT macro_call_params GT LPAREN exprlist RPAREN .)
    NEWLINE         reduce using rule 282 (template_function_call -> ID LT macro_call_params GT LPAREN exprlist RPAREN .)


state 629

    (74) trigger_block -> trigger fullselector DOT ID newlines blocklist end .

    COMMENT         reduce using rule 74 (trigger_block -> trigger fullselector DOT ID newlines blocklist end .)
    NEWLINE         reduce using rule 74 (trigger_block -> trigger fullselector DOT ID newlines blocklist end .)


state 630

    (78) codeblock -> as variable LPAREN ATID RPAREN do codeblock .

    COMMENT         reduce using rule 78 (codeblock -> as variable LPAREN ATID RPAREN do codeblock .)
    NEWLINE         reduce using rule 78 (codeblock -> as variable LPAREN ATID RPAREN do codeblock .)


state 631

    (76) codeblock -> as variable LPAREN ATID RPAREN newlines blocklist . end

    end             shift and go to state 642


state 632

    (119) if_block -> if PYTHON newlines blocklist else newlines blocklist . end

    end             shift and go to state 643


state 633

    (242) vector_var -> LT variable COMMA variable COMMA variable GT .

    EQUALEQUAL      reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    EQUALS          reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    PLUSEQUALS      reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    MINUSEQUALS     reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    TIMESEQUALS     reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    DIVIDEEQUALS    reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    MODEQUALS       reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    and             reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    NEWLINE         reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    if              reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    unless          reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    as              reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    rotated         reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    facing          reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    align           reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    at              reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    in              reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    do              reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)
    then            reduce using rule 242 (vector_var -> LT variable COMMA variable COMMA variable GT .)


state 634

    (129) switch_case -> case DOLLAR ID in . PYTHON newlines blocklist end

    PYTHON          shift and go to state 644


state 635

    (128) switch_case -> case virtualinteger to virtualinteger . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 645

state 636

    (127) switch_case -> case virtualinteger newlines blocklist . end

    end             shift and go to state 646


state 637

    (172) selector_item -> LT ID GT EQUALS data_path data_type virtualnumber .

    NEWLINE         reduce using rule 172 (selector_item -> LT ID GT EQUALS data_path data_type virtualnumber .)


state 638

    (21) template_function_section -> function ID LT macro_params GT LPAREN id_list RPAREN newlines blocklist . end

    end             shift and go to state 647


state 639

    (73) for_block -> for DOLLAR ID in PYTHON newlines blocklist end .

    COMMENT         reduce using rule 73 (for_block -> for DOLLAR ID in PYTHON newlines blocklist end .)
    NEWLINE         reduce using rule 73 (for_block -> for DOLLAR ID in PYTHON newlines blocklist end .)


state 640

    (122) for_block -> for ID EQUALS expr to expr by expr . newlines blocklist end
    (243) expr -> expr . PLUS expr
    (244) expr -> expr . MINUS expr
    (245) expr -> expr . TIMES expr
    (246) expr -> expr . DIVIDE expr
    (247) expr -> expr . MOD expr
    (248) expr -> expr . POWER INTEGER
    (249) expr -> expr . POWER HEX
    (250) expr -> expr . POWER BINARY
    (272) vector_expr -> expr . PLUS vector_expr
    (273) vector_expr -> expr . TIMES vector_expr
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 47
    MOD             shift and go to state 52
    POWER           shift and go to state 48
    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 648

state 641

    (123) for_block -> for ID EQUALS expr to expr newlines blocklist . end

    end             shift and go to state 649


state 642

    (76) codeblock -> as variable LPAREN ATID RPAREN newlines blocklist end .

    COMMENT         reduce using rule 76 (codeblock -> as variable LPAREN ATID RPAREN newlines blocklist end .)
    NEWLINE         reduce using rule 76 (codeblock -> as variable LPAREN ATID RPAREN newlines blocklist end .)


state 643

    (119) if_block -> if PYTHON newlines blocklist else newlines blocklist end .

    COMMENT         reduce using rule 119 (if_block -> if PYTHON newlines blocklist else newlines blocklist end .)
    NEWLINE         reduce using rule 119 (if_block -> if PYTHON newlines blocklist else newlines blocklist end .)


state 644

    (129) switch_case -> case DOLLAR ID in PYTHON . newlines blocklist end
    (28) newlines -> . NEWLINE newlines
    (29) newlines -> . NEWLINE

    NEWLINE         shift and go to state 28

    newlines                       shift and go to state 650

state 645

    (128) switch_case -> case virtualinteger to virtualinteger newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 651
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 646

    (127) switch_case -> case virtualinteger newlines blocklist end .

    NEWLINE         reduce using rule 127 (switch_case -> case virtualinteger newlines blocklist end .)


state 647

    (21) template_function_section -> function ID LT macro_params GT LPAREN id_list RPAREN newlines blocklist end .

    NEWLINE         reduce using rule 21 (template_function_section -> function ID LT macro_params GT LPAREN id_list RPAREN newlines blocklist end .)


state 648

    (122) for_block -> for ID EQUALS expr to expr by expr newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 652
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 649

    (123) for_block -> for ID EQUALS expr to expr newlines blocklist end .

    COMMENT         reduce using rule 123 (for_block -> for ID EQUALS expr to expr newlines blocklist end .)
    NEWLINE         reduce using rule 123 (for_block -> for ID EQUALS expr to expr newlines blocklist end .)


state 650

    (129) switch_case -> case DOLLAR ID in PYTHON newlines . blocklist end
    (48) blocklist -> . codeblock optcomment newlines blocklist
    (49) blocklist -> . empty
    (50) codeblock -> . comment_block
    (51) codeblock -> . command_block
    (52) codeblock -> . move_block
    (53) codeblock -> . create_block
    (54) codeblock -> . for_block
    (55) codeblock -> . if_block
    (56) codeblock -> . trigger_block
    (57) codeblock -> . execute_block
    (58) codeblock -> . while_block
    (59) codeblock -> . switch_block
    (60) codeblock -> . tell_block
    (61) codeblock -> . function_call_block
    (62) codeblock -> . template_function_call
    (63) codeblock -> . method_call_block
    (64) codeblock -> . macro_call_block
    (65) codeblock -> . pythonassignment_block
    (66) codeblock -> . assignment_block
    (67) codeblock -> . selectorassignment_block
    (68) codeblock -> . vector_assignment_block
    (69) codeblock -> . vector_assignment_scalar_block
    (75) codeblock -> . as variable newlines blocklist end
    (76) codeblock -> . as variable LPAREN ATID RPAREN newlines blocklist end
    (77) codeblock -> . as variable do codeblock
    (78) codeblock -> . as variable LPAREN ATID RPAREN do codeblock
    (79) codeblock -> . as create_block newlines blocklist end
    (80) codeblock -> . as create_block do codeblock
    (101) codeblock -> . for ATID in fullselector newlines blocklist end
    (131) codeblock -> . title fullselector PYTHON
    (132) codeblock -> . subtitle fullselector PYTHON
    (133) codeblock -> . actionbar fullselector PYTHON
    (134) codeblock -> . title fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (135) codeblock -> . subtitle fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (136) codeblock -> . actionbar fullselector virtualinteger virtualinteger virtualinteger PYTHON
    (290) empty -> .
    (70) comment_block -> . COMMENT
    (71) command_block -> . COMMAND
    (72) move_block -> . move fullselector relcoords
    (186) create_block -> . create ATID relcoords
    (187) create_block -> . create ATID
    (73) for_block -> . for DOLLAR ID in PYTHON newlines blocklist end
    (122) for_block -> . for ID EQUALS expr to expr by expr newlines blocklist end
    (123) for_block -> . for ID EQUALS expr to expr newlines blocklist end
    (118) if_block -> . if PYTHON newlines blocklist end
    (119) if_block -> . if PYTHON newlines blocklist else newlines blocklist end
    (74) trigger_block -> . trigger fullselector DOT ID newlines blocklist end
    (81) execute_block -> . execute_items newlines blocklist end
    (82) execute_block -> . execute_items do codeblock
    (83) execute_block -> . execute_items then codeblock
    (120) while_block -> . while conditions newlines blocklist end
    (121) while_block -> . while conditions execute_items newlines blocklist end
    (124) switch_block -> . switch expr newlines cases end
    (130) tell_block -> . tell fullselector PYTHON
    (137) function_call_block -> . function_call
    (282) template_function_call -> . ID LT macro_call_params GT LPAREN exprlist RPAREN
    (138) method_call_block -> . method_call
    (139) macro_call_block -> . macro_call
    (140) pythonassignment_block -> . pythonassignment
    (141) assignment_block -> . assignment
    (144) selectorassignment_block -> . selectorassignment
    (142) vector_assignment_block -> . vector_assignment
    (143) vector_assignment_scalar_block -> . vector_assignment_scalar
    (84) execute_items -> . execute_item
    (85) execute_items -> . execute_item execute_items
    (277) function_call -> . ID LPAREN exprlist RPAREN
    (278) method_call -> . fullselector DOT ID LPAREN exprlist RPAREN
    (283) macro_call -> . DOLLAR ID macro_call_args
    (188) pythonassignment -> . DOLLAR ID PYTHON
    (220) assignment -> . return expr
    (221) assignment -> . variable EQUALS expr
    (222) assignment -> . variable PLUSEQUALS expr
    (223) assignment -> . variable MINUSEQUALS expr
    (224) assignment -> . variable TIMESEQUALS expr
    (225) assignment -> . variable DIVIDEEQUALS expr
    (226) assignment -> . variable MODEQUALS expr
    (227) assignment -> . variable PLUSPLUS
    (228) assignment -> . variable MINUSMINUS
    (229) assignment -> . variable EQUALS fullselector
    (230) assignment -> . variable EQUALS create_block
    (165) selectorassignment -> . ATID EQUALS fullselector
    (231) vector_assignment -> . vector_var EQUALS vector_expr
    (232) vector_assignment -> . vector_var PLUSEQUALS vector_expr
    (233) vector_assignment -> . vector_var MINUSEQUALS vector_expr
    (234) vector_assignment_scalar -> . vector_var EQUALS expr
    (235) vector_assignment_scalar -> . vector_var PLUSEQUALS expr
    (236) vector_assignment_scalar -> . vector_var MINUSEQUALS expr
    (237) vector_assignment_scalar -> . vector_var TIMESEQUALS expr
    (238) vector_assignment_scalar -> . vector_var DIVIDEEQUALS expr
    (239) vector_assignment_scalar -> . vector_var MODEQUALS expr
    (86) execute_item -> . if conditions
    (87) execute_item -> . unless conditions
    (88) execute_item -> . as fullselector
    (89) execute_item -> . rotated fullselector
    (90) execute_item -> . facing relcoords
    (91) execute_item -> . facing fullselector
    (92) execute_item -> . align ID
    (93) execute_item -> . at fullselector
    (94) execute_item -> . at relcoords
    (95) execute_item -> . at fullselector relcoords
    (96) execute_item -> . at vector_expr
    (97) execute_item -> . at LPAREN virtualnumber RPAREN vector_expr
    (98) execute_item -> . in overworld
    (99) execute_item -> . in the_end
    (100) execute_item -> . in the_nether
    (208) fullselector -> . ATID
    (209) fullselector -> . ATID LBRACK qualifiers RBRACK
    (42) variable -> . fullselector DOT ID
    (43) variable -> . ID
    (44) variable -> . ID LBRACK virtualinteger RBRACK
    (45) variable -> . ID LBRACK expr RBRACK
    (240) vector_var -> . LT ID GT
    (241) vector_var -> . fullselector DOT LT ID GT
    (242) vector_var -> . LT variable COMMA variable COMMA variable GT

    as              shift and go to state 284
    for             shift and go to state 257
    title           shift and go to state 245
    subtitle        shift and go to state 264
    actionbar       shift and go to state 259
    end             reduce using rule 290 (empty -> .)
    COMMENT         shift and go to state 244
    COMMAND         shift and go to state 260
    move            shift and go to state 241
    create          shift and go to state 266
    if              shift and go to state 287
    trigger         shift and go to state 268
    while           shift and go to state 278
    switch          shift and go to state 299
    tell            shift and go to state 269
    ID              shift and go to state 267
    DOLLAR          shift and go to state 294
    return          shift and go to state 248
    ATID            shift and go to state 250
    unless          shift and go to state 292
    rotated         shift and go to state 242
    facing          shift and go to state 253
    align           shift and go to state 274
    at              shift and go to state 285
    in              shift and go to state 286
    LT              shift and go to state 291

    method_call                    shift and go to state 281
    for_block                      shift and go to state 254
    vector_assignment_scalar_block shift and go to state 283
    tell_block                     shift and go to state 255
    function_call                  shift and go to state 256
    vector_assignment              shift and go to state 265
    method_call_block              shift and go to state 243
    pythonassignment               shift and go to state 296
    vector_assignment_scalar       shift and go to state 263
    template_function_call         shift and go to state 288
    vector_var                     shift and go to state 298
    macro_call_block               shift and go to state 289
    execute_item                   shift and go to state 271
    command_block                  shift and go to state 290
    selectorassignment             shift and go to state 282
    trigger_block                  shift and go to state 246
    vector_assignment_block        shift and go to state 258
    macro_call                     shift and go to state 276
    function_call_block            shift and go to state 247
    execute_block                  shift and go to state 249
    assignment                     shift and go to state 293
    selectorassignment_block       shift and go to state 251
    variable                       shift and go to state 295
    codeblock                      shift and go to state 272
    comment_block                  shift and go to state 261
    pythonassignment_block         shift and go to state 273
    blocklist                      shift and go to state 653
    fullselector                   shift and go to state 252
    if_block                       shift and go to state 275
    execute_items                  shift and go to state 277
    while_block                    shift and go to state 262
    empty                          shift and go to state 270
    switch_block                   shift and go to state 300
    move_block                     shift and go to state 301
    assignment_block               shift and go to state 279
    create_block                   shift and go to state 280

state 651

    (128) switch_case -> case virtualinteger to virtualinteger newlines blocklist . end

    end             shift and go to state 654


state 652

    (122) for_block -> for ID EQUALS expr to expr by expr newlines blocklist . end

    end             shift and go to state 655


state 653

    (129) switch_case -> case DOLLAR ID in PYTHON newlines blocklist . end

    end             shift and go to state 656


state 654

    (128) switch_case -> case virtualinteger to virtualinteger newlines blocklist end .

    NEWLINE         reduce using rule 128 (switch_case -> case virtualinteger to virtualinteger newlines blocklist end .)


state 655

    (122) for_block -> for ID EQUALS expr to expr by expr newlines blocklist end .

    COMMENT         reduce using rule 122 (for_block -> for ID EQUALS expr to expr by expr newlines blocklist end .)
    NEWLINE         reduce using rule 122 (for_block -> for ID EQUALS expr to expr by expr newlines blocklist end .)


state 656

    (129) switch_case -> case DOLLAR ID in PYTHON newlines blocklist end .

    NEWLINE         reduce using rule 129 (switch_case -> case DOLLAR ID in PYTHON newlines blocklist end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACK in state 70 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 164 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 187 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 189 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 190 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 191 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 194 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 195 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 330 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 330 resolved as shift
WARNING: shift/reduce conflict for HEX in state 330 resolved as shift
WARNING: shift/reduce conflict for BINARY in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 330 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 330 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 331 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 331 resolved as shift
WARNING: shift/reduce conflict for HEX in state 331 resolved as shift
WARNING: shift/reduce conflict for BINARY in state 331 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 331 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 331 resolved as shift
WARNING: shift/reduce conflict for RBRACK in state 438 resolved as shift
WARNING: shift/reduce conflict for DOT in state 599 resolved as shift
WARNING: reduce/reduce conflict in state 24 resolved using rule (virtualinteger -> INTEGER)
WARNING: rejected rule (virtualinteger -> MINUS INTEGER) in state 24
WARNING: reduce/reduce conflict in state 25 resolved using rule (virtualinteger -> HEX)
WARNING: rejected rule (virtualinteger -> MINUS HEX) in state 25
WARNING: reduce/reduce conflict in state 26 resolved using rule (virtualinteger -> BINARY)
WARNING: rejected rule (virtualinteger -> MINUS BINARY) in state 26
WARNING: reduce/reduce conflict in state 368 resolved using rule (number -> HEX)
WARNING: rejected rule (virtualinteger -> HEX) in state 368
WARNING: reduce/reduce conflict in state 372 resolved using rule (number -> INTEGER)
WARNING: rejected rule (virtualinteger -> INTEGER) in state 372
WARNING: reduce/reduce conflict in state 373 resolved using rule (number -> BINARY)
WARNING: rejected rule (virtualinteger -> BINARY) in state 373
WARNING: reduce/reduce conflict in state 469 resolved using rule (number -> MINUS HEX)
WARNING: rejected rule (virtualinteger -> MINUS HEX) in state 469
WARNING: reduce/reduce conflict in state 469 resolved using rule (virtualinteger -> HEX)
WARNING: rejected rule (virtualinteger -> MINUS HEX) in state 469
WARNING: reduce/reduce conflict in state 469 resolved using rule (number -> MINUS HEX)
WARNING: rejected rule (virtualinteger -> HEX) in state 469
WARNING: reduce/reduce conflict in state 470 resolved using rule (number -> MINUS INTEGER)
WARNING: rejected rule (virtualinteger -> MINUS INTEGER) in state 470
WARNING: reduce/reduce conflict in state 470 resolved using rule (virtualinteger -> INTEGER)
WARNING: rejected rule (virtualinteger -> MINUS INTEGER) in state 470
WARNING: reduce/reduce conflict in state 470 resolved using rule (number -> MINUS INTEGER)
WARNING: rejected rule (virtualinteger -> INTEGER) in state 470
WARNING: reduce/reduce conflict in state 471 resolved using rule (number -> MINUS BINARY)
WARNING: rejected rule (virtualinteger -> MINUS BINARY) in state 471
WARNING: reduce/reduce conflict in state 471 resolved using rule (virtualinteger -> BINARY)
WARNING: rejected rule (virtualinteger -> MINUS BINARY) in state 471
WARNING: reduce/reduce conflict in state 471 resolved using rule (number -> MINUS BINARY)
WARNING: rejected rule (virtualinteger -> BINARY) in state 471
WARNING: reduce/reduce conflict in state 472 resolved using rule (virtualnumber -> DOLLAR ID)
WARNING: rejected rule (virtualinteger -> DOLLAR ID) in state 472
